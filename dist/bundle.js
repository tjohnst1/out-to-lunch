!function(t){function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}var e={};n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},n.p="",n(n.s=174)}([function(t,n,e){"use strict";function r(t){return t>1?0:t<-1?a:Math.acos(t)}function i(t){return t>1?f:t<-1?-f:Math.asin(t)}function u(t){return(t=j(t/2))*t}e.d(n,"i",function(){return c}),e.d(n,"j",function(){return o}),e.d(n,"o",function(){return a}),e.d(n,"l",function(){return f}),e.d(n,"q",function(){return s}),e.d(n,"w",function(){return l}),e.d(n,"h",function(){return h}),e.d(n,"r",function(){return d}),e.d(n,"a",function(){return b}),e.d(n,"d",function(){return v}),e.d(n,"e",function(){return p}),e.d(n,"g",function(){return g}),e.d(n,"f",function(){return y}),e.d(n,"k",function(){return _}),e.d(n,"n",function(){return m}),e.d(n,"p",function(){return O}),e.d(n,"t",function(){return j}),e.d(n,"s",function(){return x}),e.d(n,"u",function(){return w}),e.d(n,"v",function(){return M}),n.b=r,n.c=i,n.m=u;var c=1e-6,o=1e-12,a=Math.PI,f=a/2,s=a/4,l=2*a,h=180/a,d=a/180,b=Math.abs,v=Math.atan,p=Math.atan2,g=Math.cos,y=Math.ceil,_=Math.exp,m=(Math.floor,Math.log),O=Math.pow,j=Math.sin,x=Math.sign||function(t){return t>0?1:t<0?-1:0},w=Math.sqrt,M=Math.tan},function(t,n,e){"use strict";var r=e(50);e.d(n,"a",function(){return r.a});var i=e(200);e.d(n,"d",function(){return i.a});var u=e(106);e.d(n,"e",function(){return u.a});var c=e(201);e.d(n,"f",function(){return c.a});var o=e(51);e.d(n,"g",function(){return o.a});var a=e(52);e.d(n,"h",function(){return a.a});var f=e(202);e.d(n,"i",function(){return f.a});var s=e(230);e.d(n,"j",function(){return s.a});var l=e(4);e.d(n,"k",function(){return l.b});var h=e(56);e.d(n,"l",function(){return h.a});var d=e(107);e.d(n,"m",function(){return d.a});var b=e(110);e.d(n,"n",function(){return b.b});var v=e(231);e.d(n,"o",function(){return v.a});var p=e(232);e.d(n,"p",function(){return p.a});var g=e(57);e.d(n,"q",function(){return g.a});var y=e(54);e.d(n,"c",function(){return y.c}),e.d(n,"b",function(){return y.a})},function(t,n,e){"use strict";function r(t,n,e,c){function o(n){return t(n=new Date(+n)),n}return o.floor=o,o.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},o.round=function(t){var n=o(t),e=o.ceil(t);return t-n<e-t?n:e},o.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},o.range=function(e,r,i){var u=[];if(e=o.ceil(e),i=null==i?1:Math.floor(i),!(e<r&&i>0))return u;do{u.push(new Date(+e))}while(n(e,i),t(e),e<r);return u},o.filter=function(e){return r(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(o.count=function(n,r){return i.setTime(+n),u.setTime(+r),t(i),t(u),Math.floor(e(i,u))},o.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?o.filter(c?function(n){return c(n)%t==0}:function(n){return o.count(0,n)%t==0}):o:null}),o}n.a=r;var i=new Date,u=new Date},function(t,n,e){"use strict";var r=e(94);e.d(n,"b",function(){return r.c}),e.d(n,"d",function(){return r.b}),e.d(n,"c",function(){return r.a});var i=e(17);e.d(n,"a",function(){return i.a});var u=e(95);e.d(n,"e",function(){return u.a});var c=e(176);e.d(n,"f",function(){return c.a});var o=e(177);e.d(n,"g",function(){return o.a});var a=e(97);e.d(n,"h",function(){return a.a});var f=e(99);e.d(n,"i",function(){return f.a});var s=e(178);e.d(n,"j",function(){return s.a});var l=e(181);e.d(n,"w",function(){return l.a});var h=e(182);e.d(n,"x",function(){return h.a});var d=e(103);e.d(n,"y",function(){return d.a});var b=e(183);e.d(n,"k",function(){return b.a});var v=e(184);e.d(n,"l",function(){return v.a});var p=e(185);e.d(n,"m",function(){return p.a});var g=e(186);e.d(n,"n",function(){return g.a});var y=e(104);e.d(n,"o",function(){return y.a});var _=e(96);e.d(n,"p",function(){return _.a});var m=e(187);e.d(n,"q",function(){return m.a});var O=e(48);e.d(n,"r",function(){return O.a});var j=e(101);e.d(n,"s",function(){return j.a});var x=e(188);e.d(n,"t",function(){return x.a});var w=e(189);e.d(n,"u",function(){return w.a});var M=e(190);e.d(n,"v",function(){return M.a});var k=e(102);e.d(n,"B",function(){return k.a}),e.d(n,"z",function(){return k.b}),e.d(n,"A",function(){return k.c});var S=e(105);e.d(n,"C",function(){return S.a});var T=e(98);e.d(n,"D",function(){return T.a});var E=e(191);e.d(n,"E",function(){return E.a})},function(t,n,e){"use strict";function r(t,n){this._groups=t,this._parents=n}function i(){return new r([[document.documentElement]],z)}e.d(n,"c",function(){return z}),n.a=r;var u=e(203),c=e(204),o=e(205),a=e(206),f=e(108),s=e(208),l=e(209),h=e(210),d=e(211),b=e(212),v=e(213),p=e(214),g=e(215),y=e(216),_=e(217),m=e(218),O=e(110),j=e(219),x=e(220),w=e(221),M=e(222),k=e(223),S=e(224),T=e(225),E=e(226),A=e(227),N=e(228),C=e(54),P=e(229),z=[null];r.prototype=i.prototype={constructor:r,select:u.a,selectAll:c.a,filter:o.a,data:a.a,enter:f.b,exit:s.a,merge:l.a,order:h.a,sort:d.a,call:b.a,nodes:v.a,node:p.a,size:g.a,empty:y.a,each:_.a,attr:m.a,style:O.a,property:j.a,classed:x.a,text:w.a,html:M.a,raise:k.a,lower:S.a,append:T.a,insert:E.a,remove:A.a,datum:N.a,on:C.b,dispatch:P.a},n.b=i},function(t,n,e){"use strict";var r=e(58);e.d(n,"a",function(){return r.a});var i=e(117);e.d(n,"b",function(){return i.a});var u=e(61);e.d(n,"c",function(){return u.b});var c=e(115);e.d(n,"d",function(){return c.a});var o=e(118);e.d(n,"g",function(){return o.a});var a=e(33);e.d(n,"m",function(){return a.a});var f=e(119);e.d(n,"n",function(){return f.a});var s=e(237);e.d(n,"r",function(){return s.a});var l=e(120);e.d(n,"s",function(){return l.a});var h=e(238);e.d(n,"t",function(){return h.a}),e.d(n,"u",function(){return h.b});var d=e(241);e.d(n,"v",function(){return d.a});var b=e(114);e.d(n,"o",function(){return b.a}),e.d(n,"p",function(){return b.b}),e.d(n,"q",function(){return b.c});var v=e(242);e.d(n,"j",function(){return v.a}),e.d(n,"k",function(){return v.b});var p=e(243);e.d(n,"l",function(){return p.a});var g=e(244);e.d(n,"h",function(){return g.a}),e.d(n,"i",function(){return g.b});var y=e(245);e.d(n,"e",function(){return y.b}),e.d(n,"f",function(){return y.a});var _=e(246);e.d(n,"w",function(){return _.a})},function(t,n,e){"use strict";function r(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>l)throw new Error("too late");return e}function i(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>d)throw new Error("too late");return e}function u(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("too late");return e}function c(t,n,e){function r(t){e.state=h,e.timer.restart(i,e.delay,e.time),e.delay<=t&&i(t-e.delay)}function i(r){var s,l,p,y;if(e.state!==h)return c();for(s in f)if(y=f[s],y.name===e.name){if(y.state===b)return Object(a.c)(i);y.state===v?(y.state=g,y.timer.stop(),y.on.call("interrupt",t,t.__data__,y.index,y.group),delete f[s]):+s<n&&(y.state=g,y.timer.stop(),delete f[s])}if(Object(a.c)(function(){e.state===b&&(e.state=v,e.timer.restart(u,e.delay,e.time),u(r))}),e.state=d,e.on.call("start",t,t.__data__,e.index,e.group),e.state===d){for(e.state=b,o=new Array(p=e.tween.length),s=0,l=-1;s<p;++s)(y=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(o[++l]=y);o.length=l+1}}function u(n){for(var r=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(c),e.state=p,1),i=-1,u=o.length;++i<u;)o[i].call(null,r);e.state===p&&(e.on.call("end",t,t.__data__,e.index,e.group),c())}function c(){e.state=g,e.timer.stop(),delete f[n];for(var r in f)return;delete t.__transition}var o,f=t.__transition;f[n]=e,e.timer=Object(a.d)(r,0,e.time)}e.d(n,"c",function(){return h}),e.d(n,"d",function(){return d}),e.d(n,"b",function(){return p}),e.d(n,"a",function(){return g}),n.g=r,n.h=i,n.f=u;var o=e(12),a=e(34),f=Object(o.a)("start","end","interrupt"),s=[],l=0,h=1,d=2,b=3,v=4,p=5,g=6;n.e=function(t,n,e,r,i,u){var o=t.__transition;if(o){if(e in o)return}else t.__transition={};c(t,e,{name:n,index:r,group:i,on:f,tween:s,time:u.time,delay:u.delay,duration:u.duration,ease:u.ease,timer:null,state:l})}},function(t,n,e){"use strict";var r=e(59);e.d(n,"a",function(){return r.e}),e.d(n,"f",function(){return r.g}),e.d(n,"d",function(){return r.f});var i=e(235);e.d(n,"e",function(){return i.a}),e.d(n,"c",function(){return i.b});var u=e(236);e.d(n,"b",function(){return u.a})},function(t,n,e){"use strict";function r(t){return i(function(){return t})()}function i(t){function n(t){return t=m(t[0]*s.r,t[1]*s.r),[t[0]*k+g,y-t[1]*k]}function e(t){return(t=m.invert((t[0]-g)/k,(y-t[1])/k))&&[t[0]*s.h,t[1]*s.h]}function r(t,n){return t=p(t,n),[t[0]*k+g,y-t[1]*k]}function i(){m=Object(a.a)(_=Object(l.b)(N,C,P),p);var t=p(E,A);return g=S-t[0]*k,y=T+t[1]*k,h()}function h(){return w=M=null,n}var p,g,y,_,m,O,j,x,w,M,k=150,S=480,T=250,E=0,A=0,N=0,C=0,P=0,z=null,L=u.a,R=null,q=f.a,I=.5,D=Object(b.a)(r,I);return n.stream=function(t){return w&&M===t?w:w=v(L(_,D(q(M=t))))},n.clipAngle=function(t){return arguments.length?(L=+t?Object(c.a)(z=t*s.r,6*s.r):(z=null,u.a),h()):z*s.h},n.clipExtent=function(t){return arguments.length?(q=null==t?(R=O=j=x=null,f.a):Object(o.a)(R=+t[0][0],O=+t[0][1],j=+t[1][0],x=+t[1][1]),h()):null==R?null:[[R,O],[j,x]]},n.scale=function(t){return arguments.length?(k=+t,i()):k},n.translate=function(t){return arguments.length?(S=+t[0],T=+t[1],i()):[S,T]},n.center=function(t){return arguments.length?(E=t[0]%360*s.r,A=t[1]%360*s.r,i()):[E*s.h,A*s.h]},n.rotate=function(t){return arguments.length?(N=t[0]%360*s.r,C=t[1]%360*s.r,P=t.length>2?t[2]%360*s.r:0,i()):[N*s.h,C*s.h,P*s.h]},n.precision=function(t){return arguments.length?(D=Object(b.a)(r,I=t*t),h()):Object(s.u)(I)},n.fitExtent=function(t,e){return Object(d.a)(n,t,e)},n.fitSize=function(t,e){return Object(d.b)(n,t,e)},function(){return p=t.apply(this,arguments),n.invert=p.invert&&e,i()}}n.a=r,n.b=i;var u=e(338),c=e(339),o=e(72),a=e(132),f=e(73),s=e(0),l=e(37),h=e(38),d=e(76),b=e(340),v=Object(h.b)({point:function(t,n){this.stream.point(t*s.r,n*s.r)}})},function(t,n,e){"use strict";e.d(n,"d",function(){return r}),e.d(n,"c",function(){return i}),e.d(n,"b",function(){return u}),e.d(n,"a",function(){return c}),e.d(n,"e",function(){return o});var r=1e3,i=6e4,u=36e5,c=864e5,o=6048e5},function(t,n,e){"use strict";function r(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function i(t){return Object(c.k)().transition(t)}function u(){return++w}n.a=r,n.b=i,n.c=u;var c=e(1),o=e(252),a=e(253),f=e(254),s=e(255),l=e(256),h=e(257),d=e(258),b=e(259),v=e(260),p=e(261),g=e(262),y=e(263),_=e(264),m=e(265),O=e(266),j=e(267),x=e(35),w=0,M=c.k.prototype;r.prototype=i.prototype={constructor:r,select:p.a,selectAll:g.a,filter:h.a,merge:d.a,selection:y.a,transition:j.a,call:M.call,nodes:M.nodes,node:M.node,size:M.size,empty:M.empty,each:M.each,on:b.a,attr:o.a,attrTween:a.a,style:_.a,styleTween:m.a,text:O.a,remove:v.a,tween:x.a,delay:f.a,duration:s.a,ease:l.a}},function(t,n,e){"use strict";function r(){}n.a=r},function(t,n,e){"use strict";var r=e(198);e.d(n,"a",function(){return r.a})},function(t,n,e){"use strict";var r=e(287);e.d(n,"a",function(){return r.a})},function(t,n,e){"use strict";function r(t,n){t&&o.hasOwnProperty(t.type)&&o[t.type](t,n)}function i(t,n,e){var r,i=-1,u=t.length-e;for(n.lineStart();++i<u;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function u(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)i(t[e],n,1);n.polygonEnd()}var c={Feature:function(t,n){r(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,i=-1,u=e.length;++i<u;)r(e[i].geometry,n)}},o={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){i(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,u=e.length;++r<u;)i(e[r],n,0)},Polygon:function(t,n){u(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)u(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,i=-1,u=e.length;++i<u;)r(e[i],n)}};n.a=function(t,n){t&&c.hasOwnProperty(t.type)?c[t.type](t,n):r(t,n)}},function(t,n,e){"use strict";e.d(n,"a",function(){return i}),e.d(n,"b",function(){return u});var r=Array.prototype,i=r.map,u=r.slice},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";n.a=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}},function(t,n,e){"use strict";function r(){this.reset()}function i(t,n,e){var r=t.s=n+e,i=r-n,u=r-i;t.t=n-u+(e-i)}n.a=function(){return new r},r.prototype={constructor:r,reset:function(){this.s=this.t=0},add:function(t){i(u,t,this.t),i(this,u.s,this.s),this.s?this.t+=u.t:this.s=u.t},valueOf:function(){return this.s}};var u=new r},function(t,n,e){"use strict";n.a=function(){return Math.random()}},function(t,n,e){"use strict";n.a=function(t){return null===t?NaN:+t}},function(t,n,e){"use strict";function r(t,n){return function(e){return t+e*n}}function i(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}function u(t,n){var e=n-t;return e?r(t,e>180||e<-180?e-360*Math.round(e/360):e):Object(a.a)(isNaN(t)?n:t)}function c(t){return 1==(t=+t)?o:function(n,e){return e-n?i(n,e,t):Object(a.a)(isNaN(n)?e:n)}}function o(t,n){var e=n-t;return e?r(t,e):Object(a.a)(isNaN(t)?n:t)}n.c=u,n.b=c,n.a=o;var a=e(116)},function(t,n,e){"use strict";var r=e(288);e.d(n,"d",function(){return r.a});var i=e(289);e.d(n,"e",function(){return i.a});var u=e(64);e.d(n,"c",function(){return u.a});var c=e(290);e.d(n,"b",function(){return c.a});var o=e(291);e.d(n,"f",function(){return o.a});var a=e(292);e.d(n,"a",function(){return a.a})},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";function r(t){return[Object(s.e)(t[1],t[0]),Object(s.c)(t[2])]}function i(t){var n=t[0],e=t[1],r=Object(s.g)(e);return[r*Object(s.g)(n),r*Object(s.t)(n),Object(s.t)(e)]}function u(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function c(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function o(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function a(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function f(t){var n=Object(s.u)(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}n.g=r,n.a=i,n.d=u,n.c=c,n.b=o,n.f=a,n.e=f;var s=e(0)},function(t,n,e){"use strict";function r(t){return function(n,e){var r=Object(u.g)(n),i=Object(u.g)(e),c=t(r*i);return[c*i*Object(u.t)(n),c*Object(u.t)(e)]}}function i(t){return function(n,e){var r=Object(u.u)(n*n+e*e),i=t(r),c=Object(u.t)(i),o=Object(u.g)(i);return[Object(u.e)(n*c,r*o),Object(u.c)(r&&e*c/r)]}}n.b=r,n.a=i;var u=e(0)},function(t,n,e){"use strict";n.a=function(t,n,e,r,i){for(var u,c=t.children,o=-1,a=c.length,f=t.value&&(r-n)/t.value;++o<a;)u=c[o],u.y0=e,u.y1=i,u.x0=n,u.x1=n+=u.value*f}},function(t,n,e){"use strict";function r(t){var n=t.domain;return t.ticks=function(t){var e=n();return Object(u.B)(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return Object(a.a)(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),c=0,o=i.length-1,a=i[c],f=i[o];return f<a&&(r=a,a=f,f=r,r=c,c=o,o=r),r=Object(u.z)(a,f,e),r>0?(a=Math.floor(a/r)*r,f=Math.ceil(f/r)*r,r=Object(u.z)(a,f,e)):r<0&&(a=Math.ceil(a*r)/r,f=Math.floor(f*r)/r,r=Object(u.z)(a,f,e)),r>0?(i[c]=Math.floor(a/r)*r,i[o]=Math.ceil(f/r)*r,n(i)):r<0&&(i[c]=Math.ceil(a*r)/r,i[o]=Math.floor(f*r)/r,n(i)),t},t}function i(){var t=Object(o.b)(o.c,c.m);return t.copy=function(){return Object(o.a)(t,i())},r(t)}n.b=r,n.a=i;var u=e(3),c=e(5),o=e(41),a=e(399)},function(t,n,e){"use strict";n.a=function(t){return t.match(/.{6}/g).map(function(t){return"#"+t})}},function(t,n,e){"use strict";function r(t){return t>1?0:t<-1?d:Math.acos(t)}function i(t){return t>=1?b:t<=-1?-b:Math.asin(t)}e.d(n,"a",function(){return u}),e.d(n,"d",function(){return c}),e.d(n,"e",function(){return o}),e.d(n,"h",function(){return a}),e.d(n,"i",function(){return f}),e.d(n,"k",function(){return s}),e.d(n,"l",function(){return l}),e.d(n,"f",function(){return h}),e.d(n,"j",function(){return d}),e.d(n,"g",function(){return b}),e.d(n,"m",function(){return v}),n.b=r,n.c=i;var u=Math.abs,c=Math.atan2,o=Math.cos,a=Math.max,f=Math.min,s=Math.sin,l=Math.sqrt,h=1e-12,d=Math.PI,b=d/2,v=2*d},function(t,n,e){"use strict";n.a=function(t,n){if((i=t.length)>1)for(var e,r,i,u=1,c=t[n[0]],o=c.length;u<i;++u)for(r=c,c=t[n[u]],e=0;e<o;++e)c[e][1]+=c[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]}},function(t,n,e){"use strict";n.a=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e}},function(t,n,e){"use strict";function r(t,n,e){return(t[0]-e[0])*(n[1]-t[1])-(t[0]-n[0])*(e[1]-t[1])}function i(t,n){return n[1]-t[1]||n[0]-t[0]}function u(t,n){var e,r,u,v=t.sort(i).pop();for(f=[],o=new Array(t.length),c=new b.b,a=new b.b;;)if(u=h.c,v&&(!u||v[1]<u.y||v[1]===u.y&&v[0]<u.x))v[0]===e&&v[1]===r||(Object(s.a)(v),e=v[0],r=v[1]),v=t.pop();else{if(!u)break;Object(s.b)(u.arc)}if(Object(l.d)(),n){var p=+n[0][0],g=+n[0][1],y=+n[1][0],_=+n[1][1];Object(d.a)(p,g,y,_),Object(l.b)(p,g,y,_)}this.edges=f,this.cells=o,c=a=f=o=null}e.d(n,"f",function(){return v}),e.d(n,"g",function(){return p}),e.d(n,"a",function(){return c}),e.d(n,"b",function(){return o}),e.d(n,"c",function(){return a}),e.d(n,"e",function(){return f}),n.d=u;var c,o,a,f,s=e(458),l=e(170),h=e(171),d=e(90),b=e(89),v=1e-6,p=1e-12;u.prototype={constructor:u,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return Object(l.a)(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,i){if(c=(u=e.halfedges).length)for(var u,c,o,a=e.site,f=-1,s=n[u[c-1]],l=s.left===a?s.right:s.left;++f<c;)o=l,s=n[u[f]],l=s.left===a?s.right:s.left,o&&l&&i<o.index&&i<l.index&&r(a,o,l)<0&&t.push([a.data,o.data,l.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,u=this,c=u._found||0,o=u.cells.length;!(i=u.cells[c]);)if(++c>=o)return null;var a=t-i.site[0],f=n-i.site[1],s=a*a+f*f;do{i=u.cells[r=c],c=null,i.halfedges.forEach(function(e){var r=u.edges[e],o=r.left;if(o!==i.site&&o||(o=r.right)){var a=t-o[0],f=n-o[1],l=a*a+f*f;l<s&&(s=l,c=o.index)}})}while(null!==c);return u._found=r,null==e||s<=e*e?i.site:null}}},function(t,n,e){"use strict";n.a=function(t,n){return t=+t,n-=t,function(e){return t+n*e}}},function(t,n,e){"use strict";var r=e(63);e.d(n,"b",function(){return r.b}),e.d(n,"d",function(){return r.c}),e.d(n,"e",function(){return r.d});var i=e(249);e.d(n,"c",function(){return i.a});var u=e(250);e.d(n,"a",function(){return u.a})},function(t,n,e){"use strict";function r(t,n){var e,r;return function(){var i=Object(c.h)(this,t),u=i.tween;if(u!==e){r=e=u;for(var o=0,a=r.length;o<a;++o)if(r[o].name===n){r=r.slice(),r.splice(o,1);break}}i.tween=r}}function i(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var u=Object(c.h)(this,t),o=u.tween;if(o!==r){i=(r=o).slice();for(var a={name:n,value:e},f=0,s=i.length;f<s;++f)if(i[f].name===n){i[f]=a;break}f===s&&i.push(a)}u.tween=i}}function u(t,n,e){var r=t._id;return t.each(function(){var t=Object(c.h)(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return Object(c.f)(t,r).value[n]}}n.b=u;var c=e(6);n.a=function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var u,o=Object(c.f)(this.node(),e).tween,a=0,f=o.length;a<f;++a)if((u=o[a]).name===t)return u.value;return null}return this.each((null==n?r:i)(e,t,n))}},function(t,n,e){"use strict";var r=e(71);n.a=function(t){return t=Object(r.a)(Math.abs(t)),t?t[1]:NaN}},function(t,n,e){"use strict";function r(t,n){return[t>f.o?t-f.w:t<-f.o?t+f.w:t,n]}function i(t,n,e){return(t%=f.w)?n||e?Object(a.a)(c(t),o(n,e)):c(t):n||e?o(n,e):r}function u(t){return function(n,e){return n+=t,[n>f.o?n-f.w:n<-f.o?n+f.w:n,e]}}function c(t){var n=u(t);return n.invert=u(-t),n}function o(t,n){function e(t,n){var e=Object(f.g)(n),o=Object(f.g)(t)*e,a=Object(f.t)(t)*e,s=Object(f.t)(n),l=s*r+o*i;return[Object(f.e)(a*u-l*c,o*r-s*i),Object(f.c)(l*u+a*c)]}var r=Object(f.g)(t),i=Object(f.t)(t),u=Object(f.g)(n),c=Object(f.t)(n);return e.invert=function(t,n){var e=Object(f.g)(n),o=Object(f.g)(t)*e,a=Object(f.t)(t)*e,s=Object(f.t)(n),l=s*u-a*c;return[Object(f.e)(a*u+s*c,o*r+l*i),Object(f.c)(l*r-o*i)]},e}n.b=i;var a=e(132),f=e(0);r.invert=r,n.a=function(t){function n(n){return n=t(n[0]*f.r,n[1]*f.r),n[0]*=f.h,n[1]*=f.h,n}return t=i(t[0]*f.r,t[1]*f.r,t.length>2?t[2]*f.r:0),n.invert=function(n){return n=t.invert(n[0]*f.r,n[1]*f.r),n[0]*=f.h,n[1]*=f.h,n},n}},function(t,n,e){"use strict";function r(t){return function(n){var e=new i;for(var r in t)e[r]=t[r];return e.stream=n,e}}function i(){}n.b=r,n.a=function(t){return{stream:r(t)}},i.prototype={constructor:i,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}}},function(t,n,e){"use strict";n.a=function(t,n,e,r,i){for(var u,c=t.children,o=-1,a=c.length,f=t.value&&(i-e)/t.value;++o<a;)u=c[o],u.x0=n,u.x1=r,u.y0=e,u.y1=e+=u.value*f}},function(t,n,e){"use strict";var r=e(81);n.a=function(t,n){return function(e,i){var u=Object(r.a)(e).mimeType(t).response(n);if(null!=i){if("function"!=typeof i)throw new Error("invalid callback: "+i);return u.get(i)}return u}}},function(t,n,e){"use strict";function r(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Object(d.a)(n)}function i(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}function u(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}function c(t,n,e,r){var i=t[0],u=t[1],c=n[0],o=n[1];return u<i?(i=e(u,i),c=r(o,c)):(i=e(i,u),c=r(c,o)),function(t){return c(i(t))}}function o(t,n,e,r){var i=Math.min(t.length,n.length)-1,u=new Array(i),c=new Array(i),o=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++o<i;)u[o]=e(t[o],t[o+1]),c[o]=r(n[o],n[o+1]);return function(n){var e=Object(s.b)(t,n,1,i)-1;return c[e](u[e](n))}}function a(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function f(t,n){function e(){return f=Math.min(p.length,g.length)>2?o:c,s=d=null,a}function a(n){return(s||(s=f(p,g,_?i(t):t,y)))(+n)}var f,s,d,p=v,g=v,y=l.a,_=!1;return a.invert=function(t){return(d||(d=f(g,p,r,_?u(n):n)))(+t)},a.domain=function(t){return arguments.length?(p=h.a.call(t,b.a),e()):p.slice()},a.range=function(t){return arguments.length?(g=h.b.call(t),e()):g.slice()},a.rangeRound=function(t){return g=h.b.call(t),y=l.r,e()},a.clamp=function(t){return arguments.length?(_=!!t,e()):_},a.interpolate=function(t){return arguments.length?(y=t,e()):y},e()}n.c=r,n.a=a,n.b=f;var s=e(3),l=e(5),h=e(15),d=e(82),b=e(151),v=[0,1]},function(t,n,e){"use strict";var r=e(2);e.d(n,"g",function(){return r.a});var i=e(405);e.d(n,"h",function(){return i.a}),e.d(n,"i",function(){return i.b}),e.d(n,"L",function(){return i.a}),e.d(n,"M",function(){return i.b});var u=e(406);e.d(n,"r",function(){return u.a}),e.d(n,"s",function(){return u.b}),e.d(n,"V",function(){return u.a}),e.d(n,"W",function(){return u.b});var c=e(407);e.d(n,"j",function(){return c.a}),e.d(n,"k",function(){return c.b});var o=e(408);e.d(n,"e",function(){return o.a}),e.d(n,"f",function(){return o.b});var a=e(409);e.d(n,"a",function(){return a.b}),e.d(n,"b",function(){return a.a});var f=e(410);e.d(n,"B",function(){return f.g}),e.d(n,"C",function(){return f.h}),e.d(n,"t",function(){return f.g}),e.d(n,"u",function(){return f.h}),e.d(n,"l",function(){return f.c}),e.d(n,"m",function(){return f.d}),e.d(n,"x",function(){return f.k}),e.d(n,"y",function(){return f.l}),e.d(n,"z",function(){return f.m}),e.d(n,"A",function(){return f.n}),e.d(n,"v",function(){return f.i}),e.d(n,"w",function(){return f.j}),e.d(n,"c",function(){return f.a}),e.d(n,"d",function(){return f.b}),e.d(n,"p",function(){return f.e}),e.d(n,"q",function(){return f.f});var s=e(411);e.d(n,"n",function(){return s.a}),e.d(n,"o",function(){return s.b});var l=e(412);e.d(n,"D",function(){return l.a}),e.d(n,"E",function(){return l.b});var h=e(413);e.d(n,"N",function(){return h.a}),e.d(n,"O",function(){return h.b});var d=e(414);e.d(n,"J",function(){return d.a}),e.d(n,"K",function(){return d.b});var b=e(415);e.d(n,"F",function(){return b.a}),e.d(n,"G",function(){return b.b});var v=e(416);e.d(n,"_5",function(){return v.g}),e.d(n,"_6",function(){return v.h}),e.d(n,"X",function(){return v.g}),e.d(n,"Y",function(){return v.h}),e.d(n,"P",function(){return v.c}),e.d(n,"Q",function(){return v.d}),e.d(n,"_1",function(){return v.k}),e.d(n,"_2",function(){return v.l}),e.d(n,"_3",function(){return v.m}),e.d(n,"_4",function(){return v.n}),e.d(n,"Z",function(){return v.i}),e.d(n,"_0",function(){return v.j}),e.d(n,"H",function(){return v.a}),e.d(n,"I",function(){return v.b}),e.d(n,"T",function(){return v.e}),e.d(n,"U",function(){return v.f});var p=e(417);e.d(n,"R",function(){return p.a}),e.d(n,"S",function(){return p.b});var g=e(418);e.d(n,"_7",function(){return g.a}),e.d(n,"_8",function(){return g.b})},function(t,n,e){"use strict";function r(t){this._context=t}r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}},n.a=function(t){return new r(t)}},function(t,n,e){"use strict";n.a=function(){}},function(t,n,e){"use strict";function r(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function i(t){this._context=t}n.c=r,n.a=i,i.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:r(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:r(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},n.b=function(t){return new i(t)}},function(t,n,e){"use strict";function r(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function i(t,n){this._context=t,this._k=(1-n)/6}n.c=r,n.a=i,i.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:r(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:r(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}},n.b=function t(n){function e(t){return new i(t,n)}return e.tension=function(n){return t(+n)},e}(0)},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.elements=void 0;var r=e(92),i=function(t){return t&&t.__esModule?t:{default:t}}(r),u=e(93),c=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(u),o=e(173),a=e(465),f=e(91),s=n.elements={mainContent:document.getElementById("main-content"),inputContainer:document.getElementById("input-container"),detailsContainer:document.getElementsByClassName("details-container")[0],aboutLink:document.getElementById("about-link"),editLink:document.getElementById("edit-link"),closeBtn:document.getElementById("close-btn"),addBtn:document.getElementById("add-btn"),selectionInputs:document.getElementById("selection-input"),editContainer:document.getElementById("edit-container")},l={selectedPlaces:i.default,pieChart:{elementId:"wheel-container",viewboxWidth:375,viewboxHeight:375,width:325,height:325,innerWidth:20,colorScale:c.scaleOrdinal(c.schemeCategory20c),selectedPlaces:i.default}},h=new o.PieChart(l.pieChart);h.draw(),(0,a.addAboutLinkListener)(),(0,a.addEditLinkListener)(),(0,a.addCloseBtnListener)(),(0,a.addSpinButtonListener)(h),(0,f.createInputs)(h),(0,a.addResizeListener)(s.mainContent)},function(t,n,e){"use strict";var r=e(20);n.a=function(t,n,e){if(null==e&&(e=r.a),i=t.length){if((n=+n)<=0||i<2)return+e(t[0],0,t);if(n>=1)return+e(t[i-1],i-1,t);var i,u=(i-1)*n,c=Math.floor(u),o=+e(t[c],c,t);return o+(+e(t[c+1],c+1,t)-o)*(u-c)}}},function(t,n,e){"use strict";var r=e(199);e.d(n,"a",function(){return r.a});var i=e(111);e.d(n,"b",function(){return i.a}),e.d(n,"c",function(){return i.b})},function(t,n,e){"use strict";function r(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===c.b&&n.documentElement.namespaceURI===c.b?n.createElement(t):n.createElementNS(e,t)}}function i(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var u=e(51),c=e(52);n.a=function(t){var n=Object(u.a)(t);return(n.local?i:r)(n)}},function(t,n,e){"use strict";var r=e(52);n.a=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),r.a.hasOwnProperty(n)?{space:r.a[n],local:t}:t}},function(t,n,e){"use strict";e.d(n,"b",function(){return r});var r="http://www.w3.org/1999/xhtml";n.a={svg:"http://www.w3.org/2000/svg",xhtml:r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"}},function(t,n,e){"use strict";var r=e(54);n.a=function(){for(var t,n=r.c;t=n.sourceEvent;)n=t;return n}},function(t,n,e){"use strict";function r(t,n,e){return t=i(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function i(t,n,e){return function(r){var i=s;s=r;try{t.call(this,this.__data__,n,e)}finally{s=i}}}function u(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}function c(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,u=n.length;r<u;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function o(t,n,e){var u=f.hasOwnProperty(t.type)?r:i;return function(r,i,c){var o,a=this.__on,f=u(n,i,c);if(a)for(var s=0,l=a.length;s<l;++s)if((o=a[s]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=f,o.capture=e),void(o.value=n);this.addEventListener(t.type,f,e),o={type:t.type,name:t.name,value:n,listener:f,capture:e},a?a.push(o):this.__on=[o]}}function a(t,n,e,r){var i=s;t.sourceEvent=s,s=t;try{return n.apply(e,r)}finally{s=i}}e.d(n,"c",function(){return s}),n.a=a;var f={},s=null;if("undefined"!=typeof document){"onmouseenter"in document.documentElement||(f={mouseenter:"mouseover",mouseleave:"mouseout"})}n.b=function(t,n,e){var r,i,a=u(t+""),f=a.length;{if(!(arguments.length<2)){for(s=n?o:c,null==e&&(e=!1),r=0;r<f;++r)this.each(s(a[r],n,e));return this}var s=this.node().__on;if(s)for(var l,h=0,d=s.length;h<d;++h)for(r=0,l=s[h];r<f;++r)if((i=a[r]).type===l.type&&i.name===l.name)return l.value}}},function(t,n,e){"use strict";n.a=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}},function(t,n,e){"use strict";function r(){}n.a=function(t){return null==t?r:function(){return this.querySelector(t)}}},function(t,n,e){"use strict";n.a=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}},function(t,n,e){"use strict";var r=e(7),i=e(114),u=e(117),c=e(118),o=e(33),a=e(119),f=e(120),s=e(116);n.a=function(t,n){var e,l=typeof n;return null==n||"boolean"===l?Object(s.a)(n):("number"===l?o.a:"string"===l?(e=Object(r.a)(n))?(n=e,i.a):f.a:n instanceof r.a?i.a:n instanceof Date?c.a:Array.isArray(n)?u.a:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?a.a:o.a)(t,n)}},function(t,n,e){"use strict";function r(){}function i(t){var n;return t=(t+"").trim().toLowerCase(),(n=O.exec(t))?(n=parseInt(n[1],16),new f(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1)):(n=j.exec(t))?u(parseInt(n[1],16)):(n=x.exec(t))?new f(n[1],n[2],n[3],1):(n=w.exec(t))?new f(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=M.exec(t))?c(n[1],n[2],n[3],n[4]):(n=k.exec(t))?c(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=S.exec(t))?s(n[1],n[2]/100,n[3]/100,1):(n=T.exec(t))?s(n[1],n[2]/100,n[3]/100,n[4]):E.hasOwnProperty(t)?u(E[t]):"transparent"===t?new f(NaN,NaN,NaN,0):null}function u(t){return new f(t>>16&255,t>>8&255,255&t,1)}function c(t,n,e,r){return r<=0&&(t=n=e=NaN),new f(t,n,e,r)}function o(t){return t instanceof r||(t=i(t)),t?(t=t.rgb(),new f(t.r,t.g,t.b,t.opacity)):new f}function a(t,n,e,r){return 1===arguments.length?o(t):new f(t,n,e,null==r?1:r)}function f(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function s(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new d(t,n,e,r)}function l(t){if(t instanceof d)return new d(t.h,t.s,t.l,t.opacity);if(t instanceof r||(t=i(t)),!t)return new d;if(t instanceof d)return t;t=t.rgb();var n=t.r/255,e=t.g/255,u=t.b/255,c=Math.min(n,e,u),o=Math.max(n,e,u),a=NaN,f=o-c,s=(o+c)/2;return f?(a=n===o?(e-u)/f+6*(e<u):e===o?(u-n)/f+2:(n-e)/f+4,f/=s<.5?o+c:2-o-c,a*=60):f=s>0&&s<1?0:a,new d(a,f,s,t.opacity)}function h(t,n,e,r){return 1===arguments.length?l(t):new d(t,n,e,null==r?1:r)}function d(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function b(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}n.a=r,e.d(n,"d",function(){return p}),e.d(n,"c",function(){return g}),n.e=i,n.h=o,n.g=a,n.b=f,n.f=h;var v=e(60),p=.7,g=1/p,y="\\s*([+-]?\\d+)\\s*",_="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",m="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",O=/^#([0-9a-f]{3})$/,j=/^#([0-9a-f]{6})$/,x=new RegExp("^rgb\\("+[y,y,y]+"\\)$"),w=new RegExp("^rgb\\("+[m,m,m]+"\\)$"),M=new RegExp("^rgba\\("+[y,y,y,_]+"\\)$"),k=new RegExp("^rgba\\("+[m,m,m,_]+"\\)$"),S=new RegExp("^hsl\\("+[_,m,m]+"\\)$"),T=new RegExp("^hsla\\("+[_,m,m,_]+"\\)$"),E={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Object(v.a)(r,i,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),Object(v.a)(f,a,Object(v.b)(r,{brighter:function(t){return t=null==t?g:Math.pow(g,t),new f(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?p:Math.pow(p,t),new f(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return t=isNaN(t)?1:Math.max(0,Math.min(1,t)),(1===t?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Object(v.a)(d,h,Object(v.b)(r,{brighter:function(t){return t=null==t?g:Math.pow(g,t),new d(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?p:Math.pow(p,t),new d(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new f(b(t>=240?t-240:t+120,i,r),b(t,i,r),b(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}))},function(t,n,e){"use strict";function r(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}n.b=r,n.a=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t}},function(t,n,e){"use strict";function r(t,n,e,r,i){var u=t*t,c=u*t;return((1-3*t+3*u-c)*n+(4-6*u+3*c)*e+(1+3*t+3*u-3*c)*r+c*i)/6}n.a=r,n.b=function(t){var n=t.length-1;return function(e){var i=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),u=t[i],c=t[i+1],o=i>0?t[i-1]:2*u-c,a=i<n-1?t[i+2]:2*c-u;return r((e-i/n)*n,o,u,c,a)}}},function(t,n,e){"use strict";var r=(e(247),e(10));e.d(n,"c",function(){return r.b});var i=e(278);e.d(n,"a",function(){return i.a});var u=e(121);e.d(n,"b",function(){return u.a})},function(t,n,e){"use strict";function r(){return _||(j(i),_=O.now()+m)}function i(){_=0}function u(){this._call=this._time=this._next=null}function c(t,n,e){var r=new u;return r.restart(t,n,e),r}function o(){r(),++b;for(var t,n=h;n;)(t=_-n._time)>=0&&n._call.call(null,t),n=n._next;--b}function a(){_=(y=O.now())+m,b=v=0;try{o()}finally{b=0,s(),_=0}}function f(){var t=O.now(),n=t-y;n>g&&(m-=n,y=t)}function s(){for(var t,n,e=h,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:h=n);d=t,l(r)}function l(t){if(!b){v&&(v=clearTimeout(v));t-_>24?(t<1/0&&(v=setTimeout(a,t-O.now()-m)),p&&(p=clearInterval(p))):(p||(y=O.now(),p=setInterval(f,g)),b=1,j(a))}}n.b=r,n.a=u,n.c=c,n.d=o;var h,d,b=0,v=0,p=0,g=1e3,y=0,_=0,m=0,O="object"==typeof performance&&performance.now?performance:Date,j="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};u.prototype=c.prototype={constructor:u,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?r():+e)+(null==n?0:+n),this._next||d===this||(d?d._next=this:h=this,d=this),this._call=t,this._time=e,l()},stop:function(){this._call&&(this._call=null,this._time=1/0,l())}}},function(t,n,e){"use strict";function r(){}function i(t,n){var e=new r;if(t instanceof r)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var i,u=-1,c=t.length;if(null==n)for(;++u<c;)e.set(u,t[u]);else for(;++u<c;)e.set(n(i=t[u],u,t),i)}else if(t)for(var o in t)e.set(o,t[o]);return e}e.d(n,"b",function(){return u});var u="$";r.prototype=i.prototype={constructor:r,has:function(t){return u+t in this},get:function(t){return this[u+t]},set:function(t,n){return this[u+t]=n,this},remove:function(t){var n=u+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===u&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===u&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===u&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===u&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===u&&++t;return t},empty:function(){for(var t in this)if(t[0]===u)return!1;return!0},each:function(t){for(var n in this)n[0]===u&&t(this[n],n.slice(1),this)}},n.a=i},function(t,n,e){"use strict";var r=e(66);e.d(n,"e",function(){return r.a});var i=e(293);e.d(n,"c",function(){return i.c}),e.d(n,"d",function(){return i.d}),e.d(n,"a",function(){return i.a}),e.d(n,"b",function(){return i.b});var u=e(294);e.d(n,"h",function(){return u.c}),e.d(n,"i",function(){return u.d}),e.d(n,"f",function(){return u.a}),e.d(n,"g",function(){return u.b})},function(t,n,e){"use strict";function r(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function i(t,n){var e=r(t);return function(r,i){return n(e(r),i,t)}}function u(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}var c={},o={},a=34,f=10,s=13;n.a=function(t){function n(t,n){var u,c,o=e(t,function(t,e){if(u)return u(t,e-1);c=t,u=n?i(t,n):r(t)});return o.columns=c,o}function e(t,n){function e(){if(d)return o;if(b)return b=!1,c;var n,e,r=l;if(t.charCodeAt(r)===a){for(;l++<u&&t.charCodeAt(l)!==a||t.charCodeAt(++l)===a;);return(n=l)>=u?d=!0:(e=t.charCodeAt(l++))===f?b=!0:e===s&&(b=!0,t.charCodeAt(l)===f&&++l),t.slice(r+1,n-1).replace(/""/g,'"')}for(;l<u;){if((e=t.charCodeAt(n=l++))===f)b=!0;else if(e===s)b=!0,t.charCodeAt(l)===f&&++l;else if(e!==p)continue;return t.slice(r,n)}return d=!0,t.slice(r,u)}var r,i=[],u=t.length,l=0,h=0,d=u<=0,b=!1;for(t.charCodeAt(u-1)===f&&--u,t.charCodeAt(u-1)===s&&--u;(r=e())!==o;){for(var v=[];r!==c&&r!==o;)v.push(r),r=e();n&&null==(v=n(v,h++))||i.push(v)}return i}function l(n,e){return null==e&&(e=u(n)),[e.map(b).join(t)].concat(n.map(function(n){return e.map(function(t){return b(n[t])}).join(t)})).join("\n")}function h(t){return t.map(d).join("\n")}function d(n){return n.map(b).join(t)}function b(t){return null==t?"":v.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}var v=new RegExp('["'+t+"\n\r]"),p=t.charCodeAt(0);return{parse:n,parseRows:e,format:l,formatRows:h}}},function(t,n,e){"use strict";n.a=function(){return 1e-6*(Math.random()-.5)}},function(t,n,e){"use strict";var r=e(298);e.d(n,"a",function(){return r.a})},function(t,n,e){"use strict";n.a=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i}},function(t,n,e){"use strict";var r=e(315);e.d(n,"b",function(){return r.a}),e.d(n,"a",function(){return r.b}),e.d(n,"d",function(){return r.c});var i=e(126);e.d(n,"c",function(){return i.a});var u=e(127);e.d(n,"e",function(){return u.a});var c=e(321);e.d(n,"f",function(){return c.a});var o=e(322);e.d(n,"g",function(){return o.a});var a=e(323);e.d(n,"h",function(){return a.a})},function(t,n,e){"use strict";n.a=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}},function(t,n,e){"use strict";function r(t,n,e,r){function l(i,u){return t<=i&&i<=e&&n<=u&&u<=r}function h(i,u,c,o){var a=0,f=0;if(null==i||(a=d(i,c))!==(f=d(u,c))||v(i,u)<0^c>0)do{o.point(0===a||3===a?t:e,a>1?r:n)}while((a=(a+c+4)%4)!==f);else o.point(u[0],u[1])}function d(r,u){return Object(i.a)(r[0]-t)<i.i?u>0?0:3:Object(i.a)(r[0]-e)<i.i?u>0?2:1:Object(i.a)(r[1]-n)<i.i?u>0?1:0:u>0?3:2}function b(t,n){return v(t.x,n.x)}function v(t,n){var e=d(t,1),r=d(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(i){function d(t,n){l(t,n)&&C.point(t,n)}function v(){for(var n=0,e=0,i=j.length;e<i;++e)for(var u,c,o=j[e],a=1,f=o.length,s=o[0],l=s[0],h=s[1];a<f;++a)u=l,c=h,s=o[a],l=s[0],h=s[1],c<=r?h>r&&(l-u)*(r-c)>(h-c)*(t-u)&&++n:h<=r&&(l-u)*(r-c)<(h-c)*(t-u)&&--n;return n}function p(){C=P,O=[],j=[],N=!0}function g(){var t=v(),n=N&&t,e=(O=Object(a.n)(O)).length;(n||e)&&(i.polygonStart(),n&&(i.lineStart(),h(null,null,1,i),i.lineEnd()),e&&Object(o.a)(O,b,t,h,i),i.polygonEnd()),C=i,O=j=x=null}function y(){z.point=m,j&&j.push(x=[]),A=!0,E=!1,S=T=NaN}function _(){O&&(m(w,M),k&&E&&P.rejoin(),O.push(P.result())),z.point=d,E&&C.lineEnd()}function m(i,u){var o=l(i,u);if(j&&x.push([i,u]),A)w=i,M=u,k=o,A=!1,o&&(C.lineStart(),C.point(i,u));else if(o&&E)C.point(i,u);else{var a=[S=Math.max(s,Math.min(f,S)),T=Math.max(s,Math.min(f,T))],h=[i=Math.max(s,Math.min(f,i)),u=Math.max(s,Math.min(f,u))];Object(c.a)(a,h,t,n,e,r)?(E||(C.lineStart(),C.point(a[0],a[1])),C.point(h[0],h[1]),o||C.lineEnd(),N=!1):o&&(C.lineStart(),C.point(i,u),N=!1)}S=i,T=u,E=o}var O,j,x,w,M,k,S,T,E,A,N,C=i,P=Object(u.a)(),z={point:d,lineStart:y,lineEnd:_,polygonStart:p,polygonEnd:g};return z}}n.a=r;var i=e(0),u=e(133),c=e(328),o=e(134),a=e(3),f=1e9,s=-f;n.b=function(){var t,n,e,i=0,u=0,c=960,o=500;return e={stream:function(e){return t&&n===e?t:t=r(i,u,c,o)(n=e)},extent:function(r){return arguments.length?(i=+r[0][0],u=+r[0][1],c=+r[1][0],o=+r[1][1],t=n=null,e):[[i,u],[c,o]]}}}},function(t,n,e){"use strict";n.a=function(t){return t}},function(t,n,e){"use strict";function r(t,n){function e(t,n){var e=Object(i.u)(o-2*u*Object(i.t)(n))/u;return[e*Object(i.t)(t*=u),a-e*Object(i.g)(t)]}var r=Object(i.t)(t),u=(r+Object(i.t)(n))/2;if(Object(i.a)(u)<i.i)return Object(c.a)(t);var o=1+r*(2*u-r),a=Object(i.u)(o)/u;return e.invert=function(t,n){var e=a-n;return[Object(i.e)(t,Object(i.a)(e))/u*Object(i.s)(e),Object(i.c)((o-(t*t+e*e)*u*u)/(2*u))]},e}n.a=r;var i=e(0),u=e(75),c=e(341);n.b=function(){return Object(u.a)(r).scale(155.424).center([0,33.6442])}},function(t,n,e){"use strict";function r(t){var n=0,e=i.o/3,r=Object(u.b)(t),c=r(n,e);return c.parallels=function(t){return arguments.length?r(n=t[0]*i.r,e=t[1]*i.r):[n*i.h,e*i.h]},c}n.a=r;var i=e(0),u=e(8)},function(t,n,e){"use strict";function r(t,n,e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=t.clipExtent&&t.clipExtent();t.scale(150).translate([0,0]),null!=o&&t.clipExtent(null),Object(u.a)(e,t.stream(c.a));var a=c.a.result(),f=Math.min(r/(a[1][0]-a[0][0]),i/(a[1][1]-a[0][1])),s=+n[0][0]+(r-f*(a[1][0]+a[0][0]))/2,l=+n[0][1]+(i-f*(a[1][1]+a[0][1]))/2;return null!=o&&t.clipExtent(o),t.scale(150*f).translate([s,l])}function i(t,n,e){return r(t,[[0,0],n],e)}n.a=r,n.b=i;var u=e(14),c=e(139)},function(t,n,e){"use strict";function r(t,n){return[t,Object(u.n)(Object(u.v)((u.l+n)/2))]}function i(t){function n(){var n=u.o*l(),o=f(Object(c.a)(f.rotate()).invert([0,0]));return d(null==b?[[o[0]-n,o[1]-n],[o[0]+n,o[1]+n]]:t===r?[[Math.max(o[0]-n,b),e],[Math.min(o[0]+n,i),a]]:[[b,Math.max(o[1]-n,e)],[i,Math.min(o[1]+n,a)]])}var e,i,a,f=Object(o.a)(t),s=f.center,l=f.scale,h=f.translate,d=f.clipExtent,b=null;return f.scale=function(t){return arguments.length?(l(t),n()):l()},f.translate=function(t){return arguments.length?(h(t),n()):h()},f.center=function(t){return arguments.length?(s(t),n()):s()},f.clipExtent=function(t){return arguments.length?(null==t?b=e=i=a=null:(b=+t[0][0],e=+t[0][1],i=+t[1][0],a=+t[1][1]),n()):null==b?null:[[b,e],[i,a]]},n()}n.c=r,n.b=i;var u=e(0),c=e(37),o=e(8);r.invert=function(t,n){return[t,2*Object(u.d)(Object(u.k)(n))-u.l]},n.a=function(){return i(r).scale(961/u.w)}},function(t,n,e){"use strict";function r(t,n){var e,r,i,c,f,s=new a(t),l=+t.value&&(s.value=t.value),h=[s];for(null==n&&(n=u);e=h.pop();)if(l&&(e.value=+e.data.value),(i=n(e.data))&&(f=i.length))for(e.children=new Array(f),c=f-1;c>=0;--c)h.push(r=e.children[c]=new a(i[c])),r.parent=e,r.depth=e.depth+1;return s.eachBefore(o)}function i(){return r(this).eachBefore(c)}function u(t){return t.children}function c(t){t.data=t.data.data}function o(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function a(t){this.data=t,this.depth=this.height=0,this.parent=null}n.c=r,n.b=o,n.a=a;var f=e(354),s=e(355),l=e(356),h=e(357),d=e(358),b=e(359),v=e(360),p=e(361),g=e(362),y=e(363),_=e(364);a.prototype=r.prototype={constructor:a,count:f.a,each:s.a,eachAfter:h.a,eachBefore:l.a,sum:d.a,sort:b.a,path:v.a,ancestors:p.a,descendants:g.a,leaves:y.a,links:_.a,copy:i}},function(t,n,e){"use strict";function r(t){return null==t?null:i(t)}function i(t){if("function"!=typeof t)throw new Error;return t}n.a=r,n.b=i},function(t,n,e){"use strict";function r(t,n,e,r,c,o){for(var a,f,s,l,h,d,b,v,p,g,y,_=[],m=n.children,O=0,j=0,x=m.length,w=n.value;O<x;){s=c-e,l=o-r;do{h=m[j++].value}while(!h&&j<x);for(d=b=h,g=Math.max(l/s,s/l)/(w*t),y=h*h*g,p=Math.max(b/y,y/d);j<x;++j){if(h+=f=m[j].value,f<d&&(d=f),f>b&&(b=f),y=h*h*g,(v=Math.max(b/y,y/d))>p){h-=f;break}p=v}_.push(a={value:h,dice:s<l,children:m.slice(O,j)}),a.dice?Object(i.a)(a,e,r,c,w?r+=l*h/w:o):Object(u.a)(a,e,r,w?e+=s*h/w:c,o),w-=h,O=j}return _}e.d(n,"b",function(){return c}),n.c=r;var i=e(26),u=e(39),c=(1+Math.sqrt(5))/2;n.a=function t(n){function e(t,e,i,u,c){r(n,t,e,i,u,c)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(c)},function(t,n,e){"use strict";function r(t){return function(n,e){t(null==n?e:null)}}function i(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}var u=e(22),c=e(12);n.a=function(t,n){function e(t){var n,e=d.status;if(!e&&i(d)||e>=200&&e<300||304===e){if(f)try{n=f.call(o,d)}catch(t){return void l.call("error",o,t)}else n=d;l.call("load",o,n)}else l.call("error",o,t)}var o,a,f,s,l=Object(c.a)("beforesend","progress","load","error"),h=Object(u.c)(),d=new XMLHttpRequest,b=null,v=null,p=0;if("undefined"==typeof XDomainRequest||"withCredentials"in d||!/^(http(s)?:)?\/\//.test(t)||(d=new XDomainRequest),"onload"in d?d.onload=d.onerror=d.ontimeout=e:d.onreadystatechange=function(t){d.readyState>3&&e(t)},d.onprogress=function(t){l.call("progress",o,t)},o={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?h.get(t):(null==n?h.remove(t):h.set(t,n+""),o)},mimeType:function(t){return arguments.length?(a=null==t?null:t+"",o):a},responseType:function(t){return arguments.length?(s=t,o):s},timeout:function(t){return arguments.length?(p=+t,o):p},user:function(t){return arguments.length<1?b:(b=null==t?null:t+"",o)},password:function(t){return arguments.length<1?v:(v=null==t?null:t+"",o)},response:function(t){return f=t,o},get:function(t,n){return o.send("GET",t,n)},post:function(t,n){return o.send("POST",t,n)},send:function(n,e,i){return d.open(n,t,!0,b,v),null==a||h.has("accept")||h.set("accept",a+",*/*"),d.setRequestHeader&&h.each(function(t,n){d.setRequestHeader(n,t)}),null!=a&&d.overrideMimeType&&d.overrideMimeType(a),null!=s&&(d.responseType=s),p>0&&(d.timeout=p),null==i&&"function"==typeof e&&(i=e,e=null),null!=i&&1===i.length&&(i=r(i)),null!=i&&o.on("error",i).on("load",function(t){i(null,t)}),l.call("beforesend",o,d),d.send(null==e?null:e),o},abort:function(){return d.abort(),o},on:function(){var t=l.on.apply(l,arguments);return t===l?o:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return o.get(n)}return o}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";var r=e(84);e.d(n,"d",function(){return r.a}),e.d(n,"c",function(){return r.b}),e.d(n,"f",function(){return r.c}),e.d(n,"g",function(){return r.d}),e.d(n,"h",function(){return r.e});var i=e(154);e.d(n,"e",function(){return i.a});var u=e(155);e.d(n,"a",function(){return u.a});var c=e(419);e.d(n,"b",function(){return c.a})},function(t,n,e){"use strict";function r(t){return i=Object(f.a)(t),u=i.format,c=i.parse,o=i.utcFormat,a=i.utcParse,i}e.d(n,"b",function(){return u}),e.d(n,"c",function(){return c}),e.d(n,"d",function(){return o}),e.d(n,"e",function(){return a}),n.a=r;var i,u,c,o,a,f=e(154);r({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]})},function(t,n,e){"use strict";var r=e(13),i=e(16),u=e(43),c=e(86);n.a=function(){function t(t){var i,u,c,l=t.length,h=!1;for(null==a&&(s=f(c=Object(r.a)())),i=0;i<=l;++i)!(i<l&&o(u=t[i],i,t))===h&&((h=!h)?s.lineStart():s.lineEnd()),h&&s.point(+n(u,i,t),+e(u,i,t));if(c)return s=null,c+""||null}var n=c.a,e=c.b,o=Object(i.a)(!0),a=null,f=u.a,s=null;return t.x=function(e){return arguments.length?(n="function"==typeof e?e:Object(i.a)(+e),t):n},t.y=function(n){return arguments.length?(e="function"==typeof n?n:Object(i.a)(+n),t):e},t.defined=function(n){return arguments.length?(o="function"==typeof n?n:Object(i.a)(!!n),t):o},t.curve=function(n){return arguments.length?(f=n,null!=a&&(s=f(a)),t):f},t.context=function(n){return arguments.length?(null==n?a=s=null:s=f(a=n),t):a},t}},function(t,n,e){"use strict";function r(t){return t[0]}function i(t){return t[1]}n.a=r,n.b=i},function(t,n,e){"use strict";function r(t,n,e){var r=t._x1,i=t._y1,c=t._x2,o=t._y2;if(t._l01_a>u.f){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,f=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/f,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/f}if(t._l23_a>u.f){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);c=(c*s+t._x1*t._l23_2a-n*t._l12_2a)/l,o=(o*s+t._y1*t._l23_2a-e*t._l12_2a)/l}t._context.bezierCurveTo(r,i,c,o,t._x2,t._y2)}function i(t,n){this._context=t,this._alpha=n}n.b=r;var u=e(29),c=e(46);i.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:r(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}},n.a=function t(n){function e(t){return n?new i(t,n):new c.a(t,0)}return e.alpha=function(n){return t(+n)},e}(.5)},function(t,n,e){"use strict";function r(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}n.b=r;var i=e(31);n.a=function(t){var n=t.map(r);return Object(i.a)(t).sort(function(t,e){return n[t]-n[e]})}},function(t,n,e){"use strict";function r(){this._=null}function i(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function u(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function c(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function o(t){for(;t.L;)t=t.L;return t}n.a=i,r.prototype={constructor:r,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=o(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)r=e.U,e===r.L?(i=r.R,i&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(u(this,e),t=e,e=t.U),e.C=!1,r.C=!0,c(this,r))):(i=r.L,i&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(c(this,e),t=e,e=t.U),e.C=!1,r.C=!0,u(this,r))),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,a=t.L,f=t.R;if(e=a?f?o(f):a:f,i?i.L===t?i.L=e:i.R=e:this._=e,a&&f?(r=e.C,e.C=t.C,e.L=a,a.U=e,e!==f?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=f,f.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r){if(t&&t.C)return void(t.C=!1);do{if(t===this._)break;if(t===i.L){if(n=i.R,n.C&&(n.C=!1,i.C=!0,u(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,c(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,u(this,i),t=this._;break}}else if(n=i.L,n.C&&(n.C=!1,i.C=!0,c(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,u(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,c(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}},n.b=r},function(t,n,e){"use strict";function r(t,n,e,r){var i=[null,null],c=f.e.push(i)-1;return i.left=t,i.right=n,e&&u(i,t,n,e),r&&u(i,n,t,r),f.b[t.index].halfedges.push(c),f.b[n.index].halfedges.push(c),i}function i(t,n,e){var r=[n,e];return r.left=t,r}function u(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function c(t,n,e,r,i){var u,c=t[0],o=t[1],a=c[0],f=c[1],s=o[0],l=o[1],h=0,d=1,b=s-a,v=l-f;if(u=n-a,b||!(u>0)){if(u/=b,b<0){if(u<h)return;u<d&&(d=u)}else if(b>0){if(u>d)return;u>h&&(h=u)}if(u=r-a,b||!(u<0)){if(u/=b,b<0){if(u>d)return;u>h&&(h=u)}else if(b>0){if(u<h)return;u<d&&(d=u)}if(u=e-f,v||!(u>0)){if(u/=v,v<0){if(u<h)return;u<d&&(d=u)}else if(v>0){if(u>d)return;u>h&&(h=u)}if(u=i-f,v||!(u<0)){if(u/=v,v<0){if(u>d)return;u>h&&(h=u)}else if(v>0){if(u<h)return;u<d&&(d=u)}return!(h>0||d<1)||(h>0&&(t[0]=[a+h*b,f+h*v]),d<1&&(t[1]=[a+d*b,f+d*v]),!0)}}}}}function o(t,n,e,r,i){var u=t[1];if(u)return!0;var c,o,a=t[0],f=t.left,s=t.right,l=f[0],h=f[1],d=s[0],b=s[1],v=(l+d)/2,p=(h+b)/2;if(b===h){if(v<n||v>=r)return;if(l>d){if(a){if(a[1]>=i)return}else a=[v,e];u=[v,i]}else{if(a){if(a[1]<e)return}else a=[v,i];u=[v,e]}}else if(c=(l-d)/(b-h),o=p-c*v,c<-1||c>1)if(l>d){if(a){if(a[1]>=i)return}else a=[(e-o)/c,e];u=[(i-o)/c,i]}else{if(a){if(a[1]<e)return}else a=[(i-o)/c,i];u=[(e-o)/c,e]}else if(h<b){if(a){if(a[0]>=r)return}else a=[n,c*n+o];u=[r,c*r+o]}else{if(a){if(a[0]<n)return}else a=[r,c*r+o];u=[n,c*n+o]}return t[0]=a,t[1]=u,!0}function a(t,n,e,r){for(var i,u=f.e.length;u--;)o(i=f.e[u],t,n,e,r)&&c(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>f.f||Math.abs(i[0][1]-i[1][1])>f.f)||delete f.e[u]}n.c=r,n.b=i,n.d=u,n.a=a;var f=e(32)},function(t,n,e){"use strict";function r(t){if(Array.isArray(t)){for(var n=0,e=Array(t.length);n<t.length;n++)e[n]=t[n];return e}return Array.from(t)}function i(t){document.getElementById("selection").innerHTML="",setTimeout(function(){document.getElementById("selection").innerHTML=t},1e3)}function u(){document.getElementById("selection").innerHTML=""}function c(t){t.selectedPlaces.map(function(n,e){return o(n,e+1,t)}).forEach(function(t){return b.elements.inputContainer.appendChild(t)})}function o(t,n,e){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=document.createElement("div");i.classList.add("option-input","input-"+n),r&&i.classList.add(r);var u=document.createElement("label");u.innerHTML=n;var c=document.createElement("input");c.setAttribute("type","text"),c.setAttribute("data-input-id",t.id),c.classList.add("selection-input"),c.value=t.name;var o=document.createElement("button");return o.setAttribute("type","button"),o.innerHTML="-",o.classList.add("remove-btn"),i.appendChild(u),i.appendChild(c),i.appendChild(o),a(c,e),f(o,i,t.id,e),i}function a(t,n){t.onkeyup=function(e){var r=Number(t.getAttribute("data-input-id")),i=n.selectedPlaces.map(function(t){return r===t.id?{name:e.target.value,id:r}:t});n.setSelectedPlaces(i),n.draw()}}function f(t,n,e,r){t.onclick=function(){n.classList.add("remove"),setTimeout(function(){b.elements.inputContainer.removeChild(n);var t=r.selectedPlaces.filter(function(t){return t.id!==e});r.setSelectedPlaces(t),d(),s(r),r.draw()},300)}}function s(t){var n=document.createElement("button");n.setAttribute("type","button"),n.id="add-btn",n.innerHTML="Add an Entry",n.onclick=function(){var n={id:t.selectedPlaces.length,name:""};t.setSelectedPlaces([].concat(r(t.selectedPlaces),[n]));var e=o(n,t.selectedPlaces.length,t,"add");b.elements.inputContainer.appendChild(e),d(),t.getSelectedPlaces().length>8&&h(),setTimeout(function(){t.draw()},300)},document.getElementById("add-btn")||document.getElementById("edit-container").appendChild(n)}function l(t){t.classList.toggle("hidden")}function h(){b.elements.editContainer.removeChild(document.getElementById("add-btn"))}function d(){Array.from(document.getElementsByClassName("option-input"),function(t,n){var e=(n+1).toString();t.firstChild.innerHTML=e,t.className="option-input input-"+e})}Object.defineProperty(n,"__esModule",{value:!0}),n.displaySelection=i,n.clearSelection=u,n.createInputs=c,n.toggleHideElement=l;var b=e(47)},function(t,n,e){"use strict";t.exports=[{id:0,name:"Providore"},{id:1,name:"Ate oh Ate"},{id:2,name:"Wolf and Bear"},{id:3,name:"Basilisk"},{id:4,name:"Slowburger"},{id:5,name:"The Sudra"},{id:6,name:"24th and Meatballs"},{id:7,name:"Slice Pizza Co."},{id:8,name:"ChickPeaDX"}]},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(175);e.d(n,"version",function(){return r.a});var i=e(3);e.d(n,"bisect",function(){return i.b}),e.d(n,"bisectRight",function(){return i.d}),e.d(n,"bisectLeft",function(){return i.c}),e.d(n,"ascending",function(){return i.a}),e.d(n,"bisector",function(){return i.e}),e.d(n,"cross",function(){return i.f}),e.d(n,"descending",function(){return i.g}),e.d(n,"deviation",function(){return i.h}),e.d(n,"extent",function(){return i.i}),e.d(n,"histogram",function(){return i.j}),e.d(n,"thresholdFreedmanDiaconis",function(){return i.w}),e.d(n,"thresholdScott",function(){return i.x}),e.d(n,"thresholdSturges",function(){return i.y}),e.d(n,"max",function(){return i.k}),e.d(n,"mean",function(){return i.l}),e.d(n,"median",function(){return i.m}),e.d(n,"merge",function(){return i.n}),e.d(n,"min",function(){return i.o}),e.d(n,"pairs",function(){return i.p}),e.d(n,"permute",function(){return i.q}),e.d(n,"quantile",function(){return i.r}),e.d(n,"range",function(){return i.s}),e.d(n,"scan",function(){return i.t}),e.d(n,"shuffle",function(){return i.u}),e.d(n,"sum",function(){return i.v}),e.d(n,"ticks",function(){return i.B}),e.d(n,"tickIncrement",function(){return i.z}),e.d(n,"tickStep",function(){return i.A}),e.d(n,"transpose",function(){return i.C}),e.d(n,"variance",function(){return i.D}),e.d(n,"zip",function(){return i.E});var u=e(192);e.d(n,"axisTop",function(){return u.d}),e.d(n,"axisRight",function(){return u.c}),e.d(n,"axisBottom",function(){return u.a}),e.d(n,"axisLeft",function(){return u.b});var c=e(196);e.d(n,"brush",function(){return c.a}),e.d(n,"brushX",function(){return c.c}),e.d(n,"brushY",function(){return c.d}),e.d(n,"brushSelection",function(){return c.b});var o=e(282);e.d(n,"chord",function(){return o.a}),e.d(n,"ribbon",function(){return o.b});var a=e(22);e.d(n,"nest",function(){return a.d}),e.d(n,"set",function(){return a.e}),e.d(n,"map",function(){return a.c}),e.d(n,"keys",function(){return a.b}),e.d(n,"values",function(){return a.f}),e.d(n,"entries",function(){return a.a});var f=e(7);e.d(n,"color",function(){return f.a}),e.d(n,"rgb",function(){return f.f}),e.d(n,"hsl",function(){return f.d}),e.d(n,"lab",function(){return f.e}),e.d(n,"hcl",function(){return f.c}),e.d(n,"cubehelix",function(){return f.b});var s=e(12);e.d(n,"dispatch",function(){return s.a});var l=e(49);e.d(n,"drag",function(){return l.a}),e.d(n,"dragDisable",function(){return l.b}),e.d(n,"dragEnable",function(){return l.c});var h=e(65);e.d(n,"dsvFormat",function(){return h.e}),e.d(n,"csvParse",function(){return h.c}),e.d(n,"csvParseRows",function(){return h.d}),e.d(n,"csvFormat",function(){return h.a}),e.d(n,"csvFormatRows",function(){return h.b}),e.d(n,"tsvParse",function(){return h.h}),e.d(n,"tsvParseRows",function(){return h.i}),e.d(n,"tsvFormat",function(){return h.f}),e.d(n,"tsvFormatRows",function(){return h.g});var d=e(123);e.d(n,"easeLinear",function(){return d.y}),e.d(n,"easeQuad",function(){return d.D}),e.d(n,"easeQuadIn",function(){return d.E}),e.d(n,"easeQuadOut",function(){return d.G}),e.d(n,"easeQuadInOut",function(){return d.F}),e.d(n,"easeCubic",function(){return d.m}),e.d(n,"easeCubicIn",function(){return d.n}),e.d(n,"easeCubicOut",function(){return d.p}),e.d(n,"easeCubicInOut",function(){return d.o}),e.d(n,"easePoly",function(){return d.z}),e.d(n,"easePolyIn",function(){return d.A}),e.d(n,"easePolyOut",function(){return d.C}),e.d(n,"easePolyInOut",function(){return d.B}),e.d(n,"easeSin",function(){return d.H}),e.d(n,"easeSinIn",function(){return d.I}),e.d(n,"easeSinOut",function(){return d.K}),e.d(n,"easeSinInOut",function(){return d.J}),e.d(n,"easeExp",function(){return d.u}),e.d(n,"easeExpIn",function(){return d.v}),e.d(n,"easeExpOut",function(){return d.x}),e.d(n,"easeExpInOut",function(){return d.w}),e.d(n,"easeCircle",function(){return d.i}),e.d(n,"easeCircleIn",function(){return d.j}),e.d(n,"easeCircleOut",function(){return d.l}),e.d(n,"easeCircleInOut",function(){return d.k}),e.d(n,"easeBounce",function(){return d.e}),e.d(n,"easeBounceIn",function(){return d.f}),e.d(n,"easeBounceOut",function(){return d.h}),e.d(n,"easeBounceInOut",function(){return d.g}),e.d(n,"easeBack",function(){return d.a}),e.d(n,"easeBackIn",function(){return d.b}),e.d(n,"easeBackOut",function(){return d.d}),e.d(n,"easeBackInOut",function(){return d.c}),e.d(n,"easeElastic",function(){return d.q}),e.d(n,"easeElasticIn",function(){return d.r}),e.d(n,"easeElasticOut",function(){return d.t}),e.d(n,"easeElasticInOut",function(){return d.s});var b=e(295);e.d(n,"forceCenter",function(){return b.a}),e.d(n,"forceCollide",function(){return b.b}),e.d(n,"forceLink",function(){return b.c}),e.d(n,"forceManyBody",function(){return b.d}),e.d(n,"forceSimulation",function(){return b.e}),e.d(n,"forceX",function(){return b.f}),e.d(n,"forceY",function(){return b.g});var v=e(70);e.d(n,"formatDefaultLocale",function(){return v.b}),e.d(n,"format",function(){return v.a}),e.d(n,"formatPrefix",function(){return v.d}),e.d(n,"formatLocale",function(){return v.c}),e.d(n,"formatSpecifier",function(){return v.e}),e.d(n,"precisionFixed",function(){return v.f}),e.d(n,"precisionPrefix",function(){return v.g}),e.d(n,"precisionRound",function(){return v.h});var p=e(324);e.d(n,"geoArea",function(){return p.c}),e.d(n,"geoBounds",function(){return p.h}),e.d(n,"geoCentroid",function(){return p.i}),e.d(n,"geoCircle",function(){return p.j}),e.d(n,"geoClipExtent",function(){return p.k}),e.d(n,"geoContains",function(){return p.r}),e.d(n,"geoDistance",function(){return p.s}),e.d(n,"geoGraticule",function(){return p.x}),e.d(n,"geoGraticule10",function(){return p.y}),e.d(n,"geoInterpolate",function(){return p.A}),e.d(n,"geoLength",function(){return p.B}),e.d(n,"geoPath",function(){return p.G}),e.d(n,"geoAlbers",function(){return p.a}),e.d(n,"geoAlbersUsa",function(){return p.b}),e.d(n,"geoAzimuthalEqualArea",function(){return p.d}),e.d(n,"geoAzimuthalEqualAreaRaw",function(){return p.e}),e.d(n,"geoAzimuthalEquidistant",function(){return p.f}),e.d(n,"geoAzimuthalEquidistantRaw",function(){return p.g}),e.d(n,"geoConicConformal",function(){return p.l}),e.d(n,"geoConicConformalRaw",function(){return p.m}),e.d(n,"geoConicEqualArea",function(){return p.n}),e.d(n,"geoConicEqualAreaRaw",function(){return p.o}),e.d(n,"geoConicEquidistant",function(){return p.p}),e.d(n,"geoConicEquidistantRaw",function(){return p.q}),e.d(n,"geoEquirectangular",function(){return p.t}),e.d(n,"geoEquirectangularRaw",function(){return p.u}),e.d(n,"geoGnomonic",function(){return p.v}),e.d(n,"geoGnomonicRaw",function(){return p.w}),e.d(n,"geoIdentity",function(){return p.z}),e.d(n,"geoProjection",function(){return p.H}),e.d(n,"geoProjectionMutator",function(){return p.I}),e.d(n,"geoMercator",function(){return p.C}),e.d(n,"geoMercatorRaw",function(){return p.D}),e.d(n,"geoOrthographic",function(){return p.E}),e.d(n,"geoOrthographicRaw",function(){return p.F}),e.d(n,"geoStereographic",function(){return p.K}),e.d(n,"geoStereographicRaw",function(){return p.L}),e.d(n,"geoTransverseMercator",function(){return p.O}),e.d(n,"geoTransverseMercatorRaw",function(){return p.P}),e.d(n,"geoRotation",function(){return p.J}),e.d(n,"geoStream",function(){return p.M}),e.d(n,"geoTransform",function(){return p.N});var g=e(352);e.d(n,"cluster",function(){return g.a}),e.d(n,"hierarchy",function(){return g.b}),e.d(n,"pack",function(){return g.c}),e.d(n,"packSiblings",function(){return g.e}),e.d(n,"packEnclose",function(){return g.d}),e.d(n,"partition",function(){return g.f}),e.d(n,"stratify",function(){return g.g}),e.d(n,"tree",function(){return g.h}),e.d(n,"treemap",function(){return g.i}),e.d(n,"treemapBinary",function(){return g.j}),e.d(n,"treemapDice",function(){return g.k}),e.d(n,"treemapSlice",function(){return g.m}),e.d(n,"treemapSliceDice",function(){return g.n}),e.d(n,"treemapSquarify",function(){return g.o}),e.d(n,"treemapResquarify",function(){return g.l});var y=e(5);e.d(n,"interpolate",function(){return y.a}),e.d(n,"interpolateArray",function(){return y.b}),e.d(n,"interpolateBasis",function(){return y.c}),e.d(n,"interpolateBasisClosed",function(){return y.d}),e.d(n,"interpolateDate",function(){return y.g}),e.d(n,"interpolateNumber",function(){return y.m}),e.d(n,"interpolateObject",function(){return y.n}),e.d(n,"interpolateRound",function(){return y.r}),e.d(n,"interpolateString",function(){return y.s}),e.d(n,"interpolateTransformCss",function(){return y.t}),e.d(n,"interpolateTransformSvg",function(){return y.u}),e.d(n,"interpolateZoom",function(){return y.v}),e.d(n,"interpolateRgb",function(){return y.o}),e.d(n,"interpolateRgbBasis",function(){return y.p}),e.d(n,"interpolateRgbBasisClosed",function(){return y.q}),e.d(n,"interpolateHsl",function(){return y.j}),e.d(n,"interpolateHslLong",function(){return y.k}),e.d(n,"interpolateLab",function(){return y.l}),e.d(n,"interpolateHcl",function(){return y.h}),e.d(n,"interpolateHclLong",function(){return y.i}),e.d(n,"interpolateCubehelix",function(){return y.e}),e.d(n,"interpolateCubehelixLong",function(){return y.f}),e.d(n,"quantize",function(){return y.w});var _=e(13);e.d(n,"path",function(){return _.a});var m=e(374);e.d(n,"polygonArea",function(){return m.a}),e.d(n,"polygonCentroid",function(){return m.b}),e.d(n,"polygonHull",function(){return m.d}),e.d(n,"polygonContains",function(){return m.c}),e.d(n,"polygonLength",function(){return m.e});var O=e(68);e.d(n,"quadtree",function(){return O.a});var j=e(381);e.d(n,"queue",function(){return j.a});var x=e(384);e.d(n,"randomUniform",function(){return x.f}),e.d(n,"randomNormal",function(){return x.e}),e.d(n,"randomLogNormal",function(){return x.d}),e.d(n,"randomBates",function(){return x.a}),e.d(n,"randomIrwinHall",function(){return x.c}),e.d(n,"randomExponential",function(){return x.b});var w=e(389);e.d(n,"request",function(){return w.d}),e.d(n,"html",function(){return w.b}),e.d(n,"json",function(){return w.c}),e.d(n,"text",function(){return w.e}),e.d(n,"xml",function(){return w.g}),e.d(n,"csv",function(){return w.a}),e.d(n,"tsv",function(){return w.f});var M=e(396);e.d(n,"scaleBand",function(){return M.i}),e.d(n,"scalePoint",function(){return M.o}),e.d(n,"scaleIdentity",function(){return M.j}),e.d(n,"scaleLinear",function(){return M.l}),e.d(n,"scaleLog",function(){return M.m}),e.d(n,"scaleOrdinal",function(){return M.n}),e.d(n,"scaleImplicit",function(){return M.k}),e.d(n,"scalePow",function(){return M.p}),e.d(n,"scaleSqrt",function(){return M.t}),e.d(n,"scaleQuantile",function(){return M.q}),e.d(n,"scaleQuantize",function(){return M.r}),e.d(n,"scaleThreshold",function(){return M.u}),e.d(n,"scaleTime",function(){return M.v}),e.d(n,"scaleUtc",function(){return M.w}),e.d(n,"schemeCategory10",function(){return M.x}),e.d(n,"schemeCategory20b",function(){return M.z}),e.d(n,"schemeCategory20c",function(){return M.A}),e.d(n,"schemeCategory20",function(){return M.y}),e.d(n,"interpolateCubehelixDefault",function(){return M.b}),e.d(n,"interpolateRainbow",function(){return M.f}),e.d(n,"interpolateWarm",function(){return M.h}),e.d(n,"interpolateCool",function(){return M.a}),e.d(n,"interpolateViridis",function(){return M.g}),e.d(n,"interpolateMagma",function(){return M.d}),e.d(n,"interpolateInferno",function(){return M.c}),e.d(n,"interpolatePlasma",function(){return M.e}),e.d(n,"scaleSequential",function(){return M.s});var k=e(1);e.d(n,"creator",function(){return k.a}),e.d(n,"local",function(){return k.d}),e.d(n,"matcher",function(){return k.e}),e.d(n,"mouse",function(){return k.f}),e.d(n,"namespace",function(){return k.g}),e.d(n,"namespaces",function(){return k.h}),e.d(n,"select",function(){return k.i}),e.d(n,"selectAll",function(){return k.j}),e.d(n,"selection",function(){return k.k}),e.d(n,"selector",function(){return k.l}),e.d(n,"selectorAll",function(){return k.m}),e.d(n,"style",function(){return k.n}),e.d(n,"touch",function(){return k.o}),e.d(n,"touches",function(){return k.p}),e.d(n,"window",function(){return k.q}),e.d(n,"event",function(){return k.c}),e.d(n,"customEvent",function(){return k.b});var S=e(429);e.d(n,"arc",function(){return S.a}),e.d(n,"area",function(){return S.b}),e.d(n,"line",function(){return S.v}),e.d(n,"pie",function(){return S.A}),e.d(n,"areaRadial",function(){return S.c}),e.d(n,"radialArea",function(){return S.C}),e.d(n,"lineRadial",function(){return S.w}),e.d(n,"radialLine",function(){return S.D}),e.d(n,"pointRadial",function(){return S.B}),e.d(n,"linkHorizontal",function(){return S.x}),e.d(n,"linkVertical",function(){return S.z}),e.d(n,"linkRadial",function(){return S.y}),e.d(n,"symbol",function(){return S.P}),e.d(n,"symbols",function(){return S.X}),e.d(n,"symbolCircle",function(){return S.Q}),e.d(n,"symbolCross",function(){return S.R}),e.d(n,"symbolDiamond",function(){return S.S}),e.d(n,"symbolSquare",function(){return S.T}),e.d(n,"symbolStar",function(){return S.U}),e.d(n,"symbolTriangle",function(){return S.V}),e.d(n,"symbolWye",function(){return S.W}),e.d(n,"curveBasisClosed",function(){return S.e}),e.d(n,"curveBasisOpen",function(){return S.f}),e.d(n,"curveBasis",function(){return S.d}),e.d(n,"curveBundle",function(){return S.g}),e.d(n,"curveCardinalClosed",function(){return S.i}),e.d(n,"curveCardinalOpen",function(){return S.j}),e.d(n,"curveCardinal",function(){return S.h}),e.d(n,"curveCatmullRomClosed",function(){return S.l}),e.d(n,"curveCatmullRomOpen",function(){return S.m}),e.d(n,"curveCatmullRom",function(){return S.k}),e.d(n,"curveLinearClosed",function(){return S.o}),e.d(n,"curveLinear",function(){return S.n}),e.d(n,"curveMonotoneX",function(){return S.p}),e.d(n,"curveMonotoneY",function(){return S.q}),e.d(n,"curveNatural",function(){return S.r}),e.d(n,"curveStep",function(){return S.s}),e.d(n,"curveStepAfter",function(){return S.t}),e.d(n,"curveStepBefore",function(){return S.u}),e.d(n,"stack",function(){return S.E}),e.d(n,"stackOffsetExpand",function(){return S.G}),e.d(n,"stackOffsetDiverging",function(){return S.F}),e.d(n,"stackOffsetNone",function(){return S.H}),e.d(n,"stackOffsetSilhouette",function(){return S.I}),e.d(n,"stackOffsetWiggle",function(){return S.J}),e.d(n,"stackOrderAscending",function(){return S.K}),e.d(n,"stackOrderDescending",function(){return S.L}),e.d(n,"stackOrderInsideOut",function(){return S.M}),e.d(n,"stackOrderNone",function(){return S.N}),e.d(n,"stackOrderReverse",function(){return S.O});var T=e(42);e.d(n,"timeInterval",function(){return T.g}),e.d(n,"timeMillisecond",function(){return T.h}),e.d(n,"timeMilliseconds",function(){return T.i}),e.d(n,"utcMillisecond",function(){return T.L}),e.d(n,"utcMilliseconds",function(){return T.M}),e.d(n,"timeSecond",function(){return T.r}),e.d(n,"timeSeconds",function(){return T.s}),e.d(n,"utcSecond",function(){return T.V}),e.d(n,"utcSeconds",function(){return T.W}),e.d(n,"timeMinute",function(){return T.j}),e.d(n,"timeMinutes",function(){return T.k}),e.d(n,"timeHour",function(){return T.e}),e.d(n,"timeHours",function(){return T.f}),e.d(n,"timeDay",function(){return T.a}),e.d(n,"timeDays",function(){return T.b}),e.d(n,"timeWeek",function(){return T.B}),e.d(n,"timeWeeks",function(){return T.C}),e.d(n,"timeSunday",function(){return T.t}),e.d(n,"timeSundays",function(){return T.u}),e.d(n,"timeMonday",function(){return T.l}),e.d(n,"timeMondays",function(){return T.m}),e.d(n,"timeTuesday",function(){return T.x}),e.d(n,"timeTuesdays",function(){return T.y}),e.d(n,"timeWednesday",function(){return T.z}),e.d(n,"timeWednesdays",function(){return T.A}),e.d(n,"timeThursday",function(){return T.v}),e.d(n,"timeThursdays",function(){return T.w}),e.d(n,"timeFriday",function(){return T.c}),e.d(n,"timeFridays",function(){return T.d}),e.d(n,"timeSaturday",function(){return T.p}),e.d(n,"timeSaturdays",function(){return T.q}),e.d(n,"timeMonth",function(){return T.n}),e.d(n,"timeMonths",function(){return T.o}),e.d(n,"timeYear",function(){return T.D}),e.d(n,"timeYears",function(){return T.E}),e.d(n,"utcMinute",function(){return T.N}),e.d(n,"utcMinutes",function(){return T.O}),e.d(n,"utcHour",function(){return T.J}),e.d(n,"utcHours",function(){return T.K}),e.d(n,"utcDay",function(){return T.F}),e.d(n,"utcDays",function(){return T.G}),e.d(n,"utcWeek",function(){return T._5}),e.d(n,"utcWeeks",function(){return T._6}),e.d(n,"utcSunday",function(){return T.X}),e.d(n,"utcSundays",function(){return T.Y}),e.d(n,"utcMonday",function(){return T.P}),e.d(n,"utcMondays",function(){return T.Q}),e.d(n,"utcTuesday",function(){return T._1}),e.d(n,"utcTuesdays",function(){return T._2}),e.d(n,"utcWednesday",function(){return T._3}),e.d(n,"utcWednesdays",function(){return T._4}),e.d(n,"utcThursday",function(){return T.Z}),e.d(n,"utcThursdays",function(){return T._0}),e.d(n,"utcFriday",function(){return T.H}),e.d(n,"utcFridays",function(){return T.I}),e.d(n,"utcSaturday",function(){return T.T}),e.d(n,"utcSaturdays",function(){return T.U}),e.d(n,"utcMonth",function(){return T.R}),e.d(n,"utcMonths",function(){return T.S}),e.d(n,"utcYear",function(){return T._7}),e.d(n,"utcYears",function(){return T._8});var E=e(83);e.d(n,"timeFormatDefaultLocale",function(){return E.d}),e.d(n,"timeFormat",function(){return E.c}),e.d(n,"timeParse",function(){return E.f}),e.d(n,"utcFormat",function(){return E.g}),e.d(n,"utcParse",function(){return E.h}),e.d(n,"timeFormatLocale",function(){return E.e}),e.d(n,"isoFormat",function(){return E.a}),e.d(n,"isoParse",function(){return E.b});var A=e(34);e.d(n,"now",function(){return A.b}),e.d(n,"timer",function(){return A.d}),e.d(n,"timerFlush",function(){return A.e}),e.d(n,"timeout",function(){return A.c}),e.d(n,"interval",function(){return A.a});var N=e(62);e.d(n,"transition",function(){return N.c}),e.d(n,"active",function(){return N.a}),e.d(n,"interrupt",function(){return N.b});var C=e(454);e.d(n,"voronoi",function(){return C.a});var P=e(459);e.d(n,"zoom",function(){return P.a}),e.d(n,"zoomTransform",function(){return P.c}),e.d(n,"zoomIdentity",function(){return P.b})},function(t,n,e){"use strict";e.d(n,"b",function(){return c}),e.d(n,"a",function(){return o});var r=e(17),i=e(95),u=Object(i.a)(r.a),c=u.right,o=u.left;n.c=c},function(t,n,e){"use strict";function r(t){return function(n,e){return Object(i.a)(t(n),e)}}var i=e(17);n.a=function(t){return 1===t.length&&(t=r(t)),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var u=r+i>>>1;t(n[u],e)<0?r=u+1:i=u}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var u=r+i>>>1;t(n[u],e)>0?i=u:r=u+1}return r}}}},function(t,n,e){"use strict";function r(t,n){return[t,n]}n.b=r,n.a=function(t,n){null==n&&(n=r);for(var e=0,i=t.length-1,u=t[0],c=new Array(i<0?0:i);e<i;)c[e]=n(u,u=t[++e]);return c}},function(t,n,e){"use strict";var r=e(98);n.a=function(t,n){var e=Object(r.a)(t,n);return e?Math.sqrt(e):e}},function(t,n,e){"use strict";var r=e(20);n.a=function(t,n){var e,i,u=t.length,c=0,o=-1,a=0,f=0;if(null==n)for(;++o<u;)isNaN(e=Object(r.a)(t[o]))||(i=e-a,a+=i/++c,f+=i*(e-a));else for(;++o<u;)isNaN(e=Object(r.a)(n(t[o],o,t)))||(i=e-a,a+=i/++c,f+=i*(e-a));if(c>1)return f/(c-1)}},function(t,n,e){"use strict";n.a=function(t,n){var e,r,i,u=t.length,c=-1;if(null==n){for(;++c<u;)if(null!=(e=t[c])&&e>=e)for(r=i=e;++c<u;)null!=(e=t[c])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++c<u;)if(null!=(e=n(t[c],c,t))&&e>=e)for(r=i=e;++c<u;)null!=(e=n(t[c],c,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]}},function(t,n,e){"use strict";e.d(n,"b",function(){return i}),e.d(n,"a",function(){return u});var r=Array.prototype,i=r.slice,u=r.map},function(t,n,e){"use strict";n.a=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),u=new Array(i);++r<i;)u[r]=t+r*e;return u}},function(t,n,e){"use strict";function r(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=u?10:a>=c?5:a>=o?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=u?10:a>=c?5:a>=o?2:1)}function i(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=u?i*=10:a>=c?i*=5:a>=o&&(i*=2),n<t?-i:i}n.b=r,n.c=i;var u=Math.sqrt(50),c=Math.sqrt(10),o=Math.sqrt(2);n.a=function(t,n,e){var i,u,c,o=n<t,a=-1;if(o&&(i=t,t=n,n=i),0===(c=r(t,n,e))||!isFinite(c))return[];if(c>0)for(t=Math.ceil(t/c),n=Math.floor(n/c),u=new Array(i=Math.ceil(n-t+1));++a<i;)u[a]=(t+a)*c;else for(t=Math.floor(t*c),n=Math.ceil(n*c),u=new Array(i=Math.ceil(t-n+1));++a<i;)u[a]=(t-a)/c;return o&&u.reverse(),u}},function(t,n,e){"use strict";n.a=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}},function(t,n,e){"use strict";n.a=function(t,n){var e,r,i=t.length,u=-1;if(null==n){for(;++u<i;)if(null!=(e=t[u])&&e>=e)for(r=e;++u<i;)null!=(e=t[u])&&r>e&&(r=e)}else for(;++u<i;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=e;++u<i;)null!=(e=n(t[u],u,t))&&r>e&&(r=e);return r}},function(t,n,e){"use strict";function r(t){return t.length}var i=e(104);n.a=function(t){if(!(c=t.length))return[];for(var n=-1,e=Object(i.a)(t,r),u=new Array(e);++n<e;)for(var c,o=-1,a=u[n]=new Array(c);++o<c;)a[o]=t[o][n];return u}},function(t,n,e){"use strict";var r=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var i=document.documentElement;if(!i.matches){var u=i.webkitMatchesSelector||i.msMatchesSelector||i.mozMatchesSelector||i.oMatchesSelector;r=function(t){return function(){return u.call(this,t)}}}}n.a=r},function(t,n,e){"use strict";function r(){return[]}n.a=function(t){return null==t?r:function(){return this.querySelectorAll(t)}}},function(t,n,e){"use strict";function r(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}n.a=r;var i=e(109),u=e(4);n.b=function(){return new u.a(this._enter||this._groups.map(i.a),this._parents)},r.prototype={constructor:r,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}}},function(t,n,e){"use strict";n.a=function(t){return new Array(t.length)}},function(t,n,e){"use strict";function r(t){return function(){this.style.removeProperty(t)}}function i(t,n,e){return function(){this.style.setProperty(t,n,e)}}function u(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function c(t,n){return t.style.getPropertyValue(n)||Object(o.a)(t).getComputedStyle(t,null).getPropertyValue(n)}n.b=c;var o=e(57);n.a=function(t,n,e){return arguments.length>1?this.each((null==n?r:"function"==typeof n?u:i)(t,n,null==e?"":e)):c(this.node(),t)}},function(t,n,e){"use strict";function r(t,n){var e=t.document.documentElement,r=Object(i.i)(t).on("dragstart.drag",null);n&&(r.on("click.drag",u.a,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}n.b=r;var i=e(1),u=e(112);n.a=function(t){var n=t.document.documentElement,e=Object(i.i)(t).on("dragstart.drag",u.a,!0);"onselectstart"in n?e.on("selectstart.drag",u.a,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")}},function(t,n,e){"use strict";function r(){i.c.stopImmediatePropagation()}n.b=r;var i=e(1);n.a=function(){i.c.preventDefault(),i.c.stopImmediatePropagation()}},function(t,n,e){"use strict";e.d(n,"a",function(){return r}),e.d(n,"b",function(){return i});var r=Math.PI/180,i=180/Math.PI},function(t,n,e){"use strict";function r(t){return function(n){var e,r,u=n.length,c=new Array(u),o=new Array(u),a=new Array(u);for(e=0;e<u;++e)r=Object(i.f)(n[e]),c[e]=r.r||0,o[e]=r.g||0,a[e]=r.b||0;return c=t(c),o=t(o),a=t(a),r.opacity=1,function(t){return r.r=c(t),r.g=o(t),r.b=a(t),r+""}}}e.d(n,"b",function(){return a}),e.d(n,"c",function(){return f});var i=e(7),u=e(61),c=e(115),o=e(21);n.a=function t(n){function e(t,n){var e=r((t=Object(i.f)(t)).r,(n=Object(i.f)(n)).r),u=r(t.g,n.g),c=r(t.b,n.b),a=Object(o.a)(t.opacity,n.opacity);return function(n){return t.r=e(n),t.g=u(n),t.b=c(n),t.opacity=a(n),t+""}}var r=Object(o.b)(n);return e.gamma=t,e}(1);var a=r(u.b),f=r(c.a)},function(t,n,e){"use strict";var r=e(61);n.a=function(t){var n=t.length;return function(e){var i=Math.floor(((e%=1)<0?++e:e)*n),u=t[(i+n-1)%n],c=t[i%n],o=t[(i+1)%n],a=t[(i+2)%n];return Object(r.a)((e-i/n)*n,u,c,o,a)}}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";var r=e(58);n.a=function(t,n){var e,i=n?n.length:0,u=t?Math.min(i,t.length):0,c=new Array(i),o=new Array(i);for(e=0;e<u;++e)c[e]=Object(r.a)(t[e],n[e]);for(;e<i;++e)o[e]=n[e];return function(t){for(e=0;e<u;++e)o[e]=c[e](t);return o}}},function(t,n,e){"use strict";n.a=function(t,n){var e=new Date;return t=+t,n-=t,function(r){return e.setTime(t+n*r),e}}},function(t,n,e){"use strict";var r=e(58);n.a=function(t,n){var e,i={},u={};null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={});for(e in n)e in t?i[e]=Object(r.a)(t[e],n[e]):u[e]=n[e];return function(t){for(e in i)u[e]=i[e](t);return u}}},function(t,n,e){"use strict";function r(t){return function(){return t}}function i(t){return function(n){return t(n)+""}}var u=e(33),c=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,o=new RegExp(c.source,"g");n.a=function(t,n){var e,a,f,s=c.lastIndex=o.lastIndex=0,l=-1,h=[],d=[];for(t+="",n+="";(e=c.exec(t))&&(a=o.exec(n));)(f=a.index)>s&&(f=n.slice(s,f),h[l]?h[l]+=f:h[++l]=f),(e=e[0])===(a=a[0])?h[l]?h[l]+=a:h[++l]=a:(h[++l]=null,d.push({i:l,x:Object(u.a)(e,a)})),s=o.lastIndex;return s<n.length&&(f=n.slice(s),h[l]?h[l]+=f:h[++l]=f),h.length<2?d[0]?i(d[0].x):r(n):(n=d.length,function(t){for(var e,r=0;r<n;++r)h[(e=d[r]).i]=e.x(t);return h.join("")})}},function(t,n,e){"use strict";var r=e(6);n.a=function(t,n){var e,i,u,c=t.__transition,o=!0;if(c){n=null==n?null:n+"";for(u in c)(e=c[u]).name===n?(i=e.state>r.d&&e.state<r.b,e.state=r.a,e.timer.stop(),i&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete c[u]):o=!1;o&&delete t.__transition}}},function(t,n,e){"use strict";var r=e(7),i=e(5);n.a=function(t,n){var e;return("number"==typeof n?i.m:n instanceof r.a?i.o:(e=Object(r.a)(n))?(n=e,i.o):i.s)(t,n)}},function(t,n,e){"use strict";var r=e(268);e.d(n,"y",function(){return r.a});var i=e(269);e.d(n,"D",function(){return i.b}),e.d(n,"E",function(){return i.a}),e.d(n,"G",function(){return i.c}),e.d(n,"F",function(){return i.b});var u=e(270);e.d(n,"m",function(){return u.b}),e.d(n,"n",function(){return u.a}),e.d(n,"p",function(){return u.c}),e.d(n,"o",function(){return u.b});var c=e(271);e.d(n,"z",function(){return c.b}),e.d(n,"A",function(){return c.a}),e.d(n,"C",function(){return c.c}),e.d(n,"B",function(){return c.b});var o=e(272);e.d(n,"H",function(){return o.b}),e.d(n,"I",function(){return o.a}),e.d(n,"K",function(){return o.c}),e.d(n,"J",function(){return o.b});var a=e(273);e.d(n,"u",function(){return a.b}),e.d(n,"v",function(){return a.a}),e.d(n,"x",function(){return a.c}),e.d(n,"w",function(){return a.b});var f=e(274);e.d(n,"i",function(){return f.b}),e.d(n,"j",function(){return f.a}),e.d(n,"l",function(){return f.c}),e.d(n,"k",function(){return f.b});var s=e(275);e.d(n,"e",function(){return s.c}),e.d(n,"f",function(){return s.a}),e.d(n,"h",function(){return s.c}),e.d(n,"g",function(){return s.b});var l=e(276);e.d(n,"a",function(){return l.b}),e.d(n,"b",function(){return l.a}),e.d(n,"d",function(){return l.c}),e.d(n,"c",function(){return l.b});var h=e(277);e.d(n,"q",function(){return h.c}),e.d(n,"r",function(){return h.a}),e.d(n,"t",function(){return h.c}),e.d(n,"s",function(){return h.b})},function(t,n,e){"use strict";e.d(n,"a",function(){return r}),e.d(n,"d",function(){return i}),e.d(n,"b",function(){return c}),e.d(n,"e",function(){return o}),e.d(n,"c",function(){return a});var r=Math.cos,i=Math.sin,u=Math.PI,c=u/2,o=2*u,a=Math.max},function(t,n,e){"use strict";function r(t){return t.x}function i(t){return t.y}n.b=r,n.c=i;var u=e(12),c=e(22),o=e(34),a=Math.PI*(3-Math.sqrt(5));n.a=function(t){function n(){e(),g.call("tick",f),s<l&&(p.stop(),g.call("end",f))}function e(){var n,e,r=t.length;for(s+=(d-s)*h,v.each(function(t){t(s)}),n=0;n<r;++n)e=t[n],null==e.fx?e.x+=e.vx*=b:(e.x=e.fx,e.vx=0),null==e.fy?e.y+=e.vy*=b:(e.y=e.fy,e.vy=0)}function r(){for(var n,e=0,r=t.length;e<r;++e){if(n=t[e],n.index=e,isNaN(n.x)||isNaN(n.y)){var i=10*Math.sqrt(e),u=e*a;n.x=i*Math.cos(u),n.y=i*Math.sin(u)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function i(n){return n.initialize&&n.initialize(t),n}var f,s=1,l=.001,h=1-Math.pow(l,1/300),d=0,b=.6,v=Object(c.c)(),p=Object(o.d)(n),g=Object(u.a)("tick","end");return null==t&&(t=[]),r(),f={tick:e,restart:function(){return p.restart(n),f},stop:function(){return p.stop(),f},nodes:function(n){return arguments.length?(t=n,r(),v.each(i),f):t},alpha:function(t){return arguments.length?(s=+t,f):s},alphaMin:function(t){return arguments.length?(l=+t,f):l},alphaDecay:function(t){return arguments.length?(h=+t,f):+h},alphaTarget:function(t){return arguments.length?(d=+t,f):d},velocityDecay:function(t){return arguments.length?(b=1-t,f):1-b},force:function(t,n){return arguments.length>1?(null==n?v.remove(t):v.set(t,i(n)),f):v.get(t)},find:function(n,e,r){var i,u,c,o,a,f=0,s=t.length;for(null==r?r=1/0:r*=r,f=0;f<s;++f)o=t[f],i=n-o.x,u=e-o.y,(c=i*i+u*u)<r&&(a=o,r=c);return a},on:function(t,n){return arguments.length>1?(g.on(t,n),f):g.on(t)}}}},function(t,n,e){"use strict";var r=e(36),i=e(316),u=e(317),c=e(127),o=e(128),a=e(129),f=e(320),s=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];n.a=function(t){function n(t){function n(t){var n,u,c,o=m,h=O;if("c"===_)h=j(t)+h,t="";else{t=+t;var v=t<0;if(t=j(Math.abs(t),y),v&&0==+t&&(v=!1),o=(v?"("===i?i:"-":"-"===i||"("===i?"":i)+o,h=h+("s"===_?s[8+a.b/3]:"")+(v&&"("===i?")":""),x)for(n=-1,u=t.length;++n<u;)if(48>(c=t.charCodeAt(n))||c>57){h=(46===c?d+t.slice(n+1):t.slice(n))+h,t=t.slice(0,n);break}}g&&!f&&(t=l(t,1/0));var w=o.length+t.length+h.length,M=w<p?new Array(p-w+1).join(e):"";switch(g&&f&&(t=l(M+t,M.length?p-h.length:1/0),M=""),r){case"<":t=o+t+h+M;break;case"=":t=o+M+t+h;break;case"^":t=M.slice(0,w=M.length>>1)+o+t+h+M.slice(w);break;default:t=M+o+t+h}return b(t)}t=Object(c.a)(t);var e=t.fill,r=t.align,i=t.sign,u=t.symbol,f=t.zero,p=t.width,g=t.comma,y=t.precision,_=t.type,m="$"===u?h[0]:"#"===u&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",O="$"===u?h[1]:/[%p]/.test(_)?v:"",j=o.a[_],x=!_||/[defgprs%]/.test(_);return y=null==y?_?6:12:/[gprs]/.test(_)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),n.toString=function(){return t+""},n}function e(t,e){var i=n((t=Object(c.a)(t),t.type="f",t)),u=3*Math.max(-8,Math.min(8,Math.floor(Object(r.a)(e)/3))),o=Math.pow(10,-u),a=s[8+u/3];return function(t){return i(o*t)+a}}var l=t.grouping&&t.thousands?Object(i.a)(t.grouping,t.thousands):f.a,h=t.currency,d=t.decimal,b=t.numerals?Object(u.a)(t.numerals):f.a,v=t.percent||"%";return{format:n,formatPrefix:e}}},function(t,n,e){"use strict";function r(t){return new i(t)}function i(t){if(!(n=c.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",o=n[4]||"",a=!!n[5],f=n[6]&&+n[6],s=!!n[7],l=n[8]&&+n[8].slice(1),h=n[9]||"";"n"===h?(s=!0,h="g"):u.a[h]||(h=""),(a||"0"===e&&"="===r)&&(a=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=o,this.zero=a,this.width=f,this.comma=s,this.precision=l,this.type=h}n.a=r;var u=e(128),c=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;r.prototype=i.prototype,i.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type}},function(t,n,e){"use strict";var r=e(318),i=e(129),u=e(319);n.a={"":r.a,"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Object(u.a)(100*t,n)},r:u.a,s:i.a,X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}}},function(t,n,e){"use strict";e.d(n,"b",function(){return r});var r,i=e(71);n.a=function(t,n){var e=Object(i.a)(t,n);if(!e)return t+"";var u=e[0],c=e[1],o=c-(r=3*Math.max(-8,Math.min(8,Math.floor(c/3))))+1,a=u.length;return o===a?u:o>a?u+new Array(o-a+1).join("0"):o>0?u.slice(0,o)+"."+u.slice(o):"0."+new Array(1-o).join("0")+Object(i.a)(t,Math.max(0,n+o-1))[0]}},function(t,n,e){"use strict";function r(){y.point=u}function i(){c(o,a)}function u(t,n){y.point=c,o=t,a=n,t*=d.r,n*=d.r,f=t,s=Object(d.g)(n=n/2+d.q),l=Object(d.t)(n)}function c(t,n){t*=d.r,n*=d.r,n=n/2+d.q;var e=t-f,r=e>=0?1:-1,i=r*e,u=Object(d.g)(n),c=Object(d.t)(n),o=l*c,a=s*u+o*Object(d.g)(i),h=o*r*Object(d.t)(i);p.add(Object(d.e)(h,a)),f=t,s=u,l=c}e.d(n,"a",function(){return p}),e.d(n,"b",function(){return y});var o,a,f,s,l,h=e(18),d=e(0),b=e(11),v=e(14),p=Object(h.a)(),g=Object(h.a)(),y={point:b.a,lineStart:b.a,lineEnd:b.a,polygonStart:function(){p.reset(),y.lineStart=r,y.lineEnd=i},polygonEnd:function(){var t=+p;g.add(t<0?d.w+t:t),this.lineStart=this.lineEnd=this.point=b.a},sphere:function(){g.add(d.w)}};n.c=function(t){return g.reset(),Object(v.a)(t,y),2*g}},function(t,n,e){"use strict";function r(t,n,e,r,c,a){if(e){var f=Object(o.g)(n),s=Object(o.t)(n),l=r*e;null==c?(c=n+r*o.w,a=n-l/2):(c=i(f,c),a=i(f,a),(r>0?c<a:c>a)&&(c+=r*o.w));for(var h,d=c;r>0?d>a:d<a;d-=l)h=Object(u.g)([f,-s*Object(o.g)(d),-s*Object(o.t)(d)]),t.point(h[0],h[1])}}function i(t,n){n=Object(u.a)(n),n[0]-=t,Object(u.e)(n);var e=Object(o.b)(-n[1]);return((-n[2]<0?-e:e)+o.w-o.i)%o.w}n.a=r;var u=e(24),c=e(327),o=e(0),a=e(37);n.b=function(){function t(t,n){e.push(t=i(t,n)),t[0]*=o.h,t[1]*=o.h}function n(){var t=u.apply(this,arguments),n=f.apply(this,arguments)*o.r,c=s.apply(this,arguments)*o.r;return e=[],i=Object(a.b)(-t[0]*o.r,-t[1]*o.r,0).invert,r(l,n,c,1),t={type:"Polygon",coordinates:[e]},e=i=null,t}var e,i,u=Object(c.a)([0,0]),f=Object(c.a)(90),s=Object(c.a)(6),l={point:t};return n.center=function(t){return arguments.length?(u="function"==typeof t?t:Object(c.a)([+t[0],+t[1]]),n):u},n.radius=function(t){return arguments.length?(f="function"==typeof t?t:Object(c.a)(+t),n):f},n.precision=function(t){return arguments.length?(s="function"==typeof t?t:Object(c.a)(+t),n):s},n}},function(t,n,e){"use strict";n.a=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}},function(t,n,e){"use strict";var r=e(11);n.a=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:r.a,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}},function(t,n,e){"use strict";function r(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function i(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var u=e(135);n.a=function(t,n,e,c,o){var a,f,s=[],l=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,i=t[0],c=t[n];if(Object(u.a)(i,c)){for(o.lineStart(),a=0;a<n;++a)o.point((i=t[a])[0],i[1]);return void o.lineEnd()}s.push(e=new r(i,t,null,!0)),l.push(e.o=new r(i,null,e,!1)),s.push(e=new r(c,t,null,!1)),l.push(e.o=new r(c,null,e,!0))}}),s.length){for(l.sort(n),i(s),i(l),a=0,f=l.length;a<f;++a)l[a].e=e=!e;for(var h,d,b=s[0];;){for(var v=b,p=!0;v.v;)if((v=v.n)===b)return;h=v.z,o.lineStart();do{if(v.v=v.o.v=!0,v.e){if(p)for(a=0,f=h.length;a<f;++a)o.point((d=h[a])[0],d[1]);else c(v.x,v.n.x,1,o);v=v.n}else{if(p)for(h=v.p.z,a=h.length-1;a>=0;--a)o.point((d=h[a])[0],d[1]);else c(v.x,v.p.x,-1,o);v=v.p}v=v.o,h=v.z,p=!p}while(!v.v);o.lineEnd()}}}},function(t,n,e){"use strict";var r=e(0);n.a=function(t,n){return Object(r.a)(t[0]-n[0])<r.i&&Object(r.a)(t[1]-n[1])<r.i}},function(t,n,e){"use strict";var r=e(18),i=e(24),u=e(0),c=Object(r.a)();n.a=function(t,n){var e=n[0],r=n[1],o=[Object(u.t)(e),-Object(u.g)(e),0],a=0,f=0;c.reset();for(var s=0,l=t.length;s<l;++s)if(d=(h=t[s]).length)for(var h,d,b=h[d-1],v=b[0],p=b[1]/2+u.q,g=Object(u.t)(p),y=Object(u.g)(p),_=0;_<d;++_,v=O,g=x,y=w,b=m){var m=h[_],O=m[0],j=m[1]/2+u.q,x=Object(u.t)(j),w=Object(u.g)(j),M=O-v,k=M>=0?1:-1,S=k*M,T=S>u.o,E=g*x;if(c.add(Object(u.e)(E*k*Object(u.t)(S),y*w+E*Object(u.g)(S))),a+=T?M+k*u.w:M,T^v>=e^O>=e){var A=Object(i.c)(Object(i.a)(b),Object(i.a)(m));Object(i.e)(A);var N=Object(i.c)(o,A);Object(i.e)(N);var C=(T^M>=0?-1:1)*Object(u.c)(N[2]);(r>C||r===C&&(A[0]||A[1]))&&(f+=T^M>=0?1:-1)}}return(a<-u.i||a<u.i&&c<-u.i)^1&f}},function(t,n,e){"use strict";var r=e(138),i=[null,null],u={type:"LineString",coordinates:i};n.a=function(t,n){return i[0]=t,i[1]=n,Object(r.a)(u)}},function(t,n,e){"use strict";function r(){v.point=u,v.lineEnd=i}function i(){v.point=v.lineEnd=h.a}function u(t,n){t*=l.r,n*=l.r,o=t,a=Object(l.t)(n),f=Object(l.g)(n),v.point=c}function c(t,n){t*=l.r,n*=l.r;var e=Object(l.t)(n),r=Object(l.g)(n),i=Object(l.a)(t-o),u=Object(l.g)(i),c=Object(l.t)(i),s=r*c,h=f*e-a*r*u,d=a*e+f*r*u;b.add(Object(l.e)(Object(l.u)(s*s+h*h),d)),o=t,a=e,f=r}var o,a,f,s=e(18),l=e(0),h=e(11),d=e(14),b=Object(s.a)(),v={sphere:h.a,point:h.a,lineStart:r,lineEnd:h.a,polygonStart:h.a,polygonEnd:h.a};n.a=function(t){return b.reset(),Object(d.a)(t,v),+b}},function(t,n,e){"use strict";function r(t,n){t<u&&(u=t),t>o&&(o=t),n<c&&(c=n),n>a&&(a=n)}var i=e(11),u=1/0,c=u,o=-u,a=o,f={point:r,lineStart:i.a,lineEnd:i.a,polygonStart:i.a,polygonEnd:i.a,result:function(){var t=[[u,c],[o,a]];return o=a=-(c=u=1/0),t}};n.a=f},function(t,n,e){"use strict";var r=e(74);n.a=function(){return Object(r.b)().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}},function(t,n,e){"use strict";function r(t){return t.length>1}function i(t,n){return((t=t.x)[0]<0?t[1]-o.l-o.i:o.l-t[1])-((n=n.x)[0]<0?n[1]-o.l-o.i:o.l-n[1])}var u=e(133),c=e(134),o=e(0),a=e(136),f=e(3);n.a=function(t,n,e,o){return function(s,l){function h(n,e){var r=s(n,e);t(n=r[0],e=r[1])&&l.point(n,e)}function d(t,n){var e=s(t,n);j.point(e[0],e[1])}function b(){S.point=d,j.lineStart()}function v(){S.point=h,j.lineEnd()}function p(t,n){O.push([t,n]);var e=s(t,n);M.point(e[0],e[1])}function g(){M.lineStart(),O=[]}function y(){p(O[0][0],O[0][1]),M.lineEnd();var t,n,e,i,u=M.clean(),c=w.result(),o=c.length;if(O.pop(),_.push(O),O=null,o)if(1&u){if(e=c[0],(n=e.length-1)>0){for(k||(l.polygonStart(),k=!0),l.lineStart(),t=0;t<n;++t)l.point((i=e[t])[0],i[1]);l.lineEnd()}}else o>1&&2&u&&c.push(c.pop().concat(c.shift())),m.push(c.filter(r))}var _,m,O,j=n(l),x=s.invert(o[0],o[1]),w=Object(u.a)(),M=n(w),k=!1,S={point:h,lineStart:b,lineEnd:v,polygonStart:function(){S.point=p,S.lineStart=g,S.lineEnd=y,m=[],_=[]},polygonEnd:function(){S.point=h,S.lineStart=b,S.lineEnd=v,m=Object(f.n)(m);var t=Object(a.a)(_,x);m.length?(k||(l.polygonStart(),k=!0),Object(c.a)(m,i,t,e,l)):t&&(k||(l.polygonStart(),k=!0),l.lineStart(),e(null,null,1,l),l.lineEnd()),k&&(l.polygonEnd(),k=!1),m=_=null},sphere:function(){l.polygonStart(),l.lineStart(),e(null,null,1,l),l.lineEnd(),l.polygonEnd()}};return S}}},function(t,n,e){"use strict";function r(t,n){return[t,n]}n.b=r;var i=e(8);r.invert=r,n.a=function(){return Object(i.a)(r).scale(152.63)}},function(t,n,e){"use strict";function r(t,n,e){var r=t.x,i=t.y,u=n.r+e.r,c=t.r+e.r,o=n.x-r,a=n.y-i,f=o*o+a*a;if(f){var s=.5+((c*=c)-(u*=u))/(2*f),l=Math.sqrt(Math.max(0,2*u*(c+f)-(c-=f)*c-u*u))/(2*f);e.x=r+s*o+l*a,e.y=i+s*a-l*o}else e.x=r+c,e.y=i}function i(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return i*i-1e-6>e*e+r*r}function u(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,u=(n.y*e.r+e.y*n.r)/r;return i*i+u*u}function c(t){this._=t,this.next=null,this.previous=null}function o(t){if(!(f=t.length))return 0;var n,e,o,f,s,l,h,d,b,v,p;if(n=t[0],n.x=0,n.y=0,!(f>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(f>2))return n.r+e.r;r(e,n,o=t[2]),n=new c(n),e=new c(e),o=new c(o),n.next=o.previous=e,e.next=n.previous=o,o.next=e.previous=n;t:for(h=3;h<f;++h){r(n._,e._,o=t[h]),o=new c(o),d=e.next,b=n.previous,v=e._.r,p=n._.r;do{if(v<=p){if(i(d._,o._)){e=d,n.next=e,e.previous=n,--h;continue t}v+=d._.r,d=d.next}else{if(i(b._,o._)){n=b,n.next=e,e.previous=n,--h;continue t}p+=b._.r,b=b.previous}}while(d!==b.next);for(o.previous=n,o.next=e,n.next=e.previous=e=o,s=u(n);(o=o.next)!==e;)(l=u(o))<s&&(n=o,s=l);e=n.next}for(n=[e._],o=e;(o=o.next)!==e;)n.push(o._);for(o=Object(a.a)(n),h=0;h<f;++h)n=t[h],n.x-=o.x,n.y-=o.y;return o.r}n.b=o;var a=e(144);n.a=function(t){return o(t),t}},function(t,n,e){"use strict";function r(t,n){var e,r;if(c(n,t))return[n];for(e=0;e<t.length;++e)if(i(n,t[e])&&c(f(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(i(f(t[e],t[r]),n)&&i(f(t[e],n),t[r])&&i(f(t[r],n),t[e])&&c(s(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function i(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function u(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function c(t,n){for(var e=0;e<n.length;++e)if(!u(t,n[e]))return!1;return!0}function o(t){switch(t.length){case 1:return a(t[0]);case 2:return f(t[0],t[1]);case 3:return s(t[0],t[1],t[2])}}function a(t){return{x:t.x,y:t.y,r:t.r}}function f(t,n){var e=t.x,r=t.y,i=t.r,u=n.x,c=n.y,o=n.r,a=u-e,f=c-r,s=o-i,l=Math.sqrt(a*a+f*f);return{x:(e+u+a/l*s)/2,y:(r+c+f/l*s)/2,r:(l+i+o)/2}}function s(t,n,e){var r=t.x,i=t.y,u=t.r,c=n.x,o=n.y,a=n.r,f=e.x,s=e.y,l=e.r,h=r-c,d=r-f,b=i-o,v=i-s,p=a-u,g=l-u,y=r*r+i*i-u*u,_=y-c*c-o*o+a*a,m=y-f*f-s*s+l*l,O=d*b-h*v,j=(b*m-v*_)/(2*O)-r,x=(v*p-b*g)/O,w=(d*_-h*m)/(2*O)-i,M=(h*g-d*p)/O,k=x*x+M*M-1,S=2*(u+j*x+w*M),T=j*j+w*w-u*u,E=-(k?(S+Math.sqrt(S*S-4*k*T))/(2*k):T/S);return{x:r+j+x*E,y:i+w+M*E,r:E}}var l=e(366);n.a=function(t){for(var n,e,i=0,c=(t=Object(l.a)(l.b.call(t))).length,a=[];i<c;)n=t[i],e&&u(e,n)?++i:(e=o(a=r(a,n)),i=0);return e}},function(t,n,e){"use strict";function r(){return 0}n.a=r,n.b=function(t){return function(){return t}}},function(t,n,e){"use strict";n.a=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}},function(t,n,e){"use strict";var r=e(19);n.a=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var u;if(null!=r)u=r,r=null;else do{r=2*n()-1,u=2*n()-1,i=r*r+u*u}while(!i||i>1);return t+e*u*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(r.a)},function(t,n,e){"use strict";var r=e(19);n.a=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(r.a)},function(t,n,e){"use strict";function r(t,n){return function(e){return t(e.responseText,n)}}var i=e(81);n.a=function(t,n){return function(e,u,c){arguments.length<3&&(c=u,u=null);var o=Object(i.a)(e).mimeType(t);return o.row=function(t){return arguments.length?o.response(r(n,u=t)):u},o.row(u),c?o.get(c):o}}},function(t,n,e){"use strict";function r(t){function n(n){var r=n+"",i=e.get(r);if(!i){if(a!==c)return a;e.set(r,i=o.push(n))}return t[(i-1)%t.length]}var e=Object(i.c)(),o=[],a=c;return t=null==t?[]:u.b.call(t),n.domain=function(t){if(!arguments.length)return o.slice();o=[],e=Object(i.c)();for(var r,u,c=-1,a=t.length;++c<a;)e.has(u=(r=t[c])+"")||e.set(u,o.push(r));return n},n.range=function(e){return arguments.length?(t=u.b.call(e),n):t.slice()},n.unknown=function(t){return arguments.length?(a=t,n):a},n.copy=function(){return r().domain(o).range(t).unknown(a)},n}e.d(n,"b",function(){return c}),n.a=r;var i=e(22),u=e(15),c={name:"implicit"}},function(t,n,e){"use strict";n.a=function(t){return+t}},function(t,n,e){"use strict";n.a=function(t,n){t=t.slice();var e,r=0,i=t.length-1,u=t[r],c=t[i];return c<u&&(e=r,r=i,i=e,e=u,u=c,c=e),t[r]=n.floor(u),t[i]=n.ceil(c),t}},function(t,n,e){"use strict";function r(t){return new Date(t)}function i(t){return t instanceof Date?+t:+new Date(+t)}function u(t,n,e,a,f,m,O,j,x){function w(r){return(O(r)<r?E:m(r)<r?A:f(r)<r?N:a(r)<r?C:n(r)<r?e(r)<r?P:z:t(r)<r?L:R)(r)}function M(n,e,r,i){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,o=Object(c.e)(function(t){return t[2]}).right(q,u);o===q.length?(i=Object(c.A)(e/_,r/_,n),n=t):o?(o=q[u/q[o-1][2]<q[o][2]/u?o-1:o],i=o[1],n=o[0]):(i=Object(c.A)(e,r,n),n=j)}return null==i?n:n.every(i)}var k=Object(l.b)(l.c,o.m),S=k.invert,T=k.domain,E=x(".%L"),A=x(":%S"),N=x("%I:%M"),C=x("%I %p"),P=x("%a %d"),z=x("%b %d"),L=x("%B"),R=x("%Y"),q=[[O,1,d],[O,5,5*d],[O,15,15*d],[O,30,30*d],[m,1,b],[m,5,5*b],[m,15,15*b],[m,30,30*b],[f,1,v],[f,3,3*v],[f,6,6*v],[f,12,12*v],[a,1,p],[a,2,2*p],[e,1,g],[n,1,y],[n,3,3*y],[t,1,_]];return k.invert=function(t){return new Date(S(t))},k.domain=function(t){return arguments.length?T(s.a.call(t,i)):T().map(r)},k.ticks=function(t,n){var e,r=T(),i=r[0],u=r[r.length-1],c=u<i;return c&&(e=i,i=u,u=e),e=M(t,i,u,n),e=e?e.range(i,u+1):[],c?e.reverse():e},k.tickFormat=function(t,n){return null==n?w:x(n)},k.nice=function(t,n){var e=T();return(t=M(t,e[0],e[e.length-1],n))?T(Object(h.a)(e,t)):k},k.copy=function(){return Object(l.a)(k,u(t,n,e,a,f,m,O,j,x))},k}n.a=u;var c=e(3),o=e(5),a=e(42),f=e(83),s=e(15),l=e(41),h=e(152),d=1e3,b=60*d,v=60*b,p=24*v,g=7*p,y=30*p,_=365*p;n.b=function(){return u(a.D,a.n,a.B,a.a,a.e,a.j,a.r,a.h,f.c).domain([new Date(2e3,0,1),new Date(2e3,0,2)])}},function(t,n,e){"use strict";function r(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function i(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function u(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function c(t){function n(t,n){return function(e){var r,i,u,c=[],o=-1,a=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++o<f;)37===t.charCodeAt(o)&&(c.push(t.slice(a,o)),null!=(i=nt[r=t.charAt(++o)])?r=t.charAt(++o):i="e"===r?" ":"0",(u=n[r])&&(r=u(e,i)),c.push(r),a=o+1);return c.push(t.slice(a,o)),c.join("")}}function e(t,n){return function(e){var r=u(1900);if(c(r,t,e+="",0)!=e.length)return null;if("p"in r&&(r.H=r.H%12+12*r.p),"W"in r||"U"in r){"w"in r||(r.w="W"in r?1:0);var o="Z"in r?i(u(r.y)).getUTCDay():n(u(r.y)).getDay();r.m=0,r.d="W"in r?(r.w+6)%7+7*r.W-(o+5)%7:r.w+7*r.U-(o+6)%7}return"Z"in r?(r.H+=r.Z/100|0,r.M+=r.Z%100,i(r)):n(r)}}function c(t,n,e,r){for(var i,u,c=0,o=n.length,a=e.length;c<o;){if(r>=a)return-1;if(37===(i=n.charCodeAt(c++))){if(i=n.charAt(c++),!(u=qt[i in nt?n.charAt(c++):i])||(r=u(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}function o(t,n,e){var r=Mt.exec(n.slice(e));return r?(t.p=kt[r[0].toLowerCase()],e+r[0].length):-1}function a(t,n,e){var r=Et.exec(n.slice(e));return r?(t.w=At[r[0].toLowerCase()],e+r[0].length):-1}function tt(t,n,e){var r=St.exec(n.slice(e));return r?(t.w=Tt[r[0].toLowerCase()],e+r[0].length):-1}function et(t,n,e){var r=Pt.exec(n.slice(e));return r?(t.m=zt[r[0].toLowerCase()],e+r[0].length):-1}function rt(t,n,e){var r=Nt.exec(n.slice(e));return r?(t.m=Ct[r[0].toLowerCase()],e+r[0].length):-1}function it(t,n,e){return c(t,gt,n,e)}function ut(t,n,e){return c(t,yt,n,e)}function ct(t,n,e){return c(t,_t,n,e)}function ot(t){return jt[t.getDay()]}function at(t){return Ot[t.getDay()]}function ft(t){return wt[t.getMonth()]}function st(t){return xt[t.getMonth()]}function lt(t){return mt[+(t.getHours()>=12)]}function ht(t){return jt[t.getUTCDay()]}function dt(t){return Ot[t.getUTCDay()]}function bt(t){return wt[t.getUTCMonth()]}function vt(t){return xt[t.getUTCMonth()]}function pt(t){return mt[+(t.getUTCHours()>=12)]}var gt=t.dateTime,yt=t.date,_t=t.time,mt=t.periods,Ot=t.days,jt=t.shortDays,xt=t.months,wt=t.shortMonths,Mt=f(mt),kt=s(mt),St=f(Ot),Tt=s(Ot),Et=f(jt),At=s(jt),Nt=f(xt),Ct=s(xt),Pt=f(wt),zt=s(wt),Lt={a:ot,A:at,b:ft,B:st,c:null,d:M,e:M,H:k,I:S,j:T,L:E,m:A,M:N,p:lt,S:C,U:P,w:z,W:L,x:null,X:null,y:R,Y:q,Z:I,"%":Q},Rt={a:ht,A:dt,b:bt,B:vt,c:null,d:D,e:D,H:B,I:U,j:F,L:H,m:Y,M:X,p:pt,S:W,U:V,w:G,W:Z,x:null,X:null,y:$,Y:J,Z:K,"%":Q},qt={a:a,A:tt,b:et,B:rt,c:it,d:y,e:y,H:m,I:m,j:_,L:x,m:g,M:O,p:o,S:j,U:h,w:l,W:d,x:ut,X:ct,y:v,Y:b,Z:p,"%":w};return Lt.x=n(yt,Lt),Lt.X=n(_t,Lt),Lt.c=n(gt,Lt),Rt.x=n(yt,Rt),Rt.X=n(_t,Rt),Rt.c=n(gt,Rt),{format:function(t){var e=n(t+="",Lt);return e.toString=function(){return t},e},parse:function(t){var n=e(t+="",r);return n.toString=function(){return t},n},utcFormat:function(t){var e=n(t+="",Rt);return e.toString=function(){return t},e},utcParse:function(t){var n=e(t,i);return n.toString=function(){return t},n}}}function o(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",u=i.length;return r+(u<e?new Array(e-u+1).join(n)+i:i)}function a(t){return t.replace(it,"\\$&")}function f(t){return new RegExp("^(?:"+t.map(a).join("|")+")","i")}function s(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function l(t,n,e){var r=et.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function h(t,n,e){var r=et.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function d(t,n,e){var r=et.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function b(t,n,e){var r=et.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function v(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function p(t,n,e){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function g(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function y(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function _(t,n,e){var r=et.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function m(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function O(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function j(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function x(t,n,e){var r=et.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function w(t,n,e){var r=rt.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function M(t,n){return o(t.getDate(),n,2)}function k(t,n){return o(t.getHours(),n,2)}function S(t,n){return o(t.getHours()%12||12,n,2)}function T(t,n){return o(1+tt.a.count(Object(tt.D)(t),t),n,3)}function E(t,n){return o(t.getMilliseconds(),n,3)}function A(t,n){return o(t.getMonth()+1,n,2)}function N(t,n){return o(t.getMinutes(),n,2)}function C(t,n){return o(t.getSeconds(),n,2)}function P(t,n){return o(tt.t.count(Object(tt.D)(t),t),n,2)}function z(t){return t.getDay()}function L(t,n){return o(tt.l.count(Object(tt.D)(t),t),n,2)}function R(t,n){return o(t.getFullYear()%100,n,2)}function q(t,n){return o(t.getFullYear()%1e4,n,4)}function I(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+o(n/60|0,"0",2)+o(n%60,"0",2)}function D(t,n){return o(t.getUTCDate(),n,2)}function B(t,n){return o(t.getUTCHours(),n,2)}function U(t,n){return o(t.getUTCHours()%12||12,n,2)}function F(t,n){return o(1+tt.F.count(Object(tt._7)(t),t),n,3)}function H(t,n){return o(t.getUTCMilliseconds(),n,3)}function Y(t,n){return o(t.getUTCMonth()+1,n,2)}function X(t,n){return o(t.getUTCMinutes(),n,2)}function W(t,n){return o(t.getUTCSeconds(),n,2)}function V(t,n){return o(tt.X.count(Object(tt._7)(t),t),n,2)}function G(t){return t.getUTCDay()}function Z(t,n){return o(tt.P.count(Object(tt._7)(t),t),n,2)}function $(t,n){return o(t.getUTCFullYear()%100,n,2)}function J(t,n){return o(t.getUTCFullYear()%1e4,n,4)}function K(){return"+0000"}function Q(){return"%"}n.a=c;var tt=e(42),nt={"-":"",_:" ",0:"0"},et=/^\s*\d+/,rt=/^%/,it=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g},function(t,n,e){"use strict";function r(t){return t.toISOString()}e.d(n,"b",function(){return u});var i=e(84),u="%Y-%m-%dT%H:%M:%S.%LZ",c=Date.prototype.toISOString?r:Object(i.d)(u);n.a=c},function(t,n,e){"use strict";var r=e(13),i=e(16),u=e(43),c=e(85),o=e(86);n.a=function(){function t(t){var n,i,u,c,o,v=t.length,p=!1,g=new Array(v),y=new Array(v);for(null==h&&(b=d(o=Object(r.a)())),n=0;n<=v;++n){if(!(n<v&&l(c=t[n],n,t))===p)if(p=!p)i=n,b.areaStart(),b.lineStart();else{for(b.lineEnd(),b.lineStart(),u=n-1;u>=i;--u)b.point(g[u],y[u]);b.lineEnd(),b.areaEnd()}p&&(g[n]=+e(c,n,t),y[n]=+f(c,n,t),b.point(a?+a(c,n,t):g[n],s?+s(c,n,t):y[n]))}if(o)return b=null,o+""||null}function n(){return Object(c.a)().defined(l).curve(d).context(h)}var e=o.a,a=null,f=Object(i.a)(0),s=o.b,l=Object(i.a)(!0),h=null,d=u.a,b=null;return t.x=function(n){return arguments.length?(e="function"==typeof n?n:Object(i.a)(+n),a=null,t):e},t.x0=function(n){return arguments.length?(e="function"==typeof n?n:Object(i.a)(+n),t):e},t.x1=function(n){return arguments.length?(a=null==n?null:"function"==typeof n?n:Object(i.a)(+n),t):a},t.y=function(n){return arguments.length?(f="function"==typeof n?n:Object(i.a)(+n),s=null,t):f},t.y0=function(n){return arguments.length?(f="function"==typeof n?n:Object(i.a)(+n),t):f},t.y1=function(n){return arguments.length?(s=null==n?null:"function"==typeof n?n:Object(i.a)(+n),t):s},t.lineX0=t.lineY0=function(){return n().x(e).y(f)},t.lineY1=function(){return n().x(e).y(s)},t.lineX1=function(){return n().x(a).y(f)},t.defined=function(n){return arguments.length?(l="function"==typeof n?n:Object(i.a)(!!n),t):l},t.curve=function(n){return arguments.length?(d=n,null!=h&&(b=d(h)),t):d},t.context=function(n){return arguments.length?(null==n?h=b=null:b=d(h=n),t):h},t}},function(t,n,e){"use strict";function r(t){this._curve=t}function i(t){function n(n){return new r(t(n))}return n._curve=t,n}e.d(n,"a",function(){return c}),n.b=i;var u=e(43),c=i(u.a);r.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}}},function(t,n,e){"use strict";function r(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Object(i.b)(t)):n()._curve},t}n.b=r;var i=e(157),u=e(85);n.a=function(){return r(Object(u.a)().curve(i.a))}},function(t,n,e){"use strict";n.a=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}},function(t,n,e){"use strict";e.d(n,"a",function(){return r});var r=Array.prototype.slice},function(t,n,e){"use strict";var r=e(29);n.a={draw:function(t,n){var e=Math.sqrt(n/r.j);t.moveTo(e,0),t.arc(0,0,e,0,r.m)}}},function(t,n,e){"use strict";n.a={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}}},function(t,n,e){"use strict";var r=Math.sqrt(1/3),i=2*r;n.a={draw:function(t,n){var e=Math.sqrt(n/i),u=e*r;t.moveTo(0,-e),t.lineTo(u,0),t.lineTo(0,e),t.lineTo(-u,0),t.closePath()}}},function(t,n,e){"use strict";var r=e(29),i=Math.sin(r.j/10)/Math.sin(7*r.j/10),u=Math.sin(r.m/10)*i,c=-Math.cos(r.m/10)*i;n.a={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),i=u*e,o=c*e;t.moveTo(0,-e),t.lineTo(i,o);for(var a=1;a<5;++a){var f=r.m*a/5,s=Math.cos(f),l=Math.sin(f);t.lineTo(l*e,-s*e),t.lineTo(s*i-l*o,l*i+s*o)}t.closePath()}}},function(t,n,e){"use strict";n.a={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}}},function(t,n,e){"use strict";var r=Math.sqrt(3);n.a={draw:function(t,n){var e=-Math.sqrt(n/(3*r));t.moveTo(0,2*e),t.lineTo(-r*e,-e),t.lineTo(r*e,-e),t.closePath()}}},function(t,n,e){"use strict";var r=-.5,i=Math.sqrt(3)/2,u=1/Math.sqrt(12),c=3*(u/2+1);n.a={draw:function(t,n){var e=Math.sqrt(n/c),o=e/2,a=e*u,f=o,s=e*u+e,l=-f,h=s;t.moveTo(o,a),t.lineTo(f,s),t.lineTo(l,h),t.lineTo(r*o-i*a,i*o+r*a),t.lineTo(r*f-i*s,i*f+r*s),t.lineTo(r*l-i*h,i*l+r*h),t.lineTo(r*o+i*a,r*a-i*o),t.lineTo(r*f+i*s,r*s-i*f),t.lineTo(r*l+i*h,r*h-i*l),t.closePath()}}},function(t,n,e){"use strict";function r(t,n){this._context=t,this._k=(1-n)/6}n.a=r;var i=e(44),u=e(46);r.prototype={areaStart:i.a,areaEnd:i.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Object(u.c)(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}},n.b=function t(n){function e(t){return new r(t,n)}return e.tension=function(n){return t(+n)},e}(0)},function(t,n,e){"use strict";function r(t,n){this._context=t,this._k=(1-n)/6}n.a=r;var i=e(46);r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(i.c)(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}},n.b=function t(n){function e(t){return new r(t,n)}return e.tension=function(n){return t(+n)},e}(0)},function(t,n,e){"use strict";function r(t){return s.b[t.index]={site:t,halfedges:[]}}function i(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function u(t,n){return n[+(n.left!==t.site)]}function c(t,n){return n[+(n.left===t.site)]}function o(){for(var t,n,e,r,u=0,c=s.b.length;u<c;++u)if((t=s.b[u])&&(r=(n=t.halfedges).length)){var o=new Array(r),a=new Array(r);for(e=0;e<r;++e)o[e]=e,a[e]=i(t,s.e[n[e]]);for(o.sort(function(t,n){return a[n]-a[t]}),e=0;e<r;++e)a[e]=n[o[e]];for(e=0;e<r;++e)n[e]=a[e]}}function a(t,n,e,r){var i,o,a,l,h,d,b,v,p,g,y,_,m=s.b.length,O=!0;for(i=0;i<m;++i)if(o=s.b[i]){for(a=o.site,h=o.halfedges,l=h.length;l--;)s.e[h[l]]||h.splice(l,1);for(l=0,d=h.length;l<d;)g=c(o,s.e[h[l]]),y=g[0],_=g[1],b=u(o,s.e[h[++l%d]]),v=b[0],p=b[1],(Math.abs(y-v)>s.f||Math.abs(_-p)>s.f)&&(h.splice(l,0,s.e.push(Object(f.b)(a,g,Math.abs(y-t)<s.f&&r-_>s.f?[t,Math.abs(v-t)<s.f?p:r]:Math.abs(_-r)<s.f&&e-y>s.f?[Math.abs(p-r)<s.f?v:e,r]:Math.abs(y-e)<s.f&&_-n>s.f?[e,Math.abs(v-e)<s.f?p:n]:Math.abs(_-n)<s.f&&y-t>s.f?[Math.abs(p-n)<s.f?v:t,n]:null))-1),++d);d&&(O=!1)}if(O){var j,x,w,M=1/0;for(i=0,O=null;i<m;++i)(o=s.b[i])&&(a=o.site,j=a[0]-t,x=a[1]-n,(w=j*j+x*x)<M&&(M=w,O=o));if(O){var k=[t,n],S=[t,r],T=[e,r],E=[e,n];O.halfedges.push(s.e.push(Object(f.b)(a=O.site,k,S))-1,s.e.push(Object(f.b)(a,S,T))-1,s.e.push(Object(f.b)(a,T,E))-1,s.e.push(Object(f.b)(a,E,k))-1)}}for(i=0;i<m;++i)(o=s.b[i])&&(o.halfedges.length||delete s.b[i])}n.c=r,n.a=u,n.d=o,n.b=a;var f=e(90),s=e(32)},function(t,n,e){"use strict";function r(){Object(o.a)(this),this.x=this.y=this.arc=this.site=this.cy=null}function i(t){var n=t.P,e=t.N;if(n&&e){var i=n.site,u=t.site,o=e.site;if(i!==o){var s=u[0],l=u[1],h=i[0]-s,d=i[1]-l,b=o[0]-s,v=o[1]-l,p=2*(h*v-d*b);if(!(p>=-a.g)){var g=h*h+d*d,y=b*b+v*v,_=(v*g-d*y)/p,m=(h*y-b*g)/p,O=f.pop()||new r;O.arc=t,O.site=u,O.x=_+s,O.y=(O.cy=m+l)+Math.sqrt(_*_+m*m),t.circle=O;for(var j=null,x=a.c._;x;)if(O.y<x.y||O.y===x.y&&O.x<=x.x){if(!x.L){j=x.P;break}x=x.L}else{if(!x.R){j=x;break}x=x.R}a.c.insert(j,O),j||(c=O)}}}}function u(t){var n=t.circle;n&&(n.P||(c=n.N),a.c.remove(n),f.push(n),Object(o.a)(n),t.circle=null)}e.d(n,"c",function(){return c}),n.a=i,n.b=u;var c,o=e(89),a=e(32),f=[]},function(t,n,e){"use strict";function r(t,n,e){this.k=t,this.x=n,this.y=e}function i(t){return t.__zoom||u}n.a=r,e.d(n,"c",function(){return u}),n.b=i,r.prototype={constructor:r,scale:function(t){return 1===t?this:new r(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new r(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var u=new r(1,0,0);i.prototype=r.prototype},function(t,n,e){"use strict";function r(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0}),n.PieChart=void 0;var i=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),u=e(93),c=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e]);return n.default=t,n}(u),o=e(92),a=(function(t){t&&t.__esModule}(o),e(464)),f=e(91);n.PieChart=function(){function t(n){r(this,t),this.elementId=n.elementId,this.viewboxWidth=n.viewboxWidth,this.viewboxHeight=n.viewboxHeight,this.width=n.width,this.height=n.height,this.innerWidth=n.innerWidth,this.colorScale=n.colorScale,this.selectedPlaces=n.selectedPlaces,this.rotationalOffset=this.getSliceWidth()/2,this.selectionIndex=null}return i(t,[{key:"getRadius",value:function(){return this.width/2}},{key:"getSliceWidth",value:function(){return 360/this.selectedPlaces.length}},{key:"setRotationalOffset",value:function(t){this.rotationalOffset=t}},{key:"resetRotationalOffset",value:function(){this.rotationalOffset=this.getSliceWidth()/2}},{key:"setSelectionIndex",value:function(t){this.selectionIndex=t}},{key:"resetSelectionIndex",value:function(){this.selectionIndex=null}},{key:"setSelectedPlaces",value:function(t){this.selectedPlaces=t}},{key:"getSelectedPlaces",value:function(){return this.selectedPlaces}},{key:"draw",value:function(){document.getElementById(this.elementId).innerHTML="",this.resetRotationalOffset();var t=this.createBoundingBox();this.createDropShadow(t);var n=this.createArc(),e=this.createSliceGroup(t);this.createSlices(e,n),this.createInnerCircle(t,e),this.createTriangle(t)}},{key:"createBoundingBox",value:function(){return c.select("#"+this.elementId).append("svg").attr("width","100%").attr("height","100%").attr("viewBox","0 0 "+this.viewboxWidth+" "+this.viewboxHeight)}},{key:"createDropShadow",value:function(t){var n=t.append("defs"),e=n.append("filter").attr("id","drop-shadow").attr("height","130%");e.append("feGaussianBlur").attr("in","SourceAlpha").attr("stdDeviation",6).attr("result","blur"),e.append("feOffset").attr("in","blur").attr("dx",0).attr("dy",0).attr("result","offsetBlur"),e.append("feFlood").attr("in","offsetBlur").attr("flood-color","#111111").attr("flood-opacity","0.3").attr("result","offsetColor"),e.append("feComposite").attr("in","offsetColor").attr("in2","offsetBlur").attr("operator","in").attr("result","offsetBlur");var r=e.append("feMerge");return r.append("feMergeNode").attr("in","offsetBlur"),r.append("feMergeNode").attr("in","SourceGraphic"),e}},{key:"createArc",value:function(){return c.arc().innerRadius(this.innerWidth).outerRadius(this.getRadius())}},{key:"createSliceGroup",value:function(t){return t.append("g").attr("transform","translate("+this.viewboxWidth/2+", "+this.viewboxHeight/2+") rotate("+this.getSliceWidth()/2+")").style("filter","url(#drop-shadow)")}},{key:"createSlices",value:function(t,n){var e=this,r=c.pie().value(100),i=t.selectAll("path").data(r(this.selectedPlaces)).enter().append("g").attr("id",function(t,n){return"slice-"+n});i.append("path").attr("d",n).attr("fill",function(t,n){return e.colorScale(n)}),i.append("text").text(function(t,n){return t.data.name}).attr("class","label").attr("transform",function(t){var e=t.endAngle<Math.PI?t.startAngle/2+t.endAngle/2:t.startAngle/2+t.endAngle/2+Math.PI;return"translate("+n.centroid(t)[0]+","+n.centroid(t)[1]+") rotate(-90) rotate("+180*e/Math.PI+")"}).attr("dy",".35em").attr("text-anchor","middle");return i}},{key:"createInnerCircle",value:function(t,n){return t.append("circle").attr("cx",this.innerWidth).attr("cy",this.innerWidth).attr("r",this.innerWidth).attr("transform","translate("+(this.viewboxWidth/2-this.innerWidth)+", "+(this.viewboxHeight/2-this.innerWidth)+")").style("fill","#444444")}},{key:"createTriangle",value:function(t){return t.append("path").attr("d","M"+(this.viewboxWidth/2-20)+" 10 L"+(this.viewboxWidth/2+20)+" 10 L"+this.viewboxWidth/2+" 30 Z").style("fill","#444444")}},{key:"randomSelection",value:function(){(0,f.clearSelection)();var t=Math.floor(Math.random()*this.selectedPlaces.length),n=Math.floor(t*this.getSliceWidth()),e=this.rotationalOffset+n+720,r=this;c.select("#wheel-container svg g").transition().duration(600).attrTween("transform",function(){return c.interpolateString("translate("+r.viewboxWidth/2+", "+r.viewboxHeight/2+") rotate("+r.rotationalOffset+")","translate("+r.viewboxWidth/2+", "+r.viewboxHeight/2+") rotate("+e+")")}).on("end",function(){r.setRotationalOffset(e);var t=Math.floor(r.selectedPlaces.length-1-(e%360-r.getSliceWidth()/2)/r.getSliceWidth());r.setSelectionIndex(t),r.calloutSelection(t),(0,f.displaySelection)(r.selectedPlaces[t].name)})}},{key:"calloutSelection",value:function(t){var n=c.select("#slice-"+t+" path").attr("fill").toString(),e=(0,a.lightenDarkenColor)(n,30),r=(0,a.lightenDarkenColor)(n,-30);c.select("#slice-"+t+" path").attr("fill",e),setTimeout(function(){c.select("#slice-"+t+" path").attr("fill",r)},300),setTimeout(function(){c.select("#slice-"+t+" path").attr("fill",e)},600),setTimeout(function(){c.select("#slice-"+t+" path").attr("fill",r)},900),setTimeout(function(){c.select("#slice-"+t+" path").attr("fill",n)},1200)}}]),t}()},function(t,n,e){e(47),t.exports=e(466)},function(t,n,e){"use strict";e.d(n,"a",function(){return r});var r="4.10.2"},function(t,n,e){"use strict";var r=e(96);n.a=function(t,n,e){var i,u,c,o,a=t.length,f=n.length,s=new Array(a*f);for(null==e&&(e=r.b),i=c=0;i<a;++i)for(o=t[i],u=0;u<f;++u,++c)s[c]=e(o,n[u]);return s}},function(t,n,e){"use strict";n.a=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}},function(t,n,e){"use strict";var r=e(100),i=e(94),u=e(179),c=e(99),o=e(180),a=e(101),f=e(102),s=e(103);n.a=function(){function t(t){var r,u,c=t.length,o=new Array(c);for(r=0;r<c;++r)o[r]=n(t[r],r,t);var s=e(o),h=s[0],d=s[1],b=l(o,h,d);Array.isArray(b)||(b=Object(f.c)(h,d,b),b=Object(a.a)(Math.ceil(h/b)*b,Math.floor(d/b)*b,b));for(var v=b.length;b[0]<=h;)b.shift(),--v;for(;b[v-1]>d;)b.pop(),--v;var p,g=new Array(v+1);for(r=0;r<=v;++r)p=g[r]=[],p.x0=r>0?b[r-1]:h,p.x1=r<v?b[r]:d;for(r=0;r<c;++r)u=o[r],h<=u&&u<=d&&g[Object(i.c)(b,u,0,v)].push(t[r]);return g}var n=o.a,e=c.a,l=s.a;return t.value=function(e){return arguments.length?(n="function"==typeof e?e:Object(u.a)(e),t):n},t.domain=function(n){return arguments.length?(e="function"==typeof n?n:Object(u.a)([n[0],n[1]]),t):e},t.thresholds=function(n){return arguments.length?(l="function"==typeof n?n:Array.isArray(n)?Object(u.a)(r.b.call(n)):Object(u.a)(n),t):l},t}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";n.a=function(t){return t}},function(t,n,e){"use strict";var r=e(100),i=e(17),u=e(20),c=e(48);n.a=function(t,n,e){return t=r.a.call(t,u.a).sort(i.a),Math.ceil((e-n)/(2*(Object(c.a)(t,.75)-Object(c.a)(t,.25))*Math.pow(t.length,-1/3)))}},function(t,n,e){"use strict";var r=e(97);n.a=function(t,n,e){return Math.ceil((e-n)/(3.5*Object(r.a)(t)*Math.pow(t.length,-1/3)))}},function(t,n,e){"use strict";n.a=function(t,n){var e,r,i=t.length,u=-1;if(null==n){for(;++u<i;)if(null!=(e=t[u])&&e>=e)for(r=e;++u<i;)null!=(e=t[u])&&e>r&&(r=e)}else for(;++u<i;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=e;++u<i;)null!=(e=n(t[u],u,t))&&e>r&&(r=e);return r}},function(t,n,e){"use strict";var r=e(20);n.a=function(t,n){var e,i=t.length,u=i,c=-1,o=0;if(null==n)for(;++c<i;)isNaN(e=Object(r.a)(t[c]))?--u:o+=e;else for(;++c<i;)isNaN(e=Object(r.a)(n(t[c],c,t)))?--u:o+=e;if(u)return o/u}},function(t,n,e){"use strict";var r=e(17),i=e(20),u=e(48);n.a=function(t,n){var e,c=t.length,o=-1,a=[];if(null==n)for(;++o<c;)isNaN(e=Object(i.a)(t[o]))||a.push(e);else for(;++o<c;)isNaN(e=Object(i.a)(n(t[o],o,t)))||a.push(e);return Object(u.a)(a.sort(r.a),.5)}},function(t,n,e){"use strict";n.a=function(t){for(var n,e,r,i=t.length,u=-1,c=0;++u<i;)c+=t[u].length;for(e=new Array(c);--i>=0;)for(r=t[i],n=r.length;--n>=0;)e[--c]=r[n];return e}},function(t,n,e){"use strict";n.a=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r}},function(t,n,e){"use strict";var r=e(17);n.a=function(t,n){if(e=t.length){var e,i,u=0,c=0,o=t[c];for(null==n&&(n=r.a);++u<e;)(n(i=t[u],o)<0||0!==n(o,o))&&(o=i,c=u);return 0===n(o,o)?c:void 0}}},function(t,n,e){"use strict";n.a=function(t,n,e){for(var r,i,u=(null==e?t.length:e)-(n=null==n?0:+n);u;)i=Math.random()*u--|0,r=t[u+n],t[u+n]=t[i+n],t[i+n]=r;return t}},function(t,n,e){"use strict";n.a=function(t,n){var e,r=t.length,i=-1,u=0;if(null==n)for(;++i<r;)(e=+t[i])&&(u+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(u+=e);return u}},function(t,n,e){"use strict";var r=e(105);n.a=function(){return Object(r.a)(arguments)}},function(t,n,e){"use strict";var r=e(193);e.d(n,"d",function(){return r.d}),e.d(n,"c",function(){return r.c}),e.d(n,"a",function(){return r.a}),e.d(n,"b",function(){return r.b})},function(t,n,e){"use strict";function r(t){return"translate("+(t+.5)+",0)"}function i(t){return"translate(0,"+(t+.5)+")"}function u(t){return function(n){return+t(n)}}function c(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function o(){return!this.__axis}function a(t,n){function e(e){var r=null==f?n.ticks?n.ticks.apply(n,a):n.domain():f,i=null==s?n.tickFormat?n.tickFormat.apply(n,a):b.a:s,d=Math.max(l,0)+m,w=n.range(),M=+w[0]+.5,k=+w[w.length-1]+.5,S=(n.bandwidth?c:u)(n.copy()),T=e.selection?e.selection():e,E=T.selectAll(".domain").data([null]),A=T.selectAll(".tick").data(r,n).order(),N=A.exit(),C=A.enter().append("g").attr("class","tick"),P=A.select("line"),z=A.select("text");E=E.merge(E.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),A=A.merge(C),P=P.merge(C.append("line").attr("stroke","#000").attr(j+"2",O*l)),z=z.merge(C.append("text").attr("fill","#000").attr(j,O*d).attr("dy",t===v?"0em":t===g?"0.71em":"0.32em")),e!==T&&(E=E.transition(e),A=A.transition(e),P=P.transition(e),z=z.transition(e),N=N.transition(e).attr("opacity",_).attr("transform",function(t){return isFinite(t=S(t))?x(t):this.getAttribute("transform")}),C.attr("opacity",_).attr("transform",function(t){var n=this.parentNode.__axis;return x(n&&isFinite(n=n(t))?n:S(t))})),N.remove(),E.attr("d",t===y||t==p?"M"+O*h+","+M+"H0.5V"+k+"H"+O*h:"M"+M+","+O*h+"V0.5H"+k+"V"+O*h),A.attr("opacity",1).attr("transform",function(t){return x(S(t))}),P.attr(j+"2",O*l),z.attr(j,O*d).text(i),T.filter(o).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===p?"start":t===y?"end":"middle"),T.each(function(){this.__axis=S})}var a=[],f=null,s=null,l=6,h=6,m=3,O=t===v||t===y?-1:1,j=t===y||t===p?"x":"y",x=t===v||t===g?r:i;return e.scale=function(t){return arguments.length?(n=t,e):n},e.ticks=function(){return a=d.a.call(arguments),e},e.tickArguments=function(t){return arguments.length?(a=null==t?[]:d.a.call(t),e):a.slice()},e.tickValues=function(t){return arguments.length?(f=null==t?null:d.a.call(t),e):f&&f.slice()},e.tickFormat=function(t){return arguments.length?(s=t,e):s},e.tickSize=function(t){return arguments.length?(l=h=+t,e):l},e.tickSizeInner=function(t){return arguments.length?(l=+t,e):l},e.tickSizeOuter=function(t){return arguments.length?(h=+t,e):h},e.tickPadding=function(t){return arguments.length?(m=+t,e):m},e}function f(t){return a(v,t)}function s(t){return a(p,t)}function l(t){return a(g,t)}function h(t){return a(y,t)}n.d=f,n.c=s,n.a=l,n.b=h;var d=e(194),b=e(195),v=1,p=2,g=3,y=4,_=1e-6},function(t,n,e){"use strict";e.d(n,"a",function(){return r});var r=Array.prototype.slice},function(t,n,e){"use strict";n.a=function(t){return t}},function(t,n,e){"use strict";var r=e(197);e.d(n,"a",function(){return r.d}),e.d(n,"c",function(){return r.b}),e.d(n,"d",function(){return r.c}),e.d(n,"b",function(){return r.a})},function(t,n,e){"use strict";function r(t){return{type:t}}function i(){return!v.c.button}function u(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function c(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function o(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function a(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function f(){return l(w)}function s(){return l(M)}function l(t){function n(n){var i=n.property("__brush",l).selectAll(".overlay").data([r("overlay")]);i.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",S.overlay).merge(i).each(function(){var t=c(this).extent;Object(v.i)(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),n.selectAll(".selection").data([r("selection")]).enter().append("rect").attr("class","selection").attr("cursor",S.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var u=n.selectAll(".handle").data(t.handles,function(t){return t.type});u.exit().remove(),u.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return S[t.type]}),n.each(e).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",s)}function e(){var t=Object(v.i)(this),n=c(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-L/2:n[0][0]-L/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-L/2:n[0][1]-L/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+L:L}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+L:L})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function a(t,n){return t.__brush.emitter||new f(t,n)}function f(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function s(){function n(){var t=Object(v.f)(B);!K||I||D||(Math.abs(t[0]-tt[0])>Math.abs(t[1]-tt[1])?D=!0:I=!0),tt=t,q=!0,Object(_.a)(),r()}function r(){var t;switch(L=tt[0]-Q[0],R=tt[1]-Q[1],F){case O:case m:H&&(L=Math.max(G-s,Math.min($-g,L)),l=s+L,y=g+L),Y&&(R=Math.max(Z-h,Math.min(J-C,R)),b=h+R,z=C+R);break;case j:H<0?(L=Math.max(G-s,Math.min($-s,L)),l=s+L,y=g):H>0&&(L=Math.max(G-g,Math.min($-g,L)),l=s,y=g+L),Y<0?(R=Math.max(Z-h,Math.min(J-h,R)),b=h+R,z=C):Y>0&&(R=Math.max(Z-C,Math.min(J-C,R)),b=h,z=C+R);break;case x:H&&(l=Math.max(G,Math.min($,s-L*H)),y=Math.max(G,Math.min($,g+L*H))),Y&&(b=Math.max(Z,Math.min(J,h-R*Y)),z=Math.max(Z,Math.min(J,C+R*Y)))}y<l&&(H*=-1,t=s,s=g,g=t,t=l,l=y,y=t,U in T&&rt.attr("cursor",S[U=T[U]])),z<b&&(Y*=-1,t=h,h=C,C=t,t=b,b=z,z=t,U in E&&rt.attr("cursor",S[U=E[U]])),X.selection&&(V=X.selection),I&&(l=V[0][0],y=V[1][0]),D&&(b=V[0][1],z=V[1][1]),V[0][0]===l&&V[0][1]===b&&V[1][0]===y&&V[1][1]===z||(X.selection=[[l,b],[y,z]],e.call(B),nt.brush())}function i(){if(Object(_.b)(),v.c.touches){if(v.c.touches.length)return;k&&clearTimeout(k),k=setTimeout(function(){k=null},500),et.on("touchmove.brush touchend.brush touchcancel.brush",null)}else Object(d.c)(v.c.view,q),it.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);et.attr("pointer-events","all"),rt.attr("cursor",S.overlay),X.selection&&(V=X.selection),o(V)&&(X.selection=null,e.call(B)),nt.end()}function u(){switch(v.c.keyCode){case 16:K=H&&Y;break;case 18:F===j&&(H&&(g=y-L*H,s=l+L*H),Y&&(C=z-R*Y,h=b+R*Y),F=x,r());break;case 32:F!==j&&F!==x||(H<0?g=y-L:H>0&&(s=l-L),Y<0?C=z-R:Y>0&&(h=b-R),F=O,rt.attr("cursor",S.selection),r());break;default:return}Object(_.a)()}function f(){switch(v.c.keyCode){case 16:K&&(I=D=K=!1,r());break;case 18:F===x&&(H<0?g=y:H>0&&(s=l),Y<0?C=z:Y>0&&(h=b),F=j,r());break;case 32:F===O&&(v.c.altKey?(H&&(g=y-L*H,s=l+L*H),Y&&(C=z-R*Y,h=b+R*Y),F=x):(H<0?g=y:H>0&&(s=l),Y<0?C=z:Y>0&&(h=b),F=j),rt.attr("cursor",S[U]),r());break;default:return}Object(_.a)()}if(v.c.touches){if(v.c.changedTouches.length<v.c.touches.length)return Object(_.a)()}else if(k)return;if(P.apply(this,arguments)){var s,l,h,b,g,y,C,z,L,R,q,I,D,B=this,U=v.c.target.__data__.type,F="selection"===(v.c.metaKey?U="overlay":U)?m:v.c.altKey?x:j,H=t===M?null:A[U],Y=t===w?null:N[U],X=c(B),W=X.extent,V=X.selection,G=W[0][0],Z=W[0][1],$=W[1][0],J=W[1][1],K=H&&Y&&v.c.shiftKey,Q=Object(v.f)(B),tt=Q,nt=a(B,arguments).beforestart();"overlay"===U?X.selection=V=[[s=t===M?G:Q[0],h=t===w?Z:Q[1]],[g=t===M?$:s,C=t===w?J:h]]:(s=V[0][0],h=V[0][1],g=V[1][0],C=V[1][1]),l=s,b=h,y=g,z=C;var et=Object(v.i)(B).attr("pointer-events","none"),rt=et.selectAll(".overlay").attr("cursor",S[U]);if(v.c.touches)et.on("touchmove.brush",n,!0).on("touchend.brush touchcancel.brush",i,!0);else{var it=Object(v.i)(v.c.view).on("keydown.brush",u,!0).on("keyup.brush",f,!0).on("mousemove.brush",n,!0).on("mouseup.brush",i,!0);Object(d.b)(v.c.view)}Object(_.b)(),Object(p.b)(B),e.call(B),nt.start()}}function l(){var n=this.__brush||{selection:null};return n.extent=C.apply(this,arguments),n.dim=t,n}var k,C=u,P=i,z=Object(h.a)(n,"start","brush","end"),L=6;return n.move=function(n,r){n.selection?n.on("start.brush",function(){a(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){a(this,arguments).end()}).tween("brush",function(){function n(t){u.selection=1===t&&o(s)?null:l(t),e.call(i),c.brush()}var i=this,u=i.__brush,c=a(i,arguments),f=u.selection,s=t.input("function"==typeof r?r.apply(this,arguments):r,u.extent),l=Object(b.a)(f,s);return f&&s?n:n(1)}):n.each(function(){var n=this,i=arguments,u=n.__brush,c=t.input("function"==typeof r?r.apply(n,i):r,u.extent),f=a(n,i).beforestart();Object(p.b)(n),u.selection=null==c||o(c)?null:c,e.call(n),f.start().brush().end()})},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){Object(v.b)(new y.a(n,e,t.output(this.state.selection)),z.apply,z,[e,this.that,this.args])}},n.extent=function(t){return arguments.length?(C="function"==typeof t?t:Object(g.a)([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),n):C},n.filter=function(t){return arguments.length?(P="function"==typeof t?t:Object(g.a)(!!t),n):P},n.handleSize=function(t){return arguments.length?(L=+t,n):L},n.on=function(){var t=z.on.apply(z,arguments);return t===z?n:t},n}n.a=a,n.b=f,n.c=s;var h=e(12),d=e(49),b=e(5),v=e(1),p=e(62),g=e(279),y=e(280),_=e(281),m={name:"drag"},O={name:"space"},j={name:"handle"},x={name:"center"},w={name:"x",handles:["e","w"].map(r),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},M={name:"y",handles:["n","s"].map(r),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},k={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(r),input:function(t){return t},output:function(t){return t}},S={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},T={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},E={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},A={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},N={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};n.d=function(){return l(k)}},function(t,n,e){"use strict";function r(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new i(r)}function i(t){this._=t}function u(t,n){return t.trim().split(/^|\s+/).map(function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})}function c(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function o(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=a,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}var a={value:function(){}};i.prototype=r.prototype={constructor:i,on:function(t,n){var e,r=this._,i=u(t+"",r),a=-1,f=i.length;{if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<f;)if(e=(t=i[a]).type)r[e]=o(r[e],t.name,n);else if(null==n)for(e in r)r[e]=o(r[e],t.name,null);return this}for(;++a<f;)if((e=(t=i[a]).type)&&(e=c(r[e],t.name)))return e}},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new i(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),u=0;u<e;++u)i[u]=arguments[u+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(r=this._[t],u=0,e=r.length;u<e;++u)r[u].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,u=r.length;i<u;++i)r[i].value.apply(n,e)}},n.a=r},function(t,n,e){"use strict";function r(){return!a.c.button}function i(){return this.parentNode}function u(t){return null==t?{x:a.c.x,y:a.c.y}:t}function c(){return"ontouchstart"in this}var o=e(12),a=e(1),f=e(111),s=e(112),l=e(233),h=e(234);n.a=function(){function t(t){t.on("mousedown.drag",n).filter(c).on("touchstart.drag",b).on("touchmove.drag",v).on("touchend.drag touchcancel.drag",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function n(){if(!O&&j.apply(this,arguments)){var t=g("mouse",x.apply(this,arguments),a.f,this,arguments);t&&(Object(a.i)(a.c.view).on("mousemove.drag",e,!0).on("mouseup.drag",d,!0),Object(f.a)(a.c.view),Object(s.b)(),m=!1,y=a.c.clientX,_=a.c.clientY,t("start"))}}function e(){if(Object(s.a)(),!m){var t=a.c.clientX-y,n=a.c.clientY-_;m=t*t+n*n>T}M.mouse("drag")}function d(){Object(a.i)(a.c.view).on("mousemove.drag mouseup.drag",null),Object(f.b)(a.c.view,m),Object(s.a)(),M.mouse("end")}function b(){if(j.apply(this,arguments)){var t,n,e=a.c.changedTouches,r=x.apply(this,arguments),i=e.length;for(t=0;t<i;++t)(n=g(e[t].identifier,r,a.o,this,arguments))&&(Object(s.b)(),n("start"))}}function v(){var t,n,e=a.c.changedTouches,r=e.length;for(t=0;t<r;++t)(n=M[e[t].identifier])&&(Object(s.a)(),n("drag"))}function p(){var t,n,e=a.c.changedTouches,r=e.length;for(O&&clearTimeout(O),O=setTimeout(function(){O=null},500),t=0;t<r;++t)(n=M[e[t].identifier])&&(Object(s.b)(),n("end"))}function g(n,e,r,i,u){var c,o,f,s=r(e,n),l=k.copy();if(Object(a.b)(new h.a(t,"beforestart",c,n,S,s[0],s[1],0,0,l),function(){return null!=(a.c.subject=c=w.apply(i,u))&&(o=c.x-s[0]||0,f=c.y-s[1]||0,!0)}))return function d(b){var v,p=s;switch(b){case"start":M[n]=d,v=S++;break;case"end":delete M[n],--S;case"drag":s=r(e,n),v=S}Object(a.b)(new h.a(t,b,c,n,v,s[0]+o,s[1]+f,s[0]-p[0],s[1]-p[1],l),l.apply,l,[b,i,u])}}var y,_,m,O,j=r,x=i,w=u,M={},k=Object(o.a)("start","drag","end"),S=0,T=0;return t.filter=function(n){return arguments.length?(j="function"==typeof n?n:Object(l.a)(!!n),t):j},t.container=function(n){return arguments.length?(x="function"==typeof n?n:Object(l.a)(n),t):x},t.subject=function(n){return arguments.length?(w="function"==typeof n?n:Object(l.a)(n),t):w},t.on=function(){var n=k.on.apply(k,arguments);return n===k?t:n},t.clickDistance=function(n){return arguments.length?(T=(n=+n)*n,t):Math.sqrt(T)},t}},function(t,n,e){"use strict";function r(){return new i}function i(){this._="@"+(++u).toString(36)}n.a=r;var u=0;i.prototype=r.prototype={constructor:i,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}}},function(t,n,e){"use strict";var r=e(53),i=e(55);n.a=function(t){var n=Object(r.a)();return n.changedTouches&&(n=n.changedTouches[0]),Object(i.a)(t,n)}},function(t,n,e){"use strict";var r=e(4);n.a=function(t){return"string"==typeof t?new r.a([[document.querySelector(t)]],[document.documentElement]):new r.a([[t]],r.c)}},function(t,n,e){"use strict";var r=e(4),i=e(56);n.a=function(t){"function"!=typeof t&&(t=Object(i.a)(t));for(var n=this._groups,e=n.length,u=new Array(e),c=0;c<e;++c)for(var o,a,f=n[c],s=f.length,l=u[c]=new Array(s),h=0;h<s;++h)(o=f[h])&&(a=t.call(o,o.__data__,h,f))&&("__data__"in o&&(a.__data__=o.__data__),l[h]=a);return new r.a(u,this._parents)}},function(t,n,e){"use strict";var r=e(4),i=e(107);n.a=function(t){"function"!=typeof t&&(t=Object(i.a)(t));for(var n=this._groups,e=n.length,u=[],c=[],o=0;o<e;++o)for(var a,f=n[o],s=f.length,l=0;l<s;++l)(a=f[l])&&(u.push(t.call(a,a.__data__,l,f)),c.push(a));return new r.a(u,c)}},function(t,n,e){"use strict";var r=e(4),i=e(106);n.a=function(t){"function"!=typeof t&&(t=Object(i.a)(t));for(var n=this._groups,e=n.length,u=new Array(e),c=0;c<e;++c)for(var o,a=n[c],f=a.length,s=u[c]=[],l=0;l<f;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new r.a(u,this._parents)}},function(t,n,e){"use strict";function r(t,n,e,r,i,u){for(var o,a=0,f=n.length,s=u.length;a<s;++a)(o=n[a])?(o.__data__=u[a],r[a]=o):e[a]=new c.a(t,u[a]);for(;a<f;++a)(o=n[a])&&(i[a]=o)}function i(t,n,e,r,i,u,o){var f,s,l,h={},d=n.length,b=u.length,v=new Array(d);for(f=0;f<d;++f)(s=n[f])&&(v[f]=l=a+o.call(s,s.__data__,f,n),l in h?i[f]=s:h[l]=s);for(f=0;f<b;++f)l=a+o.call(t,u[f],f,u),(s=h[l])?(r[f]=s,s.__data__=u[f],h[l]=null):e[f]=new c.a(t,u[f]);for(f=0;f<d;++f)(s=n[f])&&h[v[f]]===s&&(i[f]=s)}var u=e(4),c=e(108),o=e(207),a="$";n.a=function(t,n){if(!t)return g=new Array(this.size()),d=-1,this.each(function(t){g[++d]=t}),g;var e=n?i:r,c=this._parents,a=this._groups;"function"!=typeof t&&(t=Object(o.a)(t));for(var f=a.length,s=new Array(f),l=new Array(f),h=new Array(f),d=0;d<f;++d){var b=c[d],v=a[d],p=v.length,g=t.call(b,b&&b.__data__,d,c),y=g.length,_=l[d]=new Array(y),m=s[d]=new Array(y);e(b,v,_,m,h[d]=new Array(p),g,n);for(var O,j,x=0,w=0;x<y;++x)if(O=_[x]){for(x>=w&&(w=x+1);!(j=m[w])&&++w<y;);O._next=j||null}}return s=new u.a(s,c),s._enter=l,s._exit=h,s}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";var r=e(109),i=e(4);n.a=function(){return new i.a(this._exit||this._groups.map(r.a),this._parents)}},function(t,n,e){"use strict";var r=e(4);n.a=function(t){for(var n=this._groups,e=t._groups,i=n.length,u=e.length,c=Math.min(i,u),o=new Array(i),a=0;a<c;++a)for(var f,s=n[a],l=e[a],h=s.length,d=o[a]=new Array(h),b=0;b<h;++b)(f=s[b]||l[b])&&(d[b]=f);for(;a<i;++a)o[a]=n[a];return new r.a(o,this._parents)}},function(t,n,e){"use strict";n.a=function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],u=i.length-1,c=i[u];--u>=0;)(r=i[u])&&(c&&c!==r.nextSibling&&c.parentNode.insertBefore(r,c),c=r);return this}},function(t,n,e){"use strict";function r(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var i=e(4);n.a=function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=r);for(var e=this._groups,u=e.length,c=new Array(u),o=0;o<u;++o){for(var a,f=e[o],s=f.length,l=c[o]=new Array(s),h=0;h<s;++h)(a=f[h])&&(l[h]=a);l.sort(n)}return new i.a(c,this._parents).order()}},function(t,n,e){"use strict";n.a=function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this}},function(t,n,e){"use strict";n.a=function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t}},function(t,n,e){"use strict";n.a=function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,u=r.length;i<u;++i){var c=r[i];if(c)return c}return null}},function(t,n,e){"use strict";n.a=function(){var t=0;return this.each(function(){++t}),t}},function(t,n,e){"use strict";n.a=function(){return!this.node()}},function(t,n,e){"use strict";n.a=function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,u=n[e],c=0,o=u.length;c<o;++c)(i=u[c])&&t.call(i,i.__data__,c,u);return this}},function(t,n,e){"use strict";function r(t){return function(){this.removeAttribute(t)}}function i(t){return function(){this.removeAttributeNS(t.space,t.local)}}function u(t,n){return function(){this.setAttribute(t,n)}}function c(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function o(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function a(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var f=e(51);n.a=function(t,n){var e=Object(f.a)(t);if(arguments.length<2){var s=this.node();return e.local?s.getAttributeNS(e.space,e.local):s.getAttribute(e)}return this.each((null==n?e.local?i:r:"function"==typeof n?e.local?a:o:e.local?c:u)(e,n))}},function(t,n,e){"use strict";function r(t){return function(){delete this[t]}}function i(t,n){return function(){this[t]=n}}function u(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}n.a=function(t,n){return arguments.length>1?this.each((null==n?r:"function"==typeof n?u:i)(t,n)):this.node()[t]}},function(t,n,e){"use strict";function r(t){return t.trim().split(/^|\s+/)}function i(t){return t.classList||new u(t)}function u(t){this._node=t,this._names=r(t.getAttribute("class")||"")}function c(t,n){for(var e=i(t),r=-1,u=n.length;++r<u;)e.add(n[r])}function o(t,n){for(var e=i(t),r=-1,u=n.length;++r<u;)e.remove(n[r])}function a(t){return function(){c(this,t)}}function f(t){return function(){o(this,t)}}function s(t,n){return function(){(n.apply(this,arguments)?c:o)(this,t)}}u.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}},n.a=function(t,n){var e=r(t+"");if(arguments.length<2){for(var u=i(this.node()),c=-1,o=e.length;++c<o;)if(!u.contains(e[c]))return!1;return!0}return this.each(("function"==typeof n?s:n?a:f)(e,n))}},function(t,n,e){"use strict";function r(){this.textContent=""}function i(t){return function(){this.textContent=t}}function u(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}n.a=function(t){return arguments.length?this.each(null==t?r:("function"==typeof t?u:i)(t)):this.node().textContent}},function(t,n,e){"use strict";function r(){this.innerHTML=""}function i(t){return function(){this.innerHTML=t}}function u(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}n.a=function(t){return arguments.length?this.each(null==t?r:("function"==typeof t?u:i)(t)):this.node().innerHTML}},function(t,n,e){"use strict";function r(){this.nextSibling&&this.parentNode.appendChild(this)}n.a=function(){return this.each(r)}},function(t,n,e){"use strict";function r(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}n.a=function(){return this.each(r)}},function(t,n,e){"use strict";var r=e(50);n.a=function(t){var n="function"==typeof t?t:Object(r.a)(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})}},function(t,n,e){"use strict";function r(){return null}var i=e(50),u=e(56);n.a=function(t,n){var e="function"==typeof t?t:Object(i.a)(t),c=null==n?r:"function"==typeof n?n:Object(u.a)(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),c.apply(this,arguments)||null)})}},function(t,n,e){"use strict";function r(){var t=this.parentNode;t&&t.removeChild(this)}n.a=function(){return this.each(r)}},function(t,n,e){"use strict";n.a=function(t){return arguments.length?this.property("__data__",t):this.node().__data__}},function(t,n,e){"use strict";function r(t,n,e){var r=Object(c.a)(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function i(t,n){return function(){return r(this,t,n)}}function u(t,n){return function(){return r(this,t,n.apply(this,arguments))}}var c=e(57);n.a=function(t,n){return this.each(("function"==typeof n?u:i)(t,n))}},function(t,n,e){"use strict";var r=e(4);n.a=function(t){return"string"==typeof t?new r.a([document.querySelectorAll(t)],[document.documentElement]):new r.a([null==t?[]:t],r.c)}},function(t,n,e){"use strict";var r=e(53),i=e(55);n.a=function(t,n,e){arguments.length<3&&(e=n,n=Object(r.a)().changedTouches);for(var u,c=0,o=n?n.length:0;c<o;++c)if((u=n[c]).identifier===e)return Object(i.a)(t,u);return null}},function(t,n,e){"use strict";var r=e(53),i=e(55);n.a=function(t,n){null==n&&(n=Object(r.a)().touches);for(var e=0,u=n?n.length:0,c=new Array(u);e<u;++e)c[e]=Object(i.a)(t,n[e]);return c}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";function r(t,n,e,r,i,u,c,o,a,f){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=u,this.y=c,this.dx=o,this.dy=a,this._=f}n.a=r,r.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t}},function(t,n,e){"use strict";function r(t){if(t instanceof u)return new u(t.l,t.a,t.b,t.opacity);if(t instanceof h){var n=t.h*v.a;return new u(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof b.b||(t=Object(b.h)(t));var e=f(t.r),r=f(t.g),i=f(t.b),o=c((.4124564*e+.3575761*r+.1804375*i)/p),a=c((.2126729*e+.7151522*r+.072175*i)/g);return new u(116*a-16,500*(o-a),200*(a-c((.0193339*e+.119192*r+.9503041*i)/y)),t.opacity)}function i(t,n,e,i){return 1===arguments.length?r(t):new u(t,n,e,null==i?1:i)}function u(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function c(t){return t>j?Math.pow(t,1/3):t/O+_}function o(t){return t>m?t*t*t:O*(t-_)}function a(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function f(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function s(t){if(t instanceof h)return new h(t.h,t.c,t.l,t.opacity);t instanceof u||(t=r(t));var n=Math.atan2(t.b,t.a)*v.b;return new h(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function l(t,n,e,r){return 1===arguments.length?s(t):new h(t,n,e,null==r?1:r)}function h(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}n.a=i,n.b=l;var d=e(60),b=e(59),v=e(113),p=.95047,g=1,y=1.08883,_=4/29,m=6/29,O=3*m*m,j=m*m*m;Object(d.a)(u,i,Object(d.b)(b.a,{brighter:function(t){return new u(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new u(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=g*o(t),n=p*o(n),e=y*o(e),new b.b(a(3.2404542*n-1.5371385*t-.4985314*e),a(-.969266*n+1.8760108*t+.041556*e),a(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),Object(d.a)(h,l,Object(d.b)(b.a,{brighter:function(t){return new h(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new h(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return r(this).rgb()}}))},function(t,n,e){"use strict";function r(t){if(t instanceof u)return new u(t.h,t.s,t.l,t.opacity);t instanceof o.b||(t=Object(o.h)(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(p*r+b*n-v*e)/(p+b-v),c=r-i,f=(d*(e-i)-l*c)/h,s=Math.sqrt(f*f+c*c)/(d*i*(1-i)),g=s?Math.atan2(f,c)*a.b-120:NaN;return new u(g<0?g+360:g,s,i,t.opacity)}function i(t,n,e,i){return 1===arguments.length?r(t):new u(t,n,e,null==i?1:i)}function u(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}n.a=i;var c=e(60),o=e(59),a=e(113),f=-.14861,s=1.78277,l=-.29227,h=-.90649,d=1.97294,b=d*h,v=d*s,p=s*l-h*f;Object(c.a)(u,i,Object(c.b)(o.a,{brighter:function(t){return t=null==t?o.c:Math.pow(o.c,t),new u(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?o.d:Math.pow(o.d,t),new u(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*a.a,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new o.b(255*(n+e*(f*r+s*i)),255*(n+e*(l*r+h*i)),255*(n+e*(d*r)),this.opacity)}}))},function(t,n,e){"use strict";n.a=function(t,n){return t=+t,n-=t,function(e){return Math.round(t+n*e)}}},function(t,n,e){"use strict";function r(t,n,e,r){function u(t){return t.length?t.pop()+" ":""}function c(t,r,u,c,o,a){if(t!==u||r!==c){var f=o.push("translate(",null,n,null,e);a.push({i:f-4,x:Object(i.a)(t,u)},{i:f-2,x:Object(i.a)(r,c)})}else(u||c)&&o.push("translate("+u+n+c+e)}function o(t,n,e,c){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),c.push({i:e.push(u(e)+"rotate(",null,r)-2,x:Object(i.a)(t,n)})):n&&e.push(u(e)+"rotate("+n+r)}function a(t,n,e,c){t!==n?c.push({i:e.push(u(e)+"skewX(",null,r)-2,x:Object(i.a)(t,n)}):n&&e.push(u(e)+"skewX("+n+r)}function f(t,n,e,r,c,o){if(t!==e||n!==r){var a=c.push(u(c)+"scale(",null,",",null,")");o.push({i:a-4,x:Object(i.a)(t,e)},{i:a-2,x:Object(i.a)(n,r)})}else 1===e&&1===r||c.push(u(c)+"scale("+e+","+r+")")}return function(n,e){var r=[],i=[];return n=t(n),e=t(e),c(n.translateX,n.translateY,e.translateX,e.translateY,r,i),o(n.rotate,e.rotate,r,i),a(n.skewX,e.skewX,r,i),f(n.scaleX,n.scaleY,e.scaleX,e.scaleY,r,i),n=e=null,function(t){for(var n,e=-1,u=i.length;++e<u;)r[(n=i[e]).i]=n.x(t);return r.join("")}}}e.d(n,"a",function(){return c}),e.d(n,"b",function(){return o});var i=e(33),u=e(239),c=r(u.a,"px, ","px)","deg)"),o=r(u.b,", ",")",")")},function(t,n,e){"use strict";function r(t){return"none"===t?f.b:(u||(u=document.createElement("DIV"),c=document.documentElement,o=document.defaultView),u.style.transform=t,t=o.getComputedStyle(c.appendChild(u),null).getPropertyValue("transform"),c.removeChild(u),t=t.slice(7,-1).split(","),Object(f.a)(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}function i(t){return null==t?f.b:(a||(a=document.createElementNS("http://www.w3.org/2000/svg","g")),a.setAttribute("transform",t),(t=a.transform.baseVal.consolidate())?(t=t.matrix,Object(f.a)(t.a,t.b,t.c,t.d,t.e,t.f)):f.b)}n.a=r,n.b=i;var u,c,o,a,f=e(240)},function(t,n,e){"use strict";e.d(n,"b",function(){return i});var r=180/Math.PI,i={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};n.a=function(t,n,e,i,u,c){var o,a,f;return(o=Math.sqrt(t*t+n*n))&&(t/=o,n/=o),(f=t*e+n*i)&&(e-=t*f,i-=n*f),(a=Math.sqrt(e*e+i*i))&&(e/=a,i/=a,f/=a),t*i<n*e&&(t=-t,n=-n,f=-f,o=-o),{translateX:u,translateY:c,rotate:Math.atan2(n,t)*r,skewX:Math.atan(f)*r,scaleX:o,scaleY:a}}},function(t,n,e){"use strict";function r(t){return((t=Math.exp(t))+1/t)/2}function i(t){return((t=Math.exp(t))-1/t)/2}function u(t){return((t=Math.exp(2*t))-1)/(t+1)}var c=Math.SQRT2;n.a=function(t,n){var e,o,a=t[0],f=t[1],s=t[2],l=n[0],h=n[1],d=n[2],b=l-a,v=h-f,p=b*b+v*v;if(p<1e-12)o=Math.log(d/s)/c,e=function(t){return[a+t*b,f+t*v,s*Math.exp(c*t*o)]};else{var g=Math.sqrt(p),y=(d*d-s*s+4*p)/(2*s*2*g),_=(d*d-s*s-4*p)/(2*d*2*g),m=Math.log(Math.sqrt(y*y+1)-y),O=Math.log(Math.sqrt(_*_+1)-_);o=(O-m)/c,e=function(t){var n=t*o,e=r(m),l=s/(2*g)*(e*u(c*n+m)-i(m));return[a+l*b,f+l*v,s*e/r(c*n+m)]}}return e.duration=1e3*o,e}},function(t,n,e){"use strict";function r(t){return function(n,e){var r=t((n=Object(i.d)(n)).h,(e=Object(i.d)(e)).h),c=Object(u.a)(n.s,e.s),o=Object(u.a)(n.l,e.l),a=Object(u.a)(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=c(t),n.l=o(t),n.opacity=a(t),n+""}}}e.d(n,"b",function(){return c});var i=e(7),u=e(21);n.a=r(u.c);var c=r(u.a)},function(t,n,e){"use strict";function r(t,n){var e=Object(u.a)((t=Object(i.e)(t)).l,(n=Object(i.e)(n)).l),r=Object(u.a)(t.a,n.a),c=Object(u.a)(t.b,n.b),o=Object(u.a)(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=r(n),t.b=c(n),t.opacity=o(n),t+""}}n.a=r;var i=e(7),u=e(21)},function(t,n,e){"use strict";function r(t){return function(n,e){var r=t((n=Object(i.c)(n)).h,(e=Object(i.c)(e)).h),c=Object(u.a)(n.c,e.c),o=Object(u.a)(n.l,e.l),a=Object(u.a)(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=c(t),n.l=o(t),n.opacity=a(t),n+""}}}e.d(n,"b",function(){return c});var i=e(7),u=e(21);n.a=r(u.c);var c=r(u.a)},function(t,n,e){"use strict";function r(t){return function n(e){function r(n,r){var c=t((n=Object(i.b)(n)).h,(r=Object(i.b)(r)).h),o=Object(u.a)(n.s,r.s),a=Object(u.a)(n.l,r.l),f=Object(u.a)(n.opacity,r.opacity);return function(t){return n.h=c(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=f(t),n+""}}return e=+e,r.gamma=n,r}(1)}e.d(n,"a",function(){return c});var i=e(7),u=e(21);n.b=r(u.c);var c=r(u.a)},function(t,n,e){"use strict";n.a=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e}},function(t,n,e){"use strict";var r=e(1),i=e(248),u=e(251);r.k.prototype.interrupt=i.a,r.k.prototype.transition=u.a},function(t,n,e){"use strict";var r=e(121);n.a=function(t){return this.each(function(){Object(r.a)(this,t)})}},function(t,n,e){"use strict";var r=e(63);n.a=function(t,n,e){var i=new r.a;return n=null==n?0:+n,i.restart(function(e){i.stop(),t(e+n)},n,e),i}},function(t,n,e){"use strict";var r=e(63);n.a=function(t,n,e){var i=new r.a,u=n;return null==n?(i.restart(t,n,e),i):(n=+n,e=null==e?Object(r.b)():+e,i.restart(function r(c){c+=u,i.restart(r,u+=n,e),t(c)},n,e),i)}},function(t,n,e){"use strict";function r(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return a.time=Object(o.b)(),a;return e}var i=e(10),u=e(6),c=e(123),o=e(34),a={time:null,delay:0,duration:250,ease:c.o};n.a=function(t){var n,e;t instanceof i.a?(n=t._id,t=t._name):(n=Object(i.c)(),(e=a).time=Object(o.b)(),t=null==t?null:t+"");for(var c=this._groups,f=c.length,s=0;s<f;++s)for(var l,h=c[s],d=h.length,b=0;b<d;++b)(l=h[b])&&Object(u.e)(l,t,n,b,h,e||r(l,n));return new i.a(c,this._parents,t,n)}},function(t,n,e){"use strict";function r(t){return function(){this.removeAttribute(t)}}function i(t){return function(){this.removeAttributeNS(t.space,t.local)}}function u(t,n,e){var r,i;return function(){var u=this.getAttribute(t);return u===e?null:u===r?i:i=n(r=u,e)}}function c(t,n,e){var r,i;return function(){var u=this.getAttributeNS(t.space,t.local);return u===e?null:u===r?i:i=n(r=u,e)}}function o(t,n,e){var r,i,u;return function(){var c,o=e(this);return null==o?void this.removeAttribute(t):(c=this.getAttribute(t),c===o?null:c===r&&o===i?u:u=n(r=c,i=o))}}function a(t,n,e){var r,i,u;return function(){var c,o=e(this);return null==o?void this.removeAttributeNS(t.space,t.local):(c=this.getAttributeNS(t.space,t.local),c===o?null:c===r&&o===i?u:u=n(r=c,i=o))}}var f=e(5),s=e(1),l=e(35),h=e(122);n.a=function(t,n){var e=Object(s.g)(t),d="transform"===e?f.u:h.a;return this.attrTween(t,"function"==typeof n?(e.local?a:o)(e,d,Object(l.b)(this,"attr."+t,n)):null==n?(e.local?i:r)(e):(e.local?c:u)(e,d,n+""))}},function(t,n,e){"use strict";function r(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}function i(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e}var u=e(1);n.a=function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var c=Object(u.g)(t);return this.tween(e,(c.local?r:i)(c,n))}},function(t,n,e){"use strict";function r(t,n){return function(){Object(u.g)(this,t).delay=+n.apply(this,arguments)}}function i(t,n){return n=+n,function(){Object(u.g)(this,t).delay=n}}var u=e(6);n.a=function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?r:i)(n,t)):Object(u.f)(this.node(),n).delay}},function(t,n,e){"use strict";function r(t,n){return function(){Object(u.h)(this,t).duration=+n.apply(this,arguments)}}function i(t,n){return n=+n,function(){Object(u.h)(this,t).duration=n}}var u=e(6);n.a=function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?r:i)(n,t)):Object(u.f)(this.node(),n).duration}},function(t,n,e){"use strict";function r(t,n){if("function"!=typeof n)throw new Error;return function(){Object(i.h)(this,t).ease=n}}var i=e(6);n.a=function(t){var n=this._id;return arguments.length?this.each(r(n,t)):Object(i.f)(this.node(),n).ease}},function(t,n,e){"use strict";var r=e(1),i=e(10);n.a=function(t){"function"!=typeof t&&(t=Object(r.e)(t));for(var n=this._groups,e=n.length,u=new Array(e),c=0;c<e;++c)for(var o,a=n[c],f=a.length,s=u[c]=[],l=0;l<f;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&s.push(o);return new i.a(u,this._parents,this._name,this._id)}},function(t,n,e){"use strict";var r=e(10);n.a=function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,i=n.length,u=e.length,c=Math.min(i,u),o=new Array(i),a=0;a<c;++a)for(var f,s=n[a],l=e[a],h=s.length,d=o[a]=new Array(h),b=0;b<h;++b)(f=s[b]||l[b])&&(d[b]=f);for(;a<i;++a)o[a]=n[a];return new r.a(o,this._parents,this._name,this._id)}},function(t,n,e){"use strict";function r(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}function i(t,n,e){var i,c,o=r(n)?u.g:u.h;return function(){var r=o(this,t),u=r.on;u!==i&&(c=(i=u).copy()).on(n,e),r.on=c}}var u=e(6);n.a=function(t,n){var e=this._id;return arguments.length<2?Object(u.f)(this.node(),e).on.on(t):this.each(i(e,t,n))}},function(t,n,e){"use strict";function r(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}n.a=function(){return this.on("end.remove",r(this._id))}},function(t,n,e){"use strict";var r=e(1),i=e(10),u=e(6);n.a=function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Object(r.l)(t));for(var c=this._groups,o=c.length,a=new Array(o),f=0;f<o;++f)for(var s,l,h=c[f],d=h.length,b=a[f]=new Array(d),v=0;v<d;++v)(s=h[v])&&(l=t.call(s,s.__data__,v,h))&&("__data__"in s&&(l.__data__=s.__data__),b[v]=l,Object(u.e)(b[v],n,e,v,b,Object(u.f)(s,e)));return new i.a(a,this._parents,n,e)}},function(t,n,e){"use strict";var r=e(1),i=e(10),u=e(6);n.a=function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Object(r.m)(t));for(var c=this._groups,o=c.length,a=[],f=[],s=0;s<o;++s)for(var l,h=c[s],d=h.length,b=0;b<d;++b)if(l=h[b]){for(var v,p=t.call(l,l.__data__,b,h),g=Object(u.f)(l,e),y=0,_=p.length;y<_;++y)(v=p[y])&&Object(u.e)(v,n,e,y,p,g);a.push(p),f.push(l)}return new i.a(a,f,n,e)}},function(t,n,e){"use strict";var r=e(1),i=r.k.prototype.constructor;n.a=function(){return new i(this._groups,this._parents)}},function(t,n,e){"use strict";function r(t,n){var e,r,i;return function(){var u=Object(a.n)(this,t),c=(this.style.removeProperty(t),Object(a.n)(this,t));return u===c?null:u===e&&c===r?i:i=n(e=u,r=c)}}function i(t){return function(){this.style.removeProperty(t)}}function u(t,n,e){var r,i;return function(){var u=Object(a.n)(this,t);return u===e?null:u===r?i:i=n(r=u,e)}}function c(t,n,e){var r,i,u;return function(){var c=Object(a.n)(this,t),o=e(this);return null==o&&(this.style.removeProperty(t),o=Object(a.n)(this,t)),c===o?null:c===r&&o===i?u:u=n(r=c,i=o)}}var o=e(5),a=e(1),f=e(35),s=e(122);n.a=function(t,n,e){var a="transform"==(t+="")?o.t:s.a;return null==n?this.styleTween(t,r(t,a)).on("end.style."+t,i(t)):this.styleTween(t,"function"==typeof n?c(t,a,Object(f.b)(this,"style."+t,n)):u(t,a,n+""),e)}},function(t,n,e){"use strict";function r(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}n.a=function(t,n,e){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==n)return this.tween(i,null);if("function"!=typeof n)throw new Error;return this.tween(i,r(t,n,null==e?"":e))}},function(t,n,e){"use strict";function r(t){return function(){this.textContent=t}}function i(t){return function(){var n=t(this);this.textContent=null==n?"":n}}var u=e(35);n.a=function(t){return this.tween("text","function"==typeof t?i(Object(u.b)(this,"text",t)):r(null==t?"":t+""))}},function(t,n,e){"use strict";var r=e(10),i=e(6);n.a=function(){for(var t=this._name,n=this._id,e=Object(r.c)(),u=this._groups,c=u.length,o=0;o<c;++o)for(var a,f=u[o],s=f.length,l=0;l<s;++l)if(a=f[l]){var h=Object(i.f)(a,n);Object(i.e)(a,t,e,l,f,{time:h.time+h.delay+h.duration,delay:0,duration:h.duration,ease:h.ease})}return new r.a(u,this._parents,t,e)}},function(t,n,e){"use strict";function r(t){return+t}n.a=r},function(t,n,e){"use strict";function r(t){return t*t}function i(t){return t*(2-t)}function u(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}n.a=r,n.c=i,n.b=u},function(t,n,e){"use strict";function r(t){return t*t*t}function i(t){return--t*t*t+1}function u(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}n.a=r,n.c=i,n.b=u},function(t,n,e){"use strict";e.d(n,"a",function(){return r}),e.d(n,"c",function(){return i}),e.d(n,"b",function(){return u});var r=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),i=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),u=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3)},function(t,n,e){"use strict";function r(t){return 1-Math.cos(t*o)}function i(t){return Math.sin(t*o)}function u(t){return(1-Math.cos(c*t))/2}n.a=r,n.c=i,n.b=u;var c=Math.PI,o=c/2},function(t,n,e){"use strict";function r(t){return Math.pow(2,10*t-10)}function i(t){return 1-Math.pow(2,-10*t)}function u(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}n.a=r,n.c=i,n.b=u},function(t,n,e){"use strict";function r(t){return 1-Math.sqrt(1-t*t)}function i(t){return Math.sqrt(1- --t*t)}function u(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}n.a=r,n.c=i,n.b=u},function(t,n,e){"use strict";function r(t){return 1-i(1-t)}function i(t){return(t=+t)<c?v*t*t:t<a?v*(t-=o)*t+f:t<l?v*(t-=s)*t+h:v*(t-=d)*t+b}function u(t){return((t*=2)<=1?1-i(1-t):i(t-1)+1)/2}n.a=r,n.c=i,n.b=u;var c=4/11,o=6/11,a=8/11,f=.75,s=9/11,l=10/11,h=.9375,d=21/22,b=63/64,v=1/c/c},function(t,n,e){"use strict";e.d(n,"a",function(){return r}),e.d(n,"c",function(){return i}),e.d(n,"b",function(){return u});var r=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),i=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),u=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158)},function(t,n,e){"use strict";e.d(n,"a",function(){return i}),e.d(n,"c",function(){return u}),e.d(n,"b",function(){return c});var r=2*Math.PI,i=function t(n,e){function i(t){return n*Math.pow(2,10*--t)*Math.sin((u-t)/e)}var u=Math.asin(1/(n=Math.max(1,n)))*(e/=r);return i.amplitude=function(n){return t(n,e*r)},i.period=function(e){return t(n,e)},i}(1,.3),u=function t(n,e){function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+u)/e)}var u=Math.asin(1/(n=Math.max(1,n)))*(e/=r);return i.amplitude=function(n){return t(n,e*r)},i.period=function(e){return t(n,e)},i}(1,.3),c=function t(n,e){function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((u-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((u+t)/e))/2}var u=Math.asin(1/(n=Math.max(1,n)))*(e/=r);return i.amplitude=function(n){return t(n,e*r)},i.period=function(e){return t(n,e)},i}(1,.3)},function(t,n,e){"use strict";var r=e(10),i=e(6),u=[null];n.a=function(t,n){var e,c,o=t.__transition;if(o){n=null==n?null:n+"";for(c in o)if((e=o[c]).state>i.c&&e.name===n)return new r.a([[t]],u,n,+c)}return null}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";n.a=function(t,n,e){this.target=t,this.type=n,this.selection=e}},function(t,n,e){"use strict";function r(){i.c.stopImmediatePropagation()}n.b=r;var i=e(1);n.a=function(){i.c.preventDefault(),i.c.stopImmediatePropagation()}},function(t,n,e){"use strict";var r=e(283);e.d(n,"a",function(){return r.a});var i=e(284);e.d(n,"b",function(){return i.a})},function(t,n,e){"use strict";function r(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}var i=e(3),u=e(124);n.a=function(){function t(t){var r,a,f,s,l,h,d=t.length,b=[],v=Object(i.s)(d),p=[],g=[],y=g.groups=new Array(d),_=new Array(d*d);for(r=0,l=-1;++l<d;){for(a=0,h=-1;++h<d;)a+=t[l][h];b.push(a),p.push(Object(i.s)(d)),r+=a}for(e&&v.sort(function(t,n){return e(b[t],b[n])}),c&&p.forEach(function(n,e){n.sort(function(n,r){return c(t[e][n],t[e][r])})}),r=Object(u.c)(0,u.e-n*d)/r,s=r?n:u.e/d,a=0,l=-1;++l<d;){for(f=a,h=-1;++h<d;){var m=v[l],O=p[m][h],j=t[m][O],x=a,w=a+=j*r;_[O*d+m]={index:m,subindex:O,startAngle:x,endAngle:w,value:j}}y[m]={index:m,startAngle:f,endAngle:a,value:b[m]},a+=s}for(l=-1;++l<d;)for(h=l-1;++h<d;){var M=_[h*d+l],k=_[l*d+h];(M.value||k.value)&&g.push(M.value<k.value?{source:k,target:M}:{source:M,target:k})}return o?g.sort(o):g}var n=0,e=null,c=null,o=null;return t.padAngle=function(e){return arguments.length?(n=Object(u.c)(0,e),t):n},t.sortGroups=function(n){return arguments.length?(e=n,t):e},t.sortSubgroups=function(n){return arguments.length?(c=n,t):c},t.sortChords=function(n){return arguments.length?(null==n?o=null:(o=r(n))._=n,t):o&&o._},t}},function(t,n,e){"use strict";function r(t){return t.source}function i(t){return t.target}function u(t){return t.radius}function c(t){return t.startAngle}function o(t){return t.endAngle}var a=e(285),f=e(286),s=e(124),l=e(13);n.a=function(){function t(){var t,r=a.a.call(arguments),i=n.apply(this,r),u=e.apply(this,r),c=+h.apply(this,(r[0]=i,r)),o=d.apply(this,r)-s.b,f=b.apply(this,r)-s.b,p=c*Object(s.a)(o),g=c*Object(s.d)(o),y=+h.apply(this,(r[0]=u,r)),_=d.apply(this,r)-s.b,m=b.apply(this,r)-s.b;if(v||(v=t=Object(l.a)()),v.moveTo(p,g),v.arc(0,0,c,o,f),o===_&&f===m||(v.quadraticCurveTo(0,0,y*Object(s.a)(_),y*Object(s.d)(_)),v.arc(0,0,y,_,m)),v.quadraticCurveTo(0,0,p,g),v.closePath(),t)return v=null,t+""||null}var n=r,e=i,h=u,d=c,b=o,v=null;return t.radius=function(n){return arguments.length?(h="function"==typeof n?n:Object(f.a)(+n),t):h},t.startAngle=function(n){return arguments.length?(d="function"==typeof n?n:Object(f.a)(+n),t):d},t.endAngle=function(n){return arguments.length?(b="function"==typeof n?n:Object(f.a)(+n),t):b},t.source=function(e){return arguments.length?(n=e,t):n},t.target=function(n){return arguments.length?(e=n,t):e},t.context=function(n){return arguments.length?(v=null==n?null:n,t):v},t}},function(t,n,e){"use strict";e.d(n,"a",function(){return r});var r=Array.prototype.slice},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";function r(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function i(){return new r}var u=Math.PI,c=2*u,o=c-1e-6;r.prototype=i.prototype={constructor:r,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,u){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+u)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var c=this._x1,o=this._y1,a=e-t,f=r-n,s=c-t,l=o-n,h=s*s+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(l*a-f*s)>1e-6&&i){var d=e-c,b=r-o,v=a*a+f*f,p=d*d+b*b,g=Math.sqrt(v),y=Math.sqrt(h),_=i*Math.tan((u-Math.acos((v+h-p)/(2*g*y)))/2),m=_/y,O=_/g;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*s)+","+(n+m*l)),this._+="A"+i+","+i+",0,0,"+ +(l*d>s*b)+","+(this._x1=t+O*a)+","+(this._y1=n+O*f)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,a){t=+t,n=+n,e=+e;var f=e*Math.cos(r),s=e*Math.sin(r),l=t+f,h=n+s,d=1^a,b=a?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+l+","+h:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-h)>1e-6)&&(this._+="L"+l+","+h),e&&(b<0&&(b=b%c+c),b>o?this._+="A"+e+","+e+",0,1,"+d+","+(t-f)+","+(n-s)+"A"+e+","+e+",0,1,"+d+","+(this._x1=l)+","+(this._y1=h):b>1e-6&&(this._+="A"+e+","+e+",0,"+ +(b>=u)+","+d+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}},n.a=i},function(t,n,e){"use strict";function r(){return{}}function i(t,n,e){t[n]=e}function u(){return Object(o.a)()}function c(t,n,e){t.set(n,e)}var o=e(64);n.a=function(){function t(n,r,i,u){if(r>=s.length)return null!=e&&n.sort(e),null!=a?a(n):n;for(var c,f,l,h=-1,d=n.length,b=s[r++],v=Object(o.a)(),p=i();++h<d;)(l=v.get(c=b(f=n[h])+""))?l.push(f):v.set(c,[f]);return v.each(function(n,e){u(p,e,t(n,r,i,u))}),p}function n(t,e){if(++e>s.length)return t;var r,i=l[e-1];return null!=a&&e>=s.length?r=t.entries():(r=[],t.each(function(t,i){r.push({key:i,values:n(t,e)})})),null!=i?r.sort(function(t,n){return i(t.key,n.key)}):r}var e,a,f,s=[],l=[];return f={object:function(n){return t(n,0,r,i)},map:function(n){return t(n,0,u,c)},entries:function(e){return n(t(e,0,u,c),0)},key:function(t){return s.push(t),f},sortKeys:function(t){return l[s.length-1]=t,f},sortValues:function(t){return e=t,f},rollup:function(t){return a=t,f}}}},function(t,n,e){"use strict";function r(){}function i(t,n){var e=new r;if(t instanceof r)t.each(function(t){e.add(t)});else if(t){var i=-1,u=t.length;if(null==n)for(;++i<u;)e.add(t[i]);else for(;++i<u;)e.add(n(t[i],i,t))}return e}var u=e(64),c=u.a.prototype;r.prototype=i.prototype={constructor:r,has:c.has,add:function(t){return t+="",this[u.b+t]=t,this},remove:c.remove,clear:c.clear,values:c.keys,size:c.size,empty:c.empty,each:c.each},n.a=i},function(t,n,e){"use strict";n.a=function(t){var n=[];for(var e in t)n.push(e);return n}},function(t,n,e){"use strict";n.a=function(t){var n=[];for(var e in t)n.push(t[e]);return n}},function(t,n,e){"use strict";n.a=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n}},function(t,n,e){"use strict";e.d(n,"c",function(){return u}),e.d(n,"d",function(){return c}),e.d(n,"a",function(){return o}),e.d(n,"b",function(){return a});var r=e(66),i=Object(r.a)(","),u=i.parse,c=i.parseRows,o=i.format,a=i.formatRows},function(t,n,e){"use strict";e.d(n,"c",function(){return u}),e.d(n,"d",function(){return c}),e.d(n,"a",function(){return o}),e.d(n,"b",function(){return a});var r=e(66),i=Object(r.a)("\t"),u=i.parse,c=i.parseRows,o=i.format,a=i.formatRows},function(t,n,e){"use strict";var r=e(296);e.d(n,"a",function(){return r.a});var i=e(297);e.d(n,"b",function(){return i.a});var u=e(311);e.d(n,"c",function(){return u.a});var c=e(312);e.d(n,"d",function(){return c.a});var o=e(125);e.d(n,"e",function(){return o.a});var a=e(313);e.d(n,"f",function(){return a.a});var f=e(314);e.d(n,"g",function(){return f.a})},function(t,n,e){"use strict";n.a=function(t,n){function e(){var e,i,u=r.length,c=0,o=0;for(e=0;e<u;++e)i=r[e],c+=i.x,o+=i.y;for(c=c/u-t,o=o/u-n,e=0;e<u;++e)i=r[e],i.x-=c,i.y-=o}var r;return null==t&&(t=0),null==n&&(n=0),e.initialize=function(t){r=t},e.x=function(n){return arguments.length?(t=+n,e):t},e.y=function(t){return arguments.length?(n=+t,e):n},e}},function(t,n,e){"use strict";function r(t){return t.x+t.vx}function i(t){return t.y+t.vy}var u=e(23),c=e(67),o=e(68);n.a=function(t){function n(){function t(t,n,e,r,i){var u=t.data,o=t.r,f=v+o;{if(!u)return n>d+f||r<d-f||e>b+f||i<b-f;if(u.index>a.index){var s=d-u.x-u.vx,h=b-u.y-u.vy,g=s*s+h*h;g<f*f&&(0===s&&(s=Object(c.a)(),g+=s*s),0===h&&(h=Object(c.a)(),g+=h*h),g=(f-(g=Math.sqrt(g)))/g*l,a.vx+=(s*=g)*(f=(o*=o)/(p+o)),a.vy+=(h*=g)*f,u.vx-=s*(f=1-f),u.vy-=h*f)}}}for(var n,u,a,d,b,v,p,g=f.length,y=0;y<h;++y)for(u=Object(o.a)(f,r,i).visitAfter(e),n=0;n<g;++n)a=f[n],v=s[a.index],p=v*v,d=a.x+a.vx,b=a.y+a.vy,u.visit(t)}function e(t){if(t.data)return t.r=s[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(f){var n,e,r=f.length;for(s=new Array(r),n=0;n<r;++n)e=f[n],s[e.index]=+t(e,n,f)}}var f,s,l=1,h=1;return"function"!=typeof t&&(t=Object(u.a)(null==t?1:+t)),n.initialize=function(t){f=t,a()},n.iterations=function(t){return arguments.length?(h=+t,n):h},n.strength=function(t){return arguments.length?(l=+t,n):l},n.radius=function(e){return arguments.length?(t="function"==typeof e?e:Object(u.a)(+e),a(),n):t},n}},function(t,n,e){"use strict";function r(t,n,e){var r=new i(null==n?p.b:n,null==e?g.b:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function i(t,n,e,r,i,u){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=u,this._root=void 0}function u(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}n.a=r;var c=e(299),o=e(300),a=e(301),f=e(302),s=e(303),l=e(304),h=e(305),d=e(306),b=e(307),v=e(308),p=e(309),g=e(310),y=r.prototype=i.prototype;y.copy=function(){var t,n,e=new i(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=u(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var c=0;c<4;++c)(n=r.source[c])&&(n.length?t.push({source:n,target:r.target[c]=new Array(4)}):r.target[c]=u(n));return e},y.add=c.b,y.addAll=c.a,y.cover=o.a,y.data=a.a,y.extent=f.a,y.find=s.a,y.remove=l.a,y.removeAll=l.b,y.root=h.a,y.size=d.a,y.visit=b.a,y.visitAfter=v.a,y.x=p.a,y.y=g.a},function(t,n,e){"use strict";function r(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,u,c,o,a,f,s,l,h,d=t._root,b={data:r},v=t._x0,p=t._y0,g=t._x1,y=t._y1;if(!d)return t._root=b,t;for(;d.length;)if((f=n>=(u=(v+g)/2))?v=u:g=u,(s=e>=(c=(p+y)/2))?p=c:y=c,i=d,!(d=d[l=s<<1|f]))return i[l]=b,t;if(o=+t._x.call(null,d.data),a=+t._y.call(null,d.data),n===o&&e===a)return b.next=d,i?i[l]=b:t._root=b,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(f=n>=(u=(v+g)/2))?v=u:g=u,(s=e>=(c=(p+y)/2))?p=c:y=c}while((l=s<<1|f)==(h=(a>=c)<<1|o>=u));return i[h]=d,i[l]=b,t}function i(t){var n,e,i,u,c=t.length,o=new Array(c),a=new Array(c),f=1/0,s=1/0,l=-1/0,h=-1/0;for(e=0;e<c;++e)isNaN(i=+this._x.call(null,n=t[e]))||isNaN(u=+this._y.call(null,n))||(o[e]=i,a[e]=u,i<f&&(f=i),i>l&&(l=i),u<s&&(s=u),u>h&&(h=u));for(l<f&&(f=this._x0,l=this._x1),h<s&&(s=this._y0,h=this._y1),this.cover(f,s).cover(l,h),e=0;e<c;++e)r(this,o[e],a[e],t[e]);return this}n.a=i,n.b=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return r(this.cover(n,e),n,e,t)}},function(t,n,e){"use strict";n.a=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,u=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,u=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>u))return this;var c,o,a=i-e,f=this._root;switch(o=(n<(r+u)/2)<<1|t<(e+i)/2){case 0:do{c=new Array(4),c[o]=f,f=c}while(a*=2,i=e+a,u=r+a,t>i||n>u);break;case 1:do{c=new Array(4),c[o]=f,f=c}while(a*=2,e=i-a,u=r+a,e>t||n>u);break;case 2:do{c=new Array(4),c[o]=f,f=c}while(a*=2,i=e+a,r=u-a,t>i||r>n);break;case 3:do{c=new Array(4),c[o]=f,f=c}while(a*=2,e=i-a,r=u-a,e>t||r>n)}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=u,this}},function(t,n,e){"use strict";n.a=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t}},function(t,n,e){"use strict";n.a=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]}},function(t,n,e){"use strict";var r=e(69);n.a=function(t,n,e){var i,u,c,o,a,f,s,l=this._x0,h=this._y0,d=this._x1,b=this._y1,v=[],p=this._root;for(p&&v.push(new r.a(p,l,h,d,b)),null==e?e=1/0:(l=t-e,h=n-e,d=t+e,b=n+e,e*=e);f=v.pop();)if(!(!(p=f.node)||(u=f.x0)>d||(c=f.y0)>b||(o=f.x1)<l||(a=f.y1)<h))if(p.length){var g=(u+o)/2,y=(c+a)/2;v.push(new r.a(p[3],g,y,o,a),new r.a(p[2],u,y,g,a),new r.a(p[1],g,c,o,y),new r.a(p[0],u,c,g,y)),(s=(n>=y)<<1|t>=g)&&(f=v[v.length-1],v[v.length-1]=v[v.length-1-s],v[v.length-1-s]=f)}else{var _=t-+this._x.call(null,p.data),m=n-+this._y.call(null,p.data),O=_*_+m*m;if(O<e){var j=Math.sqrt(e=O);l=t-j,h=n-j,d=t+j,b=n+j,i=p.data}}return i}},function(t,n,e){"use strict";function r(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this}n.b=r,n.a=function(t){if(isNaN(u=+this._x.call(null,t))||isNaN(c=+this._y.call(null,t)))return this;var n,e,r,i,u,c,o,a,f,s,l,h,d=this._root,b=this._x0,v=this._y0,p=this._x1,g=this._y1;if(!d)return this;if(d.length)for(;;){if((f=u>=(o=(b+p)/2))?b=o:p=o,(s=c>=(a=(v+g)/2))?v=a:g=a,n=d,!(d=d[l=s<<1|f]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)}},function(t,n,e){"use strict";n.a=function(){return this._root}},function(t,n,e){"use strict";n.a=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t}},function(t,n,e){"use strict";var r=e(69);n.a=function(t){var n,e,i,u,c,o,a=[],f=this._root;for(f&&a.push(new r.a(f,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(f=n.node,i=n.x0,u=n.y0,c=n.x1,o=n.y1)&&f.length){var s=(i+c)/2,l=(u+o)/2;(e=f[3])&&a.push(new r.a(e,s,l,c,o)),(e=f[2])&&a.push(new r.a(e,i,l,s,o)),(e=f[1])&&a.push(new r.a(e,s,u,c,l)),(e=f[0])&&a.push(new r.a(e,i,u,s,l))}return this}},function(t,n,e){"use strict";var r=e(69);n.a=function(t){var n,e=[],i=[];for(this._root&&e.push(new r.a(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var u=n.node;if(u.length){var c,o=n.x0,a=n.y0,f=n.x1,s=n.y1,l=(o+f)/2,h=(a+s)/2;(c=u[0])&&e.push(new r.a(c,o,a,l,h)),(c=u[1])&&e.push(new r.a(c,l,a,f,h)),(c=u[2])&&e.push(new r.a(c,o,h,l,s)),(c=u[3])&&e.push(new r.a(c,l,h,f,s))}i.push(n)}for(;n=i.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this}},function(t,n,e){"use strict";function r(t){return t[0]}n.b=r,n.a=function(t){return arguments.length?(this._x=t,this):this._x}},function(t,n,e){"use strict";function r(t){return t[1]}n.b=r,n.a=function(t){return arguments.length?(this._y=t,this):this._y}},function(t,n,e){"use strict";function r(t){return t.index}function i(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}var u=e(23),c=e(67),o=e(22);n.a=function(t){function n(t){return 1/Math.min(b[t.source.index],b[t.target.index])}function e(n){for(var e=0,r=t.length;e<_;++e)for(var i,u,o,a,f,s,d,b=0;b<r;++b)i=t[b],u=i.source,o=i.target,a=o.x+o.vx-u.x-u.vx||Object(c.a)(),f=o.y+o.vy-u.y-u.vy||Object(c.a)(),s=Math.sqrt(a*a+f*f),s=(s-h[b])/s*n*l[b],a*=s,f*=s,o.vx-=a*(d=v[b]),o.vy-=f*d,u.vx+=a*(d=1-d),u.vy+=f*d}function a(){if(d){var n,e,r=d.length,u=t.length,c=Object(o.c)(d,p);for(n=0,b=new Array(r);n<u;++n)e=t[n],e.index=n,"object"!=typeof e.source&&(e.source=i(c,e.source)),"object"!=typeof e.target&&(e.target=i(c,e.target)),b[e.source.index]=(b[e.source.index]||0)+1,b[e.target.index]=(b[e.target.index]||0)+1;for(n=0,v=new Array(u);n<u;++n)e=t[n],v[n]=b[e.source.index]/(b[e.source.index]+b[e.target.index]);l=new Array(u),f(),h=new Array(u),s()}}function f(){if(d)for(var n=0,e=t.length;n<e;++n)l[n]=+g(t[n],n,t)}function s(){if(d)for(var n=0,e=t.length;n<e;++n)h[n]=+y(t[n],n,t)}var l,h,d,b,v,p=r,g=n,y=Object(u.a)(30),_=1;return null==t&&(t=[]),e.initialize=function(t){d=t,a()},e.links=function(n){return arguments.length?(t=n,a(),e):t},e.id=function(t){return arguments.length?(p=t,e):p},e.iterations=function(t){return arguments.length?(_=+t,e):_},e.strength=function(t){return arguments.length?(g="function"==typeof t?t:Object(u.a)(+t),f(),e):g},e.distance=function(t){return arguments.length?(y="function"==typeof t?t:Object(u.a)(+t),s(),e):y},e}},function(t,n,e){"use strict";var r=e(23),i=e(67),u=e(68),c=e(125);n.a=function(){function t(t){var n,r=a.length,i=Object(u.a)(a,c.b,c.c).visitAfter(e);for(s=t,n=0;n<r;++n)f=a[n],i.visit(o)}function n(){if(a){var t,n,e=a.length;for(l=new Array(e),t=0;t<e;++t)n=a[t],l[n.index]=+h(n,t,a)}}function e(t){var n,e,r,i,u,c=0;if(t.length){for(r=i=u=0;u<4;++u)(n=t[u])&&(e=n.value)&&(c+=e,r+=e*n.x,i+=e*n.y);t.x=r/c,t.y=i/c}else{n=t,n.x=n.data.x,n.y=n.data.y;do{c+=l[n.data.index]}while(n=n.next)}t.value=c}function o(t,n,e,r){if(!t.value)return!0;var u=t.x-f.x,c=t.y-f.y,o=r-n,a=u*u+c*c;if(o*o/v<a)return a<b&&(0===u&&(u=Object(i.a)(),a+=u*u),0===c&&(c=Object(i.a)(),a+=c*c),a<d&&(a=Math.sqrt(d*a)),f.vx+=u*t.value*s/a,f.vy+=c*t.value*s/a),!0;if(!(t.length||a>=b)){(t.data!==f||t.next)&&(0===u&&(u=Object(i.a)(),a+=u*u),0===c&&(c=Object(i.a)(),a+=c*c),a<d&&(a=Math.sqrt(d*a)));do{t.data!==f&&(o=l[t.data.index]*s/a,f.vx+=u*o,f.vy+=c*o)}while(t=t.next)}}var a,f,s,l,h=Object(r.a)(-30),d=1,b=1/0,v=.81;return t.initialize=function(t){a=t,n()},t.strength=function(e){return arguments.length?(h="function"==typeof e?e:Object(r.a)(+e),n(),t):h},t.distanceMin=function(n){return arguments.length?(d=n*n,t):Math.sqrt(d)},t.distanceMax=function(n){return arguments.length?(b=n*n,t):Math.sqrt(b)},t.theta=function(n){return arguments.length?(v=n*n,t):Math.sqrt(v)},t}},function(t,n,e){"use strict";var r=e(23);n.a=function(t){function n(t){for(var n,e=0,r=i.length;e<r;++e)n=i[e],n.vx+=(c[e]-n.x)*u[e]*t}function e(){if(i){var n,e=i.length;for(u=new Array(e),c=new Array(e),n=0;n<e;++n)u[n]=isNaN(c[n]=+t(i[n],n,i))?0:+o(i[n],n,i)}}var i,u,c,o=Object(r.a)(.1);return"function"!=typeof t&&(t=Object(r.a)(null==t?0:+t)),n.initialize=function(t){i=t,e()},n.strength=function(t){return arguments.length?(o="function"==typeof t?t:Object(r.a)(+t),e(),n):o},n.x=function(i){return arguments.length?(t="function"==typeof i?i:Object(r.a)(+i),e(),n):t},n}},function(t,n,e){"use strict";var r=e(23);n.a=function(t){function n(t){for(var n,e=0,r=i.length;e<r;++e)n=i[e],n.vy+=(c[e]-n.y)*u[e]*t}function e(){if(i){var n,e=i.length;for(u=new Array(e),c=new Array(e),n=0;n<e;++n)u[n]=isNaN(c[n]=+t(i[n],n,i))?0:+o(i[n],n,i)}}var i,u,c,o=Object(r.a)(.1);return"function"!=typeof t&&(t=Object(r.a)(null==t?0:+t)),n.initialize=function(t){i=t,e()},n.strength=function(t){return arguments.length?(o="function"==typeof t?t:Object(r.a)(+t),e(),n):o},n.y=function(i){return arguments.length?(t="function"==typeof i?i:Object(r.a)(+i),e(),n):t},n}},function(t,n,e){"use strict";function r(t){return i=Object(o.a)(t),u=i.format,c=i.formatPrefix,i}e.d(n,"b",function(){return u}),e.d(n,"c",function(){return c}),n.a=r;var i,u,c,o=e(126);r({decimal:".",thousands:",",grouping:[3],currency:["$",""]})},function(t,n,e){"use strict";n.a=function(t,n){return function(e,r){for(var i=e.length,u=[],c=0,o=t[0],a=0;i>0&&o>0&&(a+o+1>r&&(o=Math.max(1,r-a)),u.push(e.substring(i-=o,i+o)),!((a+=o+1)>r));)o=t[c=(c+1)%t.length];return u.reverse().join(n)}}},function(t,n,e){"use strict";n.a=function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}},function(t,n,e){"use strict";n.a=function(t,n){t=t.toPrecision(n);t:for(var e,r=t.length,i=1,u=-1;i<r;++i)switch(t[i]){case".":u=e=i;break;case"0":0===u&&(u=i),e=i;break;case"e":break t;default:u>0&&(u=0)}return u>0?t.slice(0,u)+t.slice(e+1):t}},function(t,n,e){"use strict";var r=e(71);n.a=function(t,n){var e=Object(r.a)(t,n);if(!e)return t+"";var i=e[0],u=e[1];return u<0?"0."+new Array(-u).join("0")+i:i.length>u+1?i.slice(0,u+1)+"."+i.slice(u+1):i+new Array(u-i.length+2).join("0")}},function(t,n,e){"use strict";n.a=function(t){return t}},function(t,n,e){"use strict";var r=e(36);n.a=function(t){return Math.max(0,-Object(r.a)(Math.abs(t)))}},function(t,n,e){"use strict";var r=e(36);n.a=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Object(r.a)(n)/3)))-Object(r.a)(Math.abs(t)))}},function(t,n,e){"use strict";var r=e(36);n.a=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Object(r.a)(n)-Object(r.a)(t))+1}},function(t,n,e){"use strict";var r=e(130);e.d(n,"c",function(){return r.c});var i=e(325);e.d(n,"h",function(){return i.a});var u=e(326);e.d(n,"i",function(){return u.a});var c=e(131);e.d(n,"j",function(){return c.b});var o=e(72);e.d(n,"k",function(){return o.b});var a=e(329);e.d(n,"r",function(){return a.a});var f=e(137);e.d(n,"s",function(){return f.a});var s=e(330);e.d(n,"x",function(){return s.a}),e.d(n,"y",function(){return s.b});var l=e(331);e.d(n,"A",function(){return l.a});var h=e(138);e.d(n,"B",function(){return h.a});var d=e(332);e.d(n,"G",function(){return d.a});var b=e(140);e.d(n,"a",function(){return b.a});var v=e(342);e.d(n,"b",function(){return v.a});var p=e(343);e.d(n,"d",function(){return p.b}),e.d(n,"e",function(){return p.a});var g=e(344);e.d(n,"f",function(){return g.b}),e.d(n,"g",function(){return g.a});var y=e(345);e.d(n,"l",function(){return y.b}),e.d(n,"m",function(){return y.a});var _=e(74);e.d(n,"n",function(){return _.b}),e.d(n,"o",function(){return _.a});var m=e(346);e.d(n,"p",function(){return m.b}),e.d(n,"q",function(){return m.a});var O=e(142);e.d(n,"t",function(){return O.a}),e.d(n,"u",function(){return O.b});var j=e(347);e.d(n,"v",function(){return j.a}),e.d(n,"w",function(){return j.b});var x=e(348);e.d(n,"z",function(){return x.a});var w=e(8);e.d(n,"H",function(){return w.a}),e.d(n,"I",function(){return w.b});var M=e(77);e.d(n,"C",function(){return M.a}),e.d(n,"D",function(){return M.c});var k=e(349);e.d(n,"E",function(){return k.a}),e.d(n,"F",function(){return k.b});var S=e(350);e.d(n,"K",function(){return S.a}),e.d(n,"L",function(){return S.b});var T=e(351);e.d(n,"O",function(){return T.a}),e.d(n,"P",function(){return T.b});var E=e(37);e.d(n,"J",function(){return E.a});var A=e(14);e.d(n,"M",function(){return A.a});var N=e(38);e.d(n,"N",function(){return N.a})},function(t,n,e){"use strict";function r(t,n){O.push(j=[d=t,v=t]),n<b&&(b=n),n>p&&(p=n)}function i(t,n){var e=Object(M.a)([t*k.r,n*k.r]);if(m){var r=Object(M.c)(m,e),i=[r[1],-r[0],0],u=Object(M.c)(i,r);Object(M.e)(u),u=Object(M.g)(u);var c,o=t-g,a=o>0?1:-1,f=u[0]*k.h*a,l=Object(k.a)(o)>180;l^(a*g<f&&f<a*t)?(c=u[1]*k.h)>p&&(p=c):(f=(f+360)%360-180,l^(a*g<f&&f<a*t)?(c=-u[1]*k.h)<b&&(b=c):(n<b&&(b=n),n>p&&(p=n))),l?t<g?s(d,t)>s(d,v)&&(v=t):s(t,v)>s(d,v)&&(d=t):v>=d?(t<d&&(d=t),t>v&&(v=t)):t>g?s(d,t)>s(d,v)&&(v=t):s(t,v)>s(d,v)&&(d=t)}else O.push(j=[d=t,v=t]);n<b&&(b=n),n>p&&(p=n),m=e,g=t}function u(){E.point=i}function c(){j[0]=d,j[1]=v,E.point=r,m=null}function o(t,n){if(m){var e=t-g;T.add(Object(k.a)(e)>180?e+(e>0?360:-360):e)}else y=t,_=n;w.b.point(t,n),i(t,n)}function a(){w.b.lineStart()}function f(){o(y,_),w.b.lineEnd(),Object(k.a)(T)>k.i&&(d=-(v=180)),j[0]=d,j[1]=v,m=null}function s(t,n){return(n-=t)<0?n+360:n}function l(t,n){return t[0]-n[0]}function h(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var d,b,v,p,g,y,_,m,O,j,x=e(18),w=e(130),M=e(24),k=e(0),S=e(14),T=Object(x.a)(),E={point:r,lineStart:u,lineEnd:c,polygonStart:function(){E.point=o,E.lineStart=a,E.lineEnd=f,T.reset(),w.b.polygonStart()},polygonEnd:function(){w.b.polygonEnd(),E.point=r,E.lineStart=u,E.lineEnd=c,w.a<0?(d=-(v=180),b=-(p=90)):T>k.i?p=90:T<-k.i&&(b=-90),j[0]=d,j[1]=v}};n.a=function(t){var n,e,r,i,u,c,o;if(p=v=-(d=b=1/0),O=[],Object(S.a)(t,E),e=O.length){for(O.sort(l),n=1,r=O[0],u=[r];n<e;++n)i=O[n],h(r,i[0])||h(r,i[1])?(s(r[0],i[1])>s(r[0],r[1])&&(r[1]=i[1]),s(i[0],r[1])>s(r[0],r[1])&&(r[0]=i[0])):u.push(r=i);for(c=-1/0,e=u.length-1,n=0,r=u[e];n<=e;r=i,++n)i=u[n],(o=s(r[1],i[0]))>c&&(c=o,d=i[0],v=r[1])}return O=j=null,d===1/0||b===1/0?[[NaN,NaN],[NaN,NaN]]:[[d,b],[v,p]]}},function(t,n,e){"use strict";function r(t,n){t*=E.r,n*=E.r;var e=Object(E.g)(n);i(e*Object(E.g)(t),e*Object(E.t)(t),Object(E.t)(n))}function i(t,n,e){++d,v+=(t-v)/d,p+=(n-p)/d,g+=(e-g)/d}function u(){C.point=c}function c(t,n){t*=E.r,n*=E.r;var e=Object(E.g)(n);k=e*Object(E.g)(t),S=e*Object(E.t)(t),T=Object(E.t)(n),C.point=o,i(k,S,T)}function o(t,n){t*=E.r,n*=E.r;var e=Object(E.g)(n),r=e*Object(E.g)(t),u=e*Object(E.t)(t),c=Object(E.t)(n),o=Object(E.e)(Object(E.u)((o=S*c-T*u)*o+(o=T*r-k*c)*o+(o=k*u-S*r)*o),k*r+S*u+T*c);b+=o,y+=o*(k+(k=r)),_+=o*(S+(S=u)),m+=o*(T+(T=c)),i(k,S,T)}function a(){C.point=r}function f(){C.point=l}function s(){h(w,M),C.point=r}function l(t,n){w=t,M=n,t*=E.r,n*=E.r,C.point=h;var e=Object(E.g)(n);k=e*Object(E.g)(t),S=e*Object(E.t)(t),T=Object(E.t)(n),i(k,S,T)}function h(t,n){t*=E.r,n*=E.r;var e=Object(E.g)(n),r=e*Object(E.g)(t),u=e*Object(E.t)(t),c=Object(E.t)(n),o=S*c-T*u,a=T*r-k*c,f=k*u-S*r,s=Object(E.u)(o*o+a*a+f*f),l=Object(E.c)(s),h=s&&-l/s;O+=h*o,j+=h*a,x+=h*f,b+=l,y+=l*(k+(k=r)),_+=l*(S+(S=u)),m+=l*(T+(T=c)),i(k,S,T)}var d,b,v,p,g,y,_,m,O,j,x,w,M,k,S,T,E=e(0),A=e(11),N=e(14),C={sphere:A.a,point:r,lineStart:u,lineEnd:a,polygonStart:function(){C.lineStart=f,C.lineEnd=s},polygonEnd:function(){C.lineStart=u,C.lineEnd=a}};n.a=function(t){d=b=v=p=g=y=_=m=O=j=x=0,Object(N.a)(t,C);var n=O,e=j,r=x,i=n*n+e*e+r*r;return i<E.j&&(n=y,e=_,r=m,b<E.i&&(n=v,e=p,r=g),(i=n*n+e*e+r*r)<E.j)?[NaN,NaN]:[Object(E.e)(e,n)*E.h,Object(E.c)(r/Object(E.u)(i))*E.h]}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";n.a=function(t,n,e,r,i,u){var c,o=t[0],a=t[1],f=n[0],s=n[1],l=0,h=1,d=f-o,b=s-a;if(c=e-o,d||!(c>0)){if(c/=d,d<0){if(c<l)return;c<h&&(h=c)}else if(d>0){if(c>h)return;c>l&&(l=c)}if(c=i-o,d||!(c<0)){if(c/=d,d<0){if(c>h)return;c>l&&(l=c)}else if(d>0){if(c<l)return;c<h&&(h=c)}if(c=r-a,b||!(c>0)){if(c/=b,b<0){if(c<l)return;c<h&&(h=c)}else if(b>0){if(c>h)return;c>l&&(l=c)}if(c=u-a,b||!(c<0)){if(c/=b,b<0){if(c>h)return;c>l&&(l=c)}else if(b>0){if(c<l)return;c<h&&(h=c)}return l>0&&(t[0]=o+l*d,t[1]=a+l*b),h<1&&(n[0]=o+h*d,n[1]=a+h*b),!0}}}}}},function(t,n,e){"use strict";function r(t,n){return!(!t||!d.hasOwnProperty(t.type))&&d[t.type](t,n)}function i(t,n){return 0===Object(s.a)(t,n)}function u(t,n){var e=Object(s.a)(t[0],t[1]);return Object(s.a)(t[0],n)+Object(s.a)(n,t[1])<=e+l.i}function c(t,n){return!!Object(f.a)(t.map(o),a(n))}function o(t){return t=t.map(a),t.pop(),t}function a(t){return[t[0]*l.r,t[1]*l.r]}var f=e(136),s=e(137),l=e(0),h={Feature:function(t,n){return r(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,i=-1,u=e.length;++i<u;)if(r(e[i].geometry,n))return!0;return!1}},d={Sphere:function(){return!0},Point:function(t,n){return i(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,u=e.length;++r<u;)if(i(e[r],n))return!0;return!1},LineString:function(t,n){return u(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(u(e[r],n))return!0;return!1},Polygon:function(t,n){return c(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(c(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,i=-1,u=e.length;++i<u;)if(r(e[i],n))return!0;return!1}};n.a=function(t,n){return(t&&h.hasOwnProperty(t.type)?h[t.type]:r)(t,n)}},function(t,n,e){"use strict";function r(t,n,e){var r=Object(o.s)(t,n-a.i,e).concat(n);return function(t){return r.map(function(n){return[t,n]})}}function i(t,n,e){var r=Object(o.s)(t,n-a.i,e).concat(n);return function(t){return r.map(function(n){return[n,t]})}}function u(){function t(){return{type:"MultiLineString",coordinates:n()}}function n(){return Object(o.s)(Object(a.f)(f/m)*m,c,m).map(p).concat(Object(o.s)(Object(a.f)(d/O)*O,h,O).map(g)).concat(Object(o.s)(Object(a.f)(u/y)*y,e,y).filter(function(t){return Object(a.a)(t%m)>a.i}).map(b)).concat(Object(o.s)(Object(a.f)(l/_)*_,s,_).filter(function(t){return Object(a.a)(t%O)>a.i}).map(v))}var e,u,c,f,s,l,h,d,b,v,p,g,y=10,_=y,m=90,O=360,j=2.5;return t.lines=function(){return n().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[p(f).concat(g(h).slice(1),p(c).reverse().slice(1),g(d).reverse().slice(1))]}},t.extent=function(n){return arguments.length?t.extentMajor(n).extentMinor(n):t.extentMinor()},t.extentMajor=function(n){return arguments.length?(f=+n[0][0],c=+n[1][0],d=+n[0][1],h=+n[1][1],f>c&&(n=f,f=c,c=n),d>h&&(n=d,d=h,h=n),t.precision(j)):[[f,d],[c,h]]},t.extentMinor=function(n){return arguments.length?(u=+n[0][0],e=+n[1][0],l=+n[0][1],s=+n[1][1],u>e&&(n=u,u=e,e=n),l>s&&(n=l,l=s,s=n),t.precision(j)):[[u,l],[e,s]]},t.step=function(n){return arguments.length?t.stepMajor(n).stepMinor(n):t.stepMinor()},t.stepMajor=function(n){return arguments.length?(m=+n[0],O=+n[1],t):[m,O]},t.stepMinor=function(n){return arguments.length?(y=+n[0],_=+n[1],t):[y,_]},t.precision=function(n){return arguments.length?(j=+n,b=r(l,s,90),v=i(u,e,j),p=r(d,h,90),g=i(f,c,j),t):j},t.extentMajor([[-180,-90+a.i],[180,90-a.i]]).extentMinor([[-180,-80-a.i],[180,80+a.i]])}function c(){return u()()}n.a=u,n.b=c;var o=e(3),a=e(0)},function(t,n,e){"use strict";var r=e(0);n.a=function(t,n){var e=t[0]*r.r,i=t[1]*r.r,u=n[0]*r.r,c=n[1]*r.r,o=Object(r.g)(i),a=Object(r.t)(i),f=Object(r.g)(c),s=Object(r.t)(c),l=o*Object(r.g)(e),h=o*Object(r.t)(e),d=f*Object(r.g)(u),b=f*Object(r.t)(u),v=2*Object(r.c)(Object(r.u)(Object(r.m)(c-i)+o*f*Object(r.m)(u-e))),p=Object(r.t)(v),g=v?function(t){var n=Object(r.t)(t*=v)/p,e=Object(r.t)(v-t)/p,i=e*l+n*d,u=e*h+n*b,c=e*a+n*s;return[Object(r.e)(u,i)*r.h,Object(r.e)(c,Object(r.u)(i*i+u*u))*r.h]}:function(){return[e*r.h,i*r.h]};return g.distance=v,g}},function(t,n,e){"use strict";var r=e(73),i=e(14),u=e(333),c=e(139),o=e(334),a=e(335),f=e(336),s=e(337);n.a=function(t,n){function e(t){return t&&("function"==typeof d&&h.pointRadius(+d.apply(this,arguments)),Object(i.a)(t,l(h))),h.result()}var l,h,d=4.5;return e.area=function(t){return Object(i.a)(t,l(u.a)),u.a.result()},e.measure=function(t){return Object(i.a)(t,l(f.a)),f.a.result()},e.bounds=function(t){return Object(i.a)(t,l(c.a)),c.a.result()},e.centroid=function(t){return Object(i.a)(t,l(o.a)),o.a.result()},e.projection=function(n){return arguments.length?(l=null==n?(t=null,r.a):(t=n).stream,e):t},e.context=function(t){return arguments.length?(h=null==t?(n=null,new s.a):new a.a(n=t),"function"!=typeof d&&h.pointRadius(d),e):n},e.pointRadius=function(t){return arguments.length?(d="function"==typeof t?t:(h.pointRadius(+t),+t),e):d},e.projection(t).context(n)}},function(t,n,e){"use strict";function r(){p.point=i}function i(t,n){p.point=u,o=f=t,a=s=n}function u(t,n){v.add(s*t-f*n),f=t,s=n}function c(){u(o,a)}var o,a,f,s,l=e(18),h=e(0),d=e(11),b=Object(l.a)(),v=Object(l.a)(),p={point:d.a,lineStart:d.a,lineEnd:d.a,polygonStart:function(){p.lineStart=r,p.lineEnd=c},polygonEnd:function(){p.lineStart=p.lineEnd=p.point=d.a,b.add(Object(h.a)(v)),v.reset()},result:function(){var t=b/2;return b.reset(),t}};n.a=p},function(t,n,e){"use strict";function r(t,n){g+=t,y+=n,++_}function i(){k.point=u}function u(t,n){k.point=c,r(b=t,v=n)}function c(t,n){var e=t-b,i=n-v,u=Object(p.u)(e*e+i*i);m+=u*(b+t)/2,O+=u*(v+n)/2,j+=u,r(b=t,v=n)}function o(){k.point=r}function a(){k.point=s}function f(){l(h,d)}function s(t,n){k.point=l,r(h=b=t,d=v=n)}function l(t,n){var e=t-b,i=n-v,u=Object(p.u)(e*e+i*i);m+=u*(b+t)/2,O+=u*(v+n)/2,j+=u,u=v*t-b*n,x+=u*(b+t),w+=u*(v+n),M+=3*u,r(b=t,v=n)}var h,d,b,v,p=e(0),g=0,y=0,_=0,m=0,O=0,j=0,x=0,w=0,M=0,k={point:r,lineStart:i,lineEnd:o,polygonStart:function(){k.lineStart=a,k.lineEnd=f},polygonEnd:function(){k.point=r,k.lineStart=i,k.lineEnd=o},result:function(){var t=M?[x/M,w/M]:j?[m/j,O/j]:_?[g/_,y/_]:[NaN,NaN];return g=y=_=m=O=j=x=w=M=0,t}};n.a=k},function(t,n,e){"use strict";function r(t){this._context=t}n.a=r;var i=e(0),u=e(11);r.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,i.w)}},result:u.a}},function(t,n,e){"use strict";function r(t,n){b.point=i,c=a=t,o=f=n}function i(t,n){a-=t,f-=n,d.add(Object(l.u)(a*a+f*f)),a=t,f=n}var u,c,o,a,f,s=e(18),l=e(0),h=e(11),d=Object(s.a)(),b={point:h.a,lineStart:function(){b.point=r},lineEnd:function(){u&&i(c,o),b.point=h.a},polygonStart:function(){u=!0},polygonEnd:function(){u=null},result:function(){var t=+d;return d.reset(),t}};n.a=b},function(t,n,e){"use strict";function r(){this._string=[]}function i(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}n.a=r,r.prototype={_radius:4.5,_circle:i(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=i(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}}},function(t,n,e){"use strict";function r(t){var n,e=NaN,r=NaN,u=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(c,a){var f=c>0?o.o:-o.o,s=Object(o.a)(c-e);Object(o.a)(s-o.o)<o.i?(t.point(e,r=(r+a)/2>0?o.l:-o.l),t.point(u,r),t.lineEnd(),t.lineStart(),t.point(f,r),t.point(c,r),n=0):u!==f&&s>=o.o&&(Object(o.a)(e-u)<o.i&&(e-=u*o.i),Object(o.a)(c-f)<o.i&&(c-=f*o.i),r=i(e,r,c,a),t.point(u,r),t.lineEnd(),t.lineStart(),t.point(f,r),n=0),t.point(e=c,r=a),u=f},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}function i(t,n,e,r){var i,u,c=Object(o.t)(t-e);return Object(o.a)(c)>o.i?Object(o.d)((Object(o.t)(n)*(u=Object(o.g)(r))*Object(o.t)(e)-Object(o.t)(r)*(i=Object(o.g)(n))*Object(o.t)(t))/(i*u*c)):(n+r)/2}function u(t,n,e,r){var i;if(null==t)i=e*o.l,r.point(-o.o,i),r.point(0,i),r.point(o.o,i),r.point(o.o,0),r.point(o.o,-i),r.point(0,-i),r.point(-o.o,-i),r.point(-o.o,0),r.point(-o.o,i);else if(Object(o.a)(t[0]-n[0])>o.i){var u=t[0]<n[0]?o.o:-o.o;i=e*u/2,r.point(-u,i),r.point(0,i),r.point(u,i)}else r.point(n[0],n[1])}var c=e(141),o=e(0);n.a=Object(c.a)(function(){return!0},r,u,[-o.o,-o.l])},function(t,n,e){"use strict";var r=e(24),i=e(131),u=e(0),c=e(135),o=e(141);n.a=function(t,n){function e(e,r,u,c){Object(i.a)(c,t,n,u,e,r)}function a(t,n){return Object(u.g)(t)*Object(u.g)(n)>h}function f(t){var n,e,r,i,o;return{lineStart:function(){i=r=!1,o=1},point:function(f,h){var v,p=[f,h],g=a(f,h),y=d?g?0:l(f,h):g?l(f+(f<0?u.o:-u.o),h):0;if(!n&&(i=r=g)&&t.lineStart(),g!==r&&(!(v=s(n,p))||Object(c.a)(n,v)||Object(c.a)(p,v))&&(p[0]+=u.i,p[1]+=u.i,g=a(p[0],p[1])),g!==r)o=0,g?(t.lineStart(),v=s(p,n),t.point(v[0],v[1])):(v=s(n,p),t.point(v[0],v[1]),t.lineEnd()),n=v;else if(b&&n&&d^g){var _;y&e||!(_=s(p,n,!0))||(o=0,d?(t.lineStart(),t.point(_[0][0],_[0][1]),t.point(_[1][0],_[1][1]),t.lineEnd()):(t.point(_[1][0],_[1][1]),t.lineEnd(),t.lineStart(),t.point(_[0][0],_[0][1])))}!g||n&&Object(c.a)(n,p)||t.point(p[0],p[1]),n=p,r=g,e=y},lineEnd:function(){r&&t.lineEnd(),n=null},clean:function(){return o|(i&&r)<<1}}}function s(t,n,e){var i=Object(r.a)(t),c=Object(r.a)(n),o=[1,0,0],a=Object(r.c)(i,c),f=Object(r.d)(a,a),s=a[0],l=f-s*s;if(!l)return!e&&t;var d=h*f/l,b=-h*s/l,v=Object(r.c)(o,a),p=Object(r.f)(o,d),g=Object(r.f)(a,b);Object(r.b)(p,g);var y=v,_=Object(r.d)(p,y),m=Object(r.d)(y,y),O=_*_-m*(Object(r.d)(p,p)-1);if(!(O<0)){var j=Object(u.u)(O),x=Object(r.f)(y,(-_-j)/m);if(Object(r.b)(x,p),x=Object(r.g)(x),!e)return x;var w,M=t[0],k=n[0],S=t[1],T=n[1];k<M&&(w=M,M=k,k=w);var E=k-M,A=Object(u.a)(E-u.o)<u.i,N=A||E<u.i;if(!A&&T<S&&(w=S,S=T,T=w),N?A?S+T>0^x[1]<(Object(u.a)(x[0]-M)<u.i?S:T):S<=x[1]&&x[1]<=T:E>u.o^(M<=x[0]&&x[0]<=k)){var C=Object(r.f)(y,(-_+j)/m);return Object(r.b)(C,p),[x,Object(r.g)(C)]}}}function l(n,e){var r=d?t:u.o-t,i=0;return n<-r?i|=1:n>r&&(i|=2),e<-r?i|=4:e>r&&(i|=8),i}var h=Object(u.g)(t),d=h>0,b=Object(u.a)(h)>u.i;return Object(o.a)(a,f,e,d?[0,-t]:[-u.o,t-u.o])}},function(t,n,e){"use strict";function r(t){return Object(o.b)({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}function i(t,n){function e(r,i,u,o,a,s,l,h,d,b,v,p,g,y){var _=l-r,m=h-i,O=_*_+m*m;if(O>4*n&&g--){var j=o+b,x=a+v,w=s+p,M=Object(c.u)(j*j+x*x+w*w),k=Object(c.c)(w/=M),S=Object(c.a)(Object(c.a)(w)-1)<c.i||Object(c.a)(u-d)<c.i?(u+d)/2:Object(c.e)(x,j),T=t(S,k),E=T[0],A=T[1],N=E-r,C=A-i,P=m*N-_*C;(P*P/O>n||Object(c.a)((_*N+m*C)/O-.5)>.3||o*b+a*v+s*p<f)&&(e(r,i,u,o,a,s,E,A,S,j/=M,x/=M,w,g,y),y.point(E,A),e(E,A,S,j,x,w,l,h,d,b,v,p,g,y))}}return function(n){function r(e,r){e=t(e,r),n.point(e[0],e[1])}function i(){_=NaN,w.point=c,n.lineStart()}function c(r,i){var c=Object(u.a)([r,i]),o=t(r,i);e(_,m,y,O,j,x,_=o[0],m=o[1],y=r,O=c[0],j=c[1],x=c[2],a,n),n.point(_,m)}function o(){w.point=r,n.lineEnd()}function f(){i(),w.point=s,w.lineEnd=l}function s(t,n){c(h=t,n),d=_,b=m,v=O,p=j,g=x,w.point=c}function l(){e(_,m,y,O,j,x,d,b,h,v,p,g,a,n),w.lineEnd=o,o()}var h,d,b,v,p,g,y,_,m,O,j,x,w={point:r,lineStart:i,lineEnd:o,polygonStart:function(){n.polygonStart(),w.lineStart=f},polygonEnd:function(){n.polygonEnd(),w.lineStart=i}};return w}}var u=e(24),c=e(0),o=e(38),a=16,f=Object(c.g)(30*c.r);n.a=function(t,n){return+n?i(t,n):r(t)}},function(t,n,e){"use strict";function r(t){function n(t,n){return[t*e,Object(i.t)(n)/e]}var e=Object(i.g)(t);return n.invert=function(t,n){return[t/e,Object(i.c)(n*e)]},n}n.a=r;var i=e(0)},function(t,n,e){"use strict";function r(t){var n=t.length;return{point:function(e,r){for(var i=-1;++i<n;)t[i].point(e,r)},sphere:function(){for(var e=-1;++e<n;)t[e].sphere()},lineStart:function(){for(var e=-1;++e<n;)t[e].lineStart()},lineEnd:function(){for(var e=-1;++e<n;)t[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<n;)t[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<n;)t[e].polygonEnd()}}}var i=e(0),u=e(140),c=e(74),o=e(76);n.a=function(){function t(t){var n=t[0],e=t[1];return h=null,f.point(n,e),h||(s.point(n,e),h)||(l.point(n,e),h)}function n(){return e=a=null,t}var e,a,f,s,l,h,d=Object(u.a)(),b=Object(c.b)().rotate([154,0]).center([-2,58.5]).parallels([55,65]),v=Object(c.b)().rotate([157,0]).center([-3,19.9]).parallels([8,18]),p={point:function(t,n){h=[t,n]}};return t.invert=function(t){var n=d.scale(),e=d.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?b:i>=.166&&i<.234&&r>=-.214&&r<-.115?v:d).invert(t)},t.stream=function(t){return e&&a===t?e:e=r([d.stream(a=t),b.stream(t),v.stream(t)])},t.precision=function(t){return arguments.length?(d.precision(t),b.precision(t),v.precision(t),n()):d.precision()},t.scale=function(n){return arguments.length?(d.scale(n),b.scale(.35*n),v.scale(n),t.translate(d.translate())):d.scale()},t.translate=function(t){if(!arguments.length)return d.translate();var e=d.scale(),r=+t[0],u=+t[1];return f=d.translate(t).clipExtent([[r-.455*e,u-.238*e],[r+.455*e,u+.238*e]]).stream(p),s=b.translate([r-.307*e,u+.201*e]).clipExtent([[r-.425*e+i.i,u+.12*e+i.i],[r-.214*e-i.i,u+.234*e-i.i]]).stream(p),l=v.translate([r-.205*e,u+.212*e]).clipExtent([[r-.214*e+i.i,u+.166*e+i.i],[r-.115*e-i.i,u+.234*e-i.i]]).stream(p),n()},t.fitExtent=function(n,e){return Object(o.a)(t,n,e)},t.fitSize=function(n,e){return Object(o.b)(t,n,e)},t.scale(1070)}},function(t,n,e){"use strict";e.d(n,"a",function(){return c});var r=e(0),i=e(25),u=e(8),c=Object(i.b)(function(t){return Object(r.u)(2/(1+t))});c.invert=Object(i.a)(function(t){return 2*Object(r.c)(t/2)}),n.b=function(){return Object(u.a)(c).scale(124.75).clipAngle(179.999)}},function(t,n,e){"use strict";e.d(n,"a",function(){return c});var r=e(0),i=e(25),u=e(8),c=Object(i.b)(function(t){return(t=Object(r.b)(t))&&t/Object(r.t)(t)});c.invert=Object(i.a)(function(t){return t}),n.b=function(){return Object(u.a)(c).scale(79.4188).clipAngle(179.999)}},function(t,n,e){"use strict";function r(t){return Object(u.v)((u.l+t)/2)}function i(t,n){function e(t,n){a>0?n<-u.l+u.i&&(n=-u.l+u.i):n>u.l-u.i&&(n=u.l-u.i);var e=a/Object(u.p)(r(n),c);return[e*Object(u.t)(c*t),a-e*Object(u.g)(c*t)]}var i=Object(u.g)(t),c=t===n?Object(u.t)(t):Object(u.n)(i/Object(u.g)(n))/Object(u.n)(r(n)/r(t)),a=i*Object(u.p)(r(t),c)/c;return c?(e.invert=function(t,n){var e=a-n,r=Object(u.s)(c)*Object(u.u)(t*t+e*e);return[Object(u.e)(t,Object(u.a)(e))/c*Object(u.s)(e),2*Object(u.d)(Object(u.p)(a/r,1/c))-u.l]},e):o.c}n.a=i;var u=e(0),c=e(75),o=e(77);n.b=function(){return Object(c.a)(i).scale(109.5).parallels([30,30])}},function(t,n,e){"use strict";function r(t,n){function e(t,n){var e=o-n,r=u*t;return[e*Object(i.t)(r),o-e*Object(i.g)(r)]}var r=Object(i.g)(t),u=t===n?Object(i.t)(t):(r-Object(i.g)(n))/(n-t),o=r/u+t;return Object(i.a)(u)<i.i?c.b:(e.invert=function(t,n){var e=o-n;return[Object(i.e)(t,Object(i.a)(e))/u*Object(i.s)(e),o-Object(i.s)(u)*Object(i.u)(t*t+e*e)]},e)}n.a=r;var i=e(0),u=e(75),c=e(142);n.b=function(){return Object(u.a)(r).scale(131.154).center([0,13.9389])}},function(t,n,e){"use strict";function r(t,n){var e=Object(i.g)(n),r=Object(i.g)(t)*e;return[e*Object(i.t)(t)/r,Object(i.t)(n)/r]}n.b=r;var i=e(0),u=e(25),c=e(8);r.invert=Object(u.a)(i.d),n.a=function(){return Object(c.a)(r).scale(144.049).clipAngle(60)}},function(t,n,e){"use strict";function r(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?u.a:Object(c.b)({point:function(i,u){this.stream.point(i*t+e,u*n+r)}})}var i=e(72),u=e(73),c=e(38),o=e(76);n.a=function(){function t(){return a=f=null,s}var n,e,c,a,f,s,l=1,h=0,d=0,b=1,v=1,p=u.a,g=null,y=u.a;return s={stream:function(t){return a&&f===t?a:a=p(y(f=t))},clipExtent:function(r){return arguments.length?(y=null==r?(g=n=e=c=null,u.a):Object(i.a)(g=+r[0][0],n=+r[0][1],e=+r[1][0],c=+r[1][1]),t()):null==g?null:[[g,n],[e,c]]},scale:function(n){return arguments.length?(p=r((l=+n)*b,l*v,h,d),t()):l},translate:function(n){return arguments.length?(p=r(l*b,l*v,h=+n[0],d=+n[1]),t()):[h,d]},reflectX:function(n){return arguments.length?(p=r(l*(b=n?-1:1),l*v,h,d),t()):b<0},reflectY:function(n){return arguments.length?(p=r(l*b,l*(v=n?-1:1),h,d),t()):v<0},fitExtent:function(t,n){return Object(o.a)(s,t,n)},fitSize:function(t,n){return Object(o.b)(s,t,n)}}}},function(t,n,e){"use strict";function r(t,n){return[Object(i.g)(n)*Object(i.t)(t),Object(i.t)(n)]}n.b=r;var i=e(0),u=e(25),c=e(8);r.invert=Object(u.a)(i.c),n.a=function(){return Object(c.a)(r).scale(249.5).clipAngle(90+i.i)}},function(t,n,e){"use strict";function r(t,n){var e=Object(i.g)(n),r=1+Object(i.g)(t)*e;return[e*Object(i.t)(t)/r,Object(i.t)(n)/r]}n.b=r;var i=e(0),u=e(25),c=e(8);r.invert=Object(u.a)(function(t){return 2*Object(i.d)(t)}),n.a=function(){return Object(c.a)(r).scale(250).clipAngle(142)}},function(t,n,e){"use strict";function r(t,n){return[Object(i.n)(Object(i.v)((i.l+n)/2)),-t]}n.b=r;var i=e(0),u=e(77);r.invert=function(t,n){return[-n,2*Object(i.d)(Object(i.k)(t))-i.l]},n.a=function(){var t=Object(u.b)(r),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):(t=n(),[t[1],-t[0]])},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):(t=e(),[t[0],t[1],t[2]-90])},e([0,0,90]).scale(159.155)}},function(t,n,e){"use strict";var r=e(353);e.d(n,"a",function(){return r.a});var i=e(78);e.d(n,"b",function(){return i.c});var u=e(365);e.d(n,"c",function(){return u.a});var c=e(143);e.d(n,"e",function(){return c.a});var o=e(144);e.d(n,"d",function(){return o.a});var a=e(367);e.d(n,"f",function(){return a.a});var f=e(368);e.d(n,"g",function(){return f.a});var s=e(369);e.d(n,"h",function(){return s.a});var l=e(370);e.d(n,"i",function(){return l.a});var h=e(371);e.d(n,"j",function(){return h.a});var d=e(26);e.d(n,"k",function(){return d.a});var b=e(39);e.d(n,"m",function(){return b.a});var v=e(372);e.d(n,"n",function(){return v.a});var p=e(80);e.d(n,"o",function(){return p.a});var g=e(373);e.d(n,"l",function(){return g.a})},function(t,n,e){"use strict";function r(t,n){return t.parent===n.parent?1:2}function i(t){return t.reduce(u,0)/t.length}function u(t,n){return t+n.x}function c(t){return 1+t.reduce(o,0)}function o(t,n){return Math.max(t,n.y)}function a(t){for(var n;n=t.children;)t=n[0];return t}function f(t){for(var n;n=t.children;)t=n[n.length-1];return t}n.a=function(){function t(t){var r,s=0;t.eachAfter(function(t){var e=t.children;e?(t.x=i(e),t.y=c(e)):(t.x=r?s+=n(t,r):0,t.y=0,r=t)});var l=a(t),h=f(t),d=l.x-n(l,h)/2,b=h.x+n(h,l)/2;return t.eachAfter(o?function(n){n.x=(n.x-t.x)*e,n.y=(t.y-n.y)*u}:function(n){n.x=(n.x-d)/(b-d)*e,n.y=(1-(t.y?n.y/t.y:1))*u})}var n=r,e=1,u=1,o=!1;return t.separation=function(e){return arguments.length?(n=e,t):n},t.size=function(n){return arguments.length?(o=!1,e=+n[0],u=+n[1],t):o?null:[e,u]},t.nodeSize=function(n){return arguments.length?(o=!0,e=+n[0],u=+n[1],t):o?[e,u]:null},t}},function(t,n,e){"use strict";function r(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}n.a=function(){return this.eachAfter(r)}},function(t,n,e){"use strict";n.a=function(t){var n,e,r,i,u=this,c=[u];do{for(n=c.reverse(),c=[];u=n.pop();)if(t(u),e=u.children)for(r=0,i=e.length;r<i;++r)c.push(e[r])}while(c.length);return this}},function(t,n,e){"use strict";n.a=function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this}},function(t,n,e){"use strict";n.a=function(t){for(var n,e,r,i=this,u=[i],c=[];i=u.pop();)if(c.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)u.push(n[e]);for(;i=c.pop();)t(i);return this}},function(t,n,e){"use strict";n.a=function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})}},function(t,n,e){"use strict";n.a=function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})}},function(t,n,e){"use strict";function r(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}n.a=function(t){for(var n=this,e=r(n,t),i=[n];n!==e;)n=n.parent,i.push(n);for(var u=i.length;t!==e;)i.splice(u,0,t),t=t.parent;return i}},function(t,n,e){"use strict";n.a=function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n}},function(t,n,e){"use strict";n.a=function(){var t=[];return this.each(function(n){t.push(n)}),t}},function(t,n,e){"use strict";n.a=function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t}},function(t,n,e){"use strict";n.a=function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n}},function(t,n,e){"use strict";function r(t){return Math.sqrt(t.value)}function i(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function u(t,n){return function(e){if(r=e.children){var r,i,u,c=r.length,a=t(e)*n||0;if(a)for(i=0;i<c;++i)r[i].r+=a;if(u=Object(o.b)(r),a)for(i=0;i<c;++i)r[i].r-=a;e.r=u+a}}}function c(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}var o=e(143),a=e(79),f=e(145);n.a=function(){function t(t){return t.x=e/2,t.y=o/2,n?t.eachBefore(i(n)).eachAfter(u(s,.5)).eachBefore(c(1)):t.eachBefore(i(r)).eachAfter(u(f.a,1)).eachAfter(u(s,t.r/Math.min(e,o))).eachBefore(c(Math.min(e,o)/(2*t.r))),t}var n=null,e=1,o=1,s=f.a;return t.radius=function(e){return arguments.length?(n=Object(a.a)(e),t):n},t.size=function(n){return arguments.length?(e=+n[0],o=+n[1],t):[e,o]},t.padding=function(n){return arguments.length?(s="function"==typeof n?n:Object(f.b)(+n),t):s},t}},function(t,n,e){"use strict";function r(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}e.d(n,"b",function(){return i}),n.a=r;var i=Array.prototype.slice},function(t,n,e){"use strict";var r=e(146),i=e(26);n.a=function(){function t(t){var i=t.height+1;return t.x0=t.y0=c,t.x1=e,t.y1=u/i,t.eachBefore(n(u,i)),o&&t.eachBefore(r.a),t}function n(t,n){return function(e){e.children&&Object(i.a)(e,e.x0,t*(e.depth+1)/n,e.x1,t*(e.depth+2)/n);var r=e.x0,u=e.y0,o=e.x1-c,a=e.y1-c;o<r&&(r=o=(r+o)/2),a<u&&(u=a=(u+a)/2),e.x0=r,e.y0=u,e.x1=o,e.y1=a}}var e=1,u=1,c=0,o=!1;return t.round=function(n){return arguments.length?(o=!!n,t):o},t.size=function(n){return arguments.length?(e=+n[0],u=+n[1],t):[e,u]},t.padding=function(n){return arguments.length?(c=+n,t):c},t}},function(t,n,e){"use strict";function r(t){return t.id}function i(t){return t.parentId}var u=e(79),c=e(78),o="$",a={depth:-1},f={};n.a=function(){function t(t){var r,i,u,s,l,h,d,b=t.length,v=new Array(b),p={};for(i=0;i<b;++i)r=t[i],l=v[i]=new c.a(r),null!=(h=n(r,i,t))&&(h+="")&&(d=o+(l.id=h),p[d]=d in p?f:l);for(i=0;i<b;++i)if(l=v[i],null!=(h=e(t[i],i,t))&&(h+="")){if(!(s=p[o+h]))throw new Error("missing: "+h);if(s===f)throw new Error("ambiguous: "+h);s.children?s.children.push(l):s.children=[l],l.parent=s}else{if(u)throw new Error("multiple roots");u=l}if(!u)throw new Error("no root");if(u.parent=a,u.eachBefore(function(t){t.depth=t.parent.depth+1,--b}).eachBefore(c.b),u.parent=null,b>0)throw new Error("cycle");return u}var n=r,e=i;return t.id=function(e){return arguments.length?(n=Object(u.b)(e),t):n},t.parentId=function(n){return arguments.length?(e=Object(u.b)(n),t):e},t}},function(t,n,e){"use strict";function r(t,n){return t.parent===n.parent?1:2}function i(t){var n=t.children;return n?n[0]:t.t}function u(t){var n=t.children;return n?n[n.length-1]:t.t}function c(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function o(t){for(var n,e=0,r=0,i=t.children,u=i.length;--u>=0;)n=i[u],n.z+=e,n.m+=e,e+=n.s+(r+=n.c)}function a(t,n,e){return t.a.parent===n.parent?t.a:e}function f(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function s(t){for(var n,e,r,i,u,c=new f(t,0),o=[c];n=o.pop();)if(r=n._.children)for(n.children=new Array(u=r.length),i=u-1;i>=0;--i)o.push(e=n.children[i]=new f(r[i],i)),e.parent=n;return(c.parent=new f(null,0)).children=[c],c}var l=e(78);f.prototype=Object.create(l.a.prototype),n.a=function(){function t(t){var r=s(t);if(r.eachAfter(n),r.parent.m=-r.z,r.eachBefore(e),v)t.eachBefore(l);else{var i=t,u=t,c=t;t.eachBefore(function(t){t.x<i.x&&(i=t),t.x>u.x&&(u=t),t.depth>c.depth&&(c=t)});var o=i===u?1:h(i,u)/2,a=o-i.x,f=d/(u.x+o+a),p=b/(c.depth||1);t.eachBefore(function(t){t.x=(t.x+a)*f,t.y=t.depth*p})}return t}function n(t){var n=t.children,e=t.parent.children,r=t.i?e[t.i-1]:null;if(n){o(t);var i=(n[0].z+n[n.length-1].z)/2;r?(t.z=r.z+h(t._,r._),t.m=t.z-i):t.z=i}else r&&(t.z=r.z+h(t._,r._));t.parent.A=f(t,r,t.parent.A||e[0])}function e(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function f(t,n,e){if(n){for(var r,o=t,f=t,s=n,l=o.parent.children[0],d=o.m,b=f.m,v=s.m,p=l.m;s=u(s),o=i(o),s&&o;)l=i(l),f=u(f),f.a=t,r=s.z+v-o.z-d+h(s._,o._),r>0&&(c(a(s,t,e),t,r),d+=r,b+=r),v+=s.m,d+=o.m,p+=l.m,b+=f.m;s&&!u(f)&&(f.t=s,f.m+=v-b),o&&!i(l)&&(l.t=o,l.m+=d-p,e=t)}return e}function l(t){t.x*=d,t.y=t.depth*b}var h=r,d=1,b=1,v=null;return t.separation=function(n){return arguments.length?(h=n,t):h},t.size=function(n){return arguments.length?(v=!1,d=+n[0],b=+n[1],t):v?null:[d,b]},t.nodeSize=function(n){return arguments.length?(v=!0,d=+n[0],b=+n[1],t):v?[d,b]:null},t}},function(t,n,e){"use strict";var r=e(146),i=e(80),u=e(79),c=e(145);n.a=function(){function t(t){return t.x0=t.y0=0,t.x1=a,t.y1=f,t.eachBefore(n),s=[0],o&&t.eachBefore(r.a),t}function n(t){var n=s[t.depth],r=t.x0+n,i=t.y0+n,u=t.x1-n,c=t.y1-n;u<r&&(r=u=(r+u)/2),c<i&&(i=c=(i+c)/2),t.x0=r,t.y0=i,t.x1=u,t.y1=c,t.children&&(n=s[t.depth+1]=l(t)/2,r+=v(t)-n,i+=h(t)-n,u-=d(t)-n,c-=b(t)-n,u<r&&(r=u=(r+u)/2),c<i&&(i=c=(i+c)/2),e(t,r,i,u,c))}var e=i.a,o=!1,a=1,f=1,s=[0],l=c.a,h=c.a,d=c.a,b=c.a,v=c.a;return t.round=function(n){return arguments.length?(o=!!n,t):o},t.size=function(n){return arguments.length?(a=+n[0],f=+n[1],t):[a,f]},t.tile=function(n){return arguments.length?(e=Object(u.b)(n),t):e},t.padding=function(n){return arguments.length?t.paddingInner(n).paddingOuter(n):t.paddingInner()},t.paddingInner=function(n){return arguments.length?(l="function"==typeof n?n:Object(c.b)(+n),t):l},t.paddingOuter=function(n){return arguments.length?t.paddingTop(n).paddingRight(n).paddingBottom(n).paddingLeft(n):t.paddingTop()},t.paddingTop=function(n){return arguments.length?(h="function"==typeof n?n:Object(c.b)(+n),t):h},t.paddingRight=function(n){return arguments.length?(d="function"==typeof n?n:Object(c.b)(+n),t):d},t.paddingBottom=function(n){return arguments.length?(b="function"==typeof n?n:Object(c.b)(+n),t):b},t.paddingLeft=function(n){return arguments.length?(v="function"==typeof n?n:Object(c.b)(+n),t):v},t}},function(t,n,e){"use strict";n.a=function(t,n,e,r,i){function u(t,n,e,r,i,c,o){if(t>=n-1){var f=a[t];return f.x0=r,f.y0=i,f.x1=c,f.y1=o,void 0}for(var l=s[t],h=e/2+l,d=t+1,b=n-1;d<b;){var v=d+b>>>1;s[v]<h?d=v+1:b=v}h-s[d-1]<s[d]-h&&t+1<d&&--d;var p=s[d]-l,g=e-p;if(c-r>o-i){var y=(r*g+c*p)/e;u(t,d,p,r,i,y,o),u(d,n,g,y,i,c,o)}else{var _=(i*g+o*p)/e;u(t,d,p,r,i,c,_),u(d,n,g,r,_,c,o)}}var c,o,a=t.children,f=a.length,s=new Array(f+1);for(s[0]=o=c=0;c<f;++c)s[c+1]=o+=a[c].value;u(0,f,t.value,n,e,r,i)}},function(t,n,e){"use strict";var r=e(26),i=e(39);n.a=function(t,n,e,u,c){(1&t.depth?i.a:r.a)(t,n,e,u,c)}},function(t,n,e){"use strict";var r=e(26),i=e(39),u=e(80);n.a=function t(n){function e(t,e,c,o,a){if((f=t._squarify)&&f.ratio===n)for(var f,s,l,h,d,b=-1,v=f.length,p=t.value;++b<v;){for(s=f[b],l=s.children,h=s.value=0,d=l.length;h<d;++h)s.value+=l[h].value;s.dice?Object(r.a)(s,e,c,o,c+=(a-c)*s.value/p):Object(i.a)(s,e,c,e+=(o-e)*s.value/p,a),p-=s.value}else t._squarify=f=Object(u.c)(n,t,e,c,o,a),f.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(u.b)},function(t,n,e){"use strict";var r=e(375);e.d(n,"a",function(){return r.a});var i=e(376);e.d(n,"b",function(){return i.a});var u=e(377);e.d(n,"d",function(){return u.a});var c=e(379);e.d(n,"c",function(){return c.a});var o=e(380);e.d(n,"e",function(){return o.a})},function(t,n,e){"use strict";n.a=function(t){for(var n,e=-1,r=t.length,i=t[r-1],u=0;++e<r;)n=i,i=t[e],u+=n[1]*i[0]-n[0]*i[1];return u/2}},function(t,n,e){"use strict";n.a=function(t){for(var n,e,r=-1,i=t.length,u=0,c=0,o=t[i-1],a=0;++r<i;)n=o,o=t[r],a+=e=n[0]*o[1]-o[0]*n[1],u+=(n[0]+o[0])*e,c+=(n[1]+o[1])*e;return a*=3,[u/a,c/a]}},function(t,n,e){"use strict";function r(t,n){return t[0]-n[0]||t[1]-n[1]}function i(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&Object(u.a)(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}var u=e(378);n.a=function(t){if((e=t.length)<3)return null;var n,e,u=new Array(e),c=new Array(e);for(n=0;n<e;++n)u[n]=[+t[n][0],+t[n][1],n];for(u.sort(r),n=0;n<e;++n)c[n]=[u[n][0],-u[n][1]];var o=i(u),a=i(c),f=a[0]===o[0],s=a[a.length-1]===o[o.length-1],l=[];for(n=o.length-1;n>=0;--n)l.push(t[u[o[n]][2]]);for(n=+f;n<a.length-s;++n)l.push(t[u[a[n]][2]]);return l}},function(t,n,e){"use strict";n.a=function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}},function(t,n,e){"use strict";n.a=function(t,n){for(var e,r,i=t.length,u=t[i-1],c=n[0],o=n[1],a=u[0],f=u[1],s=!1,l=0;l<i;++l)u=t[l],e=u[0],r=u[1],r>o!=f>o&&c<(a-e)*(o-r)/(f-r)+e&&(s=!s),a=e,f=r;return s}},function(t,n,e){"use strict";n.a=function(t){for(var n,e,r=-1,i=t.length,u=t[i-1],c=u[0],o=u[1],a=0;++r<i;)n=c,e=o,u=t[r],c=u[0],o=u[1],n-=c,e-=o,a+=Math.sqrt(n*n+e*e);return a}},function(t,n,e){"use strict";var r=e(382);e.d(n,"a",function(){return r.a})},function(t,n,e){"use strict";function r(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function i(t){if(!t._start)try{u(t)}catch(n){if(t._tasks[t._ended+t._active-1])o(t,n);else if(!t._data)throw n}}function u(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],r=e.length-1,i=e[r];e[r]=c(t,n),--t._waiting,++t._active,e=i.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||l)}}function c(t,n){return function(e,r){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?o(t,e):(t._data[n]=r,t._waiting?i(t):a(t))))}}function o(t,n){var e,r=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--r>=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,a(t)}function a(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}function f(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new r(t)}n.a=f;var s=e(383),l={};r.prototype=f.prototype={constructor:r,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=s.a.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),i(this),this},abort:function(){return null==this._error&&o(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},a(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,a(this),this}}},function(t,n,e){"use strict";e.d(n,"a",function(){return r});var r=[].slice},function(t,n,e){"use strict";var r=e(385);e.d(n,"f",function(){return r.a});var i=e(147);e.d(n,"e",function(){return i.a});var u=e(386);e.d(n,"d",function(){return u.a});var c=e(387);e.d(n,"a",function(){return c.a});var o=e(148);e.d(n,"c",function(){return o.a});var a=e(388);e.d(n,"b",function(){return a.a})},function(t,n,e){"use strict";var r=e(19);n.a=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(r.a)},function(t,n,e){"use strict";var r=e(19),i=e(147);n.a=function t(n){function e(){var t=i.a.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(r.a)},function(t,n,e){"use strict";var r=e(19),i=e(148);n.a=function t(n){function e(t){var e=i.a.source(n)(t);return function(){return e()/t}}return e.source=t,e}(r.a)},function(t,n,e){"use strict";var r=e(19);n.a=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(r.a)},function(t,n,e){"use strict";var r=e(81);e.d(n,"d",function(){return r.a});var i=e(390);e.d(n,"b",function(){return i.a});var u=e(391);e.d(n,"c",function(){return u.a});var c=e(392);e.d(n,"e",function(){return c.a});var o=e(393);e.d(n,"g",function(){return o.a});var a=e(394);e.d(n,"a",function(){return a.a});var f=e(395);e.d(n,"f",function(){return f.a})},function(t,n,e){"use strict";var r=e(40);n.a=Object(r.a)("text/html",function(t){return document.createRange().createContextualFragment(t.responseText)})},function(t,n,e){"use strict";var r=e(40);n.a=Object(r.a)("application/json",function(t){return JSON.parse(t.responseText)})},function(t,n,e){"use strict";var r=e(40);n.a=Object(r.a)("text/plain",function(t){return t.responseText})},function(t,n,e){"use strict";var r=e(40);n.a=Object(r.a)("application/xml",function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n})},function(t,n,e){"use strict";var r=e(65),i=e(149);n.a=Object(i.a)("text/csv",r.c)},function(t,n,e){"use strict";var r=e(65),i=e(149);n.a=Object(i.a)("text/tab-separated-values",r.h)},function(t,n,e){"use strict";var r=e(397);e.d(n,"i",function(){return r.a}),e.d(n,"o",function(){return r.b});var i=e(398);e.d(n,"j",function(){return i.a});var u=e(27);e.d(n,"l",function(){return u.a});var c=e(400);e.d(n,"m",function(){return c.a});var o=e(150);e.d(n,"n",function(){return o.a}),e.d(n,"k",function(){return o.b});var a=e(401);e.d(n,"p",function(){return a.a}),e.d(n,"t",function(){return a.b});var f=e(402);e.d(n,"q",function(){return f.a});var s=e(403);e.d(n,"r",function(){return s.a});var l=e(404);e.d(n,"u",function(){return l.a});var h=e(153);e.d(n,"v",function(){return h.b});var d=e(420);e.d(n,"w",function(){return d.a});var b=e(421);e.d(n,"x",function(){return b.a});var v=e(422);e.d(n,"z",function(){return v.a});var p=e(423);e.d(n,"A",function(){return p.a});var g=e(424);e.d(n,"y",function(){return g.a});var y=e(425);e.d(n,"b",function(){return y.a});var _=e(426);e.d(n,"f",function(){return _.b}),e.d(n,"h",function(){return _.c}),e.d(n,"a",function(){return _.a});var m=e(427);e.d(n,"g",function(){return m.a}),e.d(n,"d",function(){return m.c}),e.d(n,"c",function(){return m.b}),e.d(n,"e",function(){return m.d});var O=e(428);e.d(n,"s",function(){return O.a})},function(t,n,e){"use strict";function r(){function t(){var t=u().length,r=f[1]<f[0],i=f[r-0],o=f[1-r];n=(o-i)/Math.max(1,t-l+2*h),s&&(n=Math.floor(n)),i+=(o-i-n*(t-l))*d,e=n*(1-l),s&&(i=Math.round(i),e=Math.round(e));var b=Object(c.s)(t).map(function(t){return i+n*t});return a(r?b.reverse():b)}var n,e,i=Object(o.a)().unknown(void 0),u=i.domain,a=i.range,f=[0,1],s=!1,l=0,h=0,d=.5;return delete i.unknown,i.domain=function(n){return arguments.length?(u(n),t()):u()},i.range=function(n){return arguments.length?(f=[+n[0],+n[1]],t()):f.slice()},i.rangeRound=function(n){return f=[+n[0],+n[1]],s=!0,t()},i.bandwidth=function(){return e},i.step=function(){return n},i.round=function(n){return arguments.length?(s=!!n,t()):s},i.padding=function(n){return arguments.length?(l=h=Math.max(0,Math.min(1,n)),t()):l},i.paddingInner=function(n){return arguments.length?(l=Math.max(0,Math.min(1,n)),t()):l},i.paddingOuter=function(n){return arguments.length?(h=Math.max(0,Math.min(1,n)),t()):h},i.align=function(n){return arguments.length?(d=Math.max(0,Math.min(1,n)),t()):d},i.copy=function(){return r().domain(u()).range(f).round(s).paddingInner(l).paddingOuter(h).align(d)},t()}function i(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return i(n())},t}function u(){return i(r().paddingInner(1))}n.a=r,n.b=u;var c=e(3),o=e(150)},function(t,n,e){"use strict";function r(){function t(t){return+t}var n=[0,1];return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=i.a.call(e,c.a),t):n.slice()},t.copy=function(){return r().domain(n)},Object(u.b)(t)}n.a=r;var i=e(15),u=e(27),c=e(151)},function(t,n,e){"use strict";var r=e(3),i=e(70);n.a=function(t,n,e){var u,c=t[0],o=t[t.length-1],a=Object(r.A)(c,o,null==n?10:n);switch(e=Object(i.e)(null==e?",f":e),e.type){case"s":var f=Math.max(Math.abs(c),Math.abs(o));return null!=e.precision||isNaN(u=Object(i.g)(a,f))||(e.precision=u),Object(i.d)(e,f);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(u=Object(i.h)(a,Math.max(Math.abs(c),Math.abs(o))))||(e.precision=u-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(u=Object(i.f)(a))||(e.precision=u-2*("%"===e.type))}return Object(i.a)(e)}},function(t,n,e){"use strict";function r(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:Object(h.a)(n)}function i(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function u(t){return isFinite(t)?+("1e"+t):t<0?0:t}function c(t){return 10===t?u:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function o(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function a(t){return function(n){return-t(-n)}}function f(){function t(){return h=o(u),v=c(u),e()[0]<0&&(h=a(h),v=a(v)),n}var n=Object(b.b)(r,i).domain([1,10]),e=n.domain,u=10,h=o(10),v=c(10);return n.base=function(n){return arguments.length?(u=+n,t()):u},n.domain=function(n){return arguments.length?(e(n),t()):e()},n.ticks=function(t){var n,r=e(),i=r[0],c=r[r.length-1];(n=c<i)&&(l=i,i=c,c=l);var o,a,f,l=h(i),d=h(c),b=null==t?10:+t,p=[];if(!(u%1)&&d-l<b){if(l=Math.round(l)-1,d=Math.round(d)+1,i>0){for(;l<d;++l)for(a=1,o=v(l);a<u;++a)if(!((f=o*a)<i)){if(f>c)break;p.push(f)}}else for(;l<d;++l)for(a=u-1,o=v(l);a>=1;--a)if(!((f=o*a)<i)){if(f>c)break;p.push(f)}}else p=Object(s.B)(l,d,Math.min(d-l,b)).map(v);return n?p.reverse():p},n.tickFormat=function(t,e){if(null==e&&(e=10===u?".0e":","),"function"!=typeof e&&(e=Object(l.a)(e)),t===1/0)return e;null==t&&(t=10);var r=Math.max(1,u*t/n.ticks().length);return function(t){var n=t/v(Math.round(h(t)));return n*u<u-.5&&(n*=u),n<=r?e(t):""}},n.nice=function(){return e(Object(d.a)(e(),{floor:function(t){return v(Math.floor(h(t)))},ceil:function(t){return v(Math.ceil(h(t)))}}))},n.copy=function(){return Object(b.a)(n,f().base(u))},n}n.a=f;var s=e(3),l=e(70),h=e(82),d=e(152),b=e(41)},function(t,n,e){"use strict";function r(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function i(){function t(t,n){return(n=r(n,e)-(t=r(t,e)))?function(i){return(r(i,e)-t)/n}:Object(c.a)(n)}function n(t,n){return n=r(n,e)-(t=r(t,e)),function(i){return r(t+n*i,1/e)}}var e=1,u=Object(a.b)(t,n),f=u.domain;return u.exponent=function(t){return arguments.length?(e=+t,f(f())):e},u.copy=function(){return Object(a.a)(u,i().exponent(e))},Object(o.b)(u)}function u(){return i().exponent(.5)}n.a=i,n.b=u;var c=e(82),o=e(27),a=e(41)},function(t,n,e){"use strict";function r(){function t(){var t=0,r=Math.max(1,c.length);for(o=new Array(r-1);++t<r;)o[t-1]=Object(i.r)(e,t/r);return n}function n(t){if(!isNaN(t=+t))return c[Object(i.b)(o,t)]}var e=[],c=[],o=[];return n.invertExtent=function(t){var n=c.indexOf(t);return n<0?[NaN,NaN]:[n>0?o[n-1]:e[0],n<o.length?o[n]:e[e.length-1]]},n.domain=function(n){if(!arguments.length)return e.slice();e=[];for(var r,u=0,c=n.length;u<c;++u)null==(r=n[u])||isNaN(r=+r)||e.push(r);return e.sort(i.a),t()},n.range=function(n){return arguments.length?(c=u.b.call(n),t()):c.slice()},n.quantiles=function(){return o.slice()},n.copy=function(){return r().domain(e).range(c)},n}n.a=r;var i=e(3),u=e(15)},function(t,n,e){"use strict";function r(){function t(t){if(t<=t)return s[Object(i.b)(f,t,0,a)]}function n(){var n=-1;for(f=new Array(a);++n<a;)f[n]=((n+1)*o-(n-a)*e)/(a+1);return t}var e=0,o=1,a=1,f=[.5],s=[0,1];return t.domain=function(t){return arguments.length?(e=+t[0],o=+t[1],n()):[e,o]},t.range=function(t){return arguments.length?(a=(s=u.b.call(t)).length-1,n()):s.slice()},t.invertExtent=function(t){var n=s.indexOf(t);return n<0?[NaN,NaN]:n<1?[e,f[0]]:n>=a?[f[a-1],o]:[f[n-1],f[n]]},t.copy=function(){return r().domain([e,o]).range(s)},Object(c.b)(t)}n.a=r;var i=e(3),u=e(15),c=e(27)},function(t,n,e){"use strict";function r(){function t(t){if(t<=t)return e[Object(i.b)(n,t,0,c)]}var n=[.5],e=[0,1],c=1;return t.domain=function(r){return arguments.length?(n=u.b.call(r),c=Math.min(n.length,e.length-1),t):n.slice()},t.range=function(r){return arguments.length?(e=u.b.call(r),c=Math.min(n.length,e.length-1),t):e.slice()},t.invertExtent=function(t){var r=e.indexOf(t);return[n[r-1],n[r]]},t.copy=function(){return r().domain(n).range(e)},t}n.a=r;var i=e(3),u=e(15)},function(t,n,e){"use strict";e.d(n,"b",function(){return u});var r=e(2),i=Object(r.a)(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Object(r.a)(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):i:null},n.a=i;var u=i.range},function(t,n,e){"use strict";e.d(n,"b",function(){return c});var r=e(2),i=e(9),u=Object(r.a)(function(t){t.setTime(Math.floor(t/i.d)*i.d)},function(t,n){t.setTime(+t+n*i.d)},function(t,n){return(n-t)/i.d},function(t){return t.getUTCSeconds()});n.a=u;var c=u.range},function(t,n,e){"use strict";e.d(n,"b",function(){return c});var r=e(2),i=e(9),u=Object(r.a)(function(t){t.setTime(Math.floor(t/i.c)*i.c)},function(t,n){t.setTime(+t+n*i.c)},function(t,n){return(n-t)/i.c},function(t){return t.getMinutes()});n.a=u;var c=u.range},function(t,n,e){"use strict";e.d(n,"b",function(){return c});var r=e(2),i=e(9),u=Object(r.a)(function(t){var n=t.getTimezoneOffset()*i.c%i.b;n<0&&(n+=i.b),t.setTime(Math.floor((+t-n)/i.b)*i.b+n)},function(t,n){t.setTime(+t+n*i.b)},function(t,n){return(n-t)/i.b},function(t){return t.getHours()});n.a=u;var c=u.range},function(t,n,e){"use strict";e.d(n,"a",function(){return c});var r=e(2),i=e(9),u=Object(r.a)(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*i.c)/i.a},function(t){return t.getDate()-1});n.b=u;var c=u.range},function(t,n,e){"use strict";function r(t){return Object(i.a)(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*u.c)/u.e})}e.d(n,"g",function(){return c}),e.d(n,"c",function(){return o}),e.d(n,"k",function(){return a}),e.d(n,"m",function(){return f}),e.d(n,"i",function(){return s}),e.d(n,"a",function(){return l}),e.d(n,"e",function(){return h}),e.d(n,"h",function(){return d}),e.d(n,"d",function(){return b}),e.d(n,"l",function(){return v}),e.d(n,"n",function(){return p}),e.d(n,"j",function(){return g}),e.d(n,"b",function(){return y}),e.d(n,"f",function(){return _});var i=e(2),u=e(9),c=r(0),o=r(1),a=r(2),f=r(3),s=r(4),l=r(5),h=r(6),d=c.range,b=o.range,v=a.range,p=f.range,g=s.range,y=l.range,_=h.range},function(t,n,e){"use strict";e.d(n,"b",function(){return u});var r=e(2),i=Object(r.a)(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()});n.a=i;var u=i.range},function(t,n,e){"use strict";e.d(n,"b",function(){return u});var r=e(2),i=Object(r.a)(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});i.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Object(r.a)(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null},n.a=i;var u=i.range},function(t,n,e){"use strict";e.d(n,"b",function(){return c});var r=e(2),i=e(9),u=Object(r.a)(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*i.c)},function(t,n){return(n-t)/i.c},function(t){return t.getUTCMinutes()});n.a=u;var c=u.range},function(t,n,e){"use strict";e.d(n,"b",function(){return c});var r=e(2),i=e(9),u=Object(r.a)(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+n*i.b)},function(t,n){return(n-t)/i.b},function(t){return t.getUTCHours()});n.a=u;var c=u.range},function(t,n,e){"use strict";e.d(n,"b",function(){return c});var r=e(2),i=e(9),u=Object(r.a)(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/i.a},function(t){return t.getUTCDate()-1});n.a=u;var c=u.range},function(t,n,e){"use strict";function r(t){return Object(i.a)(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/u.e})}e.d(n,"g",function(){return c}),e.d(n,"c",function(){return o}),e.d(n,"k",function(){return a}),e.d(n,"m",function(){return f}),e.d(n,"i",function(){return s}),e.d(n,"a",function(){return l}),e.d(n,"e",function(){return h}),e.d(n,"h",function(){return d}),e.d(n,"d",function(){return b}),e.d(n,"l",function(){return v}),e.d(n,"n",function(){return p}),e.d(n,"j",function(){return g}),e.d(n,"b",function(){return y}),e.d(n,"f",function(){return _});var i=e(2),u=e(9),c=r(0),o=r(1),a=r(2),f=r(3),s=r(4),l=r(5),h=r(6),d=c.range,b=o.range,v=a.range,p=f.range,g=s.range,y=l.range,_=h.range},function(t,n,e){"use strict";e.d(n,"b",function(){return u});var r=e(2),i=Object(r.a)(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()});n.a=i;var u=i.range},function(t,n,e){"use strict";e.d(n,"b",function(){return u});var r=e(2),i=Object(r.a)(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});i.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Object(r.a)(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null},n.a=i;var u=i.range},function(t,n,e){"use strict";function r(t){var n=new Date(t);return isNaN(n)?null:n}var i=e(155),u=e(84),c=+new Date("2000-01-01T00:00:00.000Z")?r:Object(u.e)(i.b);n.a=c},function(t,n,e){"use strict";var r=e(153),i=e(83),u=e(42);n.a=function(){return Object(r.a)(u._7,u.R,u._5,u.F,u.J,u.N,u.V,u.L,i.g).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])}},function(t,n,e){"use strict";var r=e(28);n.a=Object(r.a)("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf")},function(t,n,e){"use strict";var r=e(28);n.a=Object(r.a)("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6")},function(t,n,e){"use strict";var r=e(28);n.a=Object(r.a)("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9")},function(t,n,e){"use strict";var r=e(28);n.a=Object(r.a)("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5")},function(t,n,e){"use strict";var r=e(7),i=e(5);n.a=Object(i.f)(Object(r.b)(300,.5,0),Object(r.b)(-240,.5,1))},function(t,n,e){"use strict";e.d(n,"c",function(){return u}),e.d(n,"a",function(){return c});var r=e(7),i=e(5),u=Object(i.f)(Object(r.b)(-100,.75,.35),Object(r.b)(80,1.5,.8)),c=Object(i.f)(Object(r.b)(260,.75,.35),Object(r.b)(80,1.5,.8)),o=Object(r.b)();n.b=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return o.h=360*t-100,o.s=1.5-1.5*n,o.l=.8-.9*n,o+""}},function(t,n,e){"use strict";function r(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}e.d(n,"c",function(){return u}),e.d(n,"b",function(){return c}),e.d(n,"d",function(){return o});var i=e(28);n.a=r(Object(i.a)("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));var u=r(Object(i.a)("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),c=r(Object(i.a)("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),o=r(Object(i.a)("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"))},function(t,n,e){"use strict";function r(t){function n(n){var r=(n-e)/(u-e);return t(c?Math.max(0,Math.min(1,r)):r)}var e=0,u=1,c=!1;return n.domain=function(t){return arguments.length?(e=+t[0],u=+t[1],n):[e,u]},n.clamp=function(t){return arguments.length?(c=!!t,n):c},n.interpolator=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return r(t).domain([e,u]).clamp(c)},Object(i.b)(n)}n.a=r;var i=e(27)},function(t,n,e){"use strict";var r=e(430);e.d(n,"a",function(){return r.a});var i=e(156);e.d(n,"b",function(){return i.a});var u=e(85);e.d(n,"v",function(){return u.a});var c=e(431);e.d(n,"A",function(){return c.a});var o=e(434);e.d(n,"c",function(){return o.a}),e.d(n,"C",function(){return o.a});var a=e(158);e.d(n,"w",function(){return a.a}),e.d(n,"D",function(){return a.a});var f=e(159);e.d(n,"B",function(){return f.a});var s=e(435);e.d(n,"x",function(){return s.a}),e.d(n,"z",function(){return s.c}),e.d(n,"y",function(){return s.b});var l=e(436);e.d(n,"P",function(){return l.a}),e.d(n,"X",function(){return l.b});var h=e(161);e.d(n,"Q",function(){return h.a});var d=e(162);e.d(n,"R",function(){return d.a});var b=e(163);e.d(n,"S",function(){return b.a});var v=e(165);e.d(n,"T",function(){return v.a});var p=e(164);e.d(n,"U",function(){return p.a});var g=e(166);e.d(n,"V",function(){return g.a});var y=e(167);e.d(n,"W",function(){return y.a});var _=e(437);e.d(n,"e",function(){return _.a});var m=e(438);e.d(n,"f",function(){return m.a});var O=e(45);e.d(n,"d",function(){return O.b});var j=e(439);e.d(n,"g",function(){return j.a});var x=e(168);e.d(n,"i",function(){return x.b});var w=e(169);e.d(n,"j",function(){return w.b});var M=e(46);e.d(n,"h",function(){return M.b});var k=e(440);e.d(n,"l",function(){return k.a});var S=e(441);e.d(n,"m",function(){return S.a});var T=e(87);e.d(n,"k",function(){return T.a});var E=e(442);e.d(n,"o",function(){return E.a});var A=e(43);e.d(n,"n",function(){return A.a});var N=e(443);e.d(n,"p",function(){return N.a}),e.d(n,"q",function(){return N.b});var C=e(444);e.d(n,"r",function(){return C.a});var P=e(445);e.d(n,"s",function(){return P.a}),e.d(n,"t",function(){return P.b}),e.d(n,"u",function(){return P.c});var z=e(446);e.d(n,"E",function(){return z.a});var L=e(447);e.d(n,"G",function(){return L.a});var R=e(448);e.d(n,"F",function(){return R.a});var q=e(30);e.d(n,"H",function(){return q.a});var I=e(449);e.d(n,"I",function(){return I.a});var D=e(450);e.d(n,"J",function(){return D.a});var B=e(88);e.d(n,"K",function(){return B.a});var U=e(451);e.d(n,"L",function(){return U.a});var F=e(452);e.d(n,"M",function(){return F.a});var H=e(31);e.d(n,"N",function(){return H.a});var Y=e(453);e.d(n,"O",function(){return Y.a})},function(t,n,e){"use strict";function r(t){return t.innerRadius}function i(t){return t.outerRadius}function u(t){return t.startAngle}function c(t){return t.endAngle}function o(t){return t&&t.padAngle}function a(t,n,e,r,i,u,c,o){var a=e-t,f=r-n,s=c-i,l=o-u,h=(s*(n-u)-l*(t-i))/(l*a-s*f);return[t+h*a,n+h*f]}function f(t,n,e,r,i,u,c){var o=t-e,a=n-r,f=(c?u:-u)/Object(h.l)(o*o+a*a),s=f*a,l=-f*o,d=t+s,b=n+l,v=e+s,p=r+l,g=(d+v)/2,y=(b+p)/2,_=v-d,m=p-b,O=_*_+m*m,j=i-u,x=d*p-v*b,w=(m<0?-1:1)*Object(h.l)(Object(h.h)(0,j*j*O-x*x)),M=(x*m-_*w)/O,k=(-x*_-m*w)/O,S=(x*m+_*w)/O,T=(-x*_+m*w)/O,E=M-g,A=k-y,N=S-g,C=T-y;return E*E+A*A>N*N+C*C&&(M=S,k=T),{cx:M,cy:k,x01:-s,y01:-l,x11:M*(i/j-1),y11:k*(i/j-1)}}var s=e(13),l=e(16),h=e(29);n.a=function(){function t(){var t,r,i=+n.apply(this,arguments),u=+e.apply(this,arguments),c=v.apply(this,arguments)-h.g,o=p.apply(this,arguments)-h.g,l=Object(h.a)(o-c),_=o>c;if(y||(y=t=Object(s.a)()),u<i&&(r=u,u=i,i=r),u>h.f)if(l>h.m-h.f)y.moveTo(u*Object(h.e)(c),u*Object(h.k)(c)),y.arc(0,0,u,c,o,!_),i>h.f&&(y.moveTo(i*Object(h.e)(o),i*Object(h.k)(o)),y.arc(0,0,i,o,c,_));else{var m,O,j=c,x=o,w=c,M=o,k=l,S=l,T=g.apply(this,arguments)/2,E=T>h.f&&(b?+b.apply(this,arguments):Object(h.l)(i*i+u*u)),A=Object(h.i)(Object(h.a)(u-i)/2,+d.apply(this,arguments)),N=A,C=A;if(E>h.f){var P=Object(h.c)(E/i*Object(h.k)(T)),z=Object(h.c)(E/u*Object(h.k)(T));(k-=2*P)>h.f?(P*=_?1:-1,w+=P,M-=P):(k=0,w=M=(c+o)/2),(S-=2*z)>h.f?(z*=_?1:-1,j+=z,x-=z):(S=0,j=x=(c+o)/2)}var L=u*Object(h.e)(j),R=u*Object(h.k)(j),q=i*Object(h.e)(M),I=i*Object(h.k)(M);if(A>h.f){var D=u*Object(h.e)(x),B=u*Object(h.k)(x),U=i*Object(h.e)(w),F=i*Object(h.k)(w);if(l<h.j){var H=k>h.f?a(L,R,U,F,D,B,q,I):[q,I],Y=L-H[0],X=R-H[1],W=D-H[0],V=B-H[1],G=1/Object(h.k)(Object(h.b)((Y*W+X*V)/(Object(h.l)(Y*Y+X*X)*Object(h.l)(W*W+V*V)))/2),Z=Object(h.l)(H[0]*H[0]+H[1]*H[1]);N=Object(h.i)(A,(i-Z)/(G-1)),C=Object(h.i)(A,(u-Z)/(G+1))}}S>h.f?C>h.f?(m=f(U,F,L,R,u,C,_),O=f(D,B,q,I,u,C,_),y.moveTo(m.cx+m.x01,m.cy+m.y01),C<A?y.arc(m.cx,m.cy,C,Object(h.d)(m.y01,m.x01),Object(h.d)(O.y01,O.x01),!_):(y.arc(m.cx,m.cy,C,Object(h.d)(m.y01,m.x01),Object(h.d)(m.y11,m.x11),!_),y.arc(0,0,u,Object(h.d)(m.cy+m.y11,m.cx+m.x11),Object(h.d)(O.cy+O.y11,O.cx+O.x11),!_),y.arc(O.cx,O.cy,C,Object(h.d)(O.y11,O.x11),Object(h.d)(O.y01,O.x01),!_))):(y.moveTo(L,R),y.arc(0,0,u,j,x,!_)):y.moveTo(L,R),i>h.f&&k>h.f?N>h.f?(m=f(q,I,D,B,i,-N,_),O=f(L,R,U,F,i,-N,_),y.lineTo(m.cx+m.x01,m.cy+m.y01),N<A?y.arc(m.cx,m.cy,N,Object(h.d)(m.y01,m.x01),Object(h.d)(O.y01,O.x01),!_):(y.arc(m.cx,m.cy,N,Object(h.d)(m.y01,m.x01),Object(h.d)(m.y11,m.x11),!_),y.arc(0,0,i,Object(h.d)(m.cy+m.y11,m.cx+m.x11),Object(h.d)(O.cy+O.y11,O.cx+O.x11),_),y.arc(O.cx,O.cy,N,Object(h.d)(O.y11,O.x11),Object(h.d)(O.y01,O.x01),!_))):y.arc(0,0,i,M,w,_):y.lineTo(q,I)}else y.moveTo(0,0);if(y.closePath(),t)return y=null,t+""||null}var n=r,e=i,d=Object(l.a)(0),b=null,v=u,p=c,g=o,y=null;return t.centroid=function(){var t=(+n.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+v.apply(this,arguments)+ +p.apply(this,arguments))/2-h.j/2;return[Object(h.e)(r)*t,Object(h.k)(r)*t]},t.innerRadius=function(e){return arguments.length?(n="function"==typeof e?e:Object(l.a)(+e),t):n},t.outerRadius=function(n){return arguments.length?(e="function"==typeof n?n:Object(l.a)(+n),t):e},t.cornerRadius=function(n){return arguments.length?(d="function"==typeof n?n:Object(l.a)(+n),t):d},t.padRadius=function(n){return arguments.length?(b=null==n?null:"function"==typeof n?n:Object(l.a)(+n),t):b},t.startAngle=function(n){return arguments.length?(v="function"==typeof n?n:Object(l.a)(+n),t):v},t.endAngle=function(n){return arguments.length?(p="function"==typeof n?n:Object(l.a)(+n),t):p},t.padAngle=function(n){return arguments.length?(g="function"==typeof n?n:Object(l.a)(+n),t):g},t.context=function(n){return arguments.length?(y=null==n?null:n,t):y},t}},function(t,n,e){"use strict";var r=e(16),i=e(432),u=e(433),c=e(29);n.a=function(){function t(t){var r,i,u,l,h,d=t.length,b=0,v=new Array(d),p=new Array(d),g=+a.apply(this,arguments),y=Math.min(c.m,Math.max(-c.m,f.apply(this,arguments)-g)),_=Math.min(Math.abs(y)/d,s.apply(this,arguments)),m=_*(y<0?-1:1);for(r=0;r<d;++r)(h=p[v[r]=r]=+n(t[r],r,t))>0&&(b+=h);for(null!=e?v.sort(function(t,n){return e(p[t],p[n])}):null!=o&&v.sort(function(n,e){return o(t[n],t[e])}),r=0,u=b?(y-d*m)/b:0;r<d;++r,g=l)i=v[r],h=p[i],l=g+(h>0?h*u:0)+m,p[i]={data:t[i],index:r,value:h,startAngle:g,endAngle:l,padAngle:_};return p}var n=u.a,e=i.a,o=null,a=Object(r.a)(0),f=Object(r.a)(c.m),s=Object(r.a)(0);return t.value=function(e){return arguments.length?(n="function"==typeof e?e:Object(r.a)(+e),t):n},t.sortValues=function(n){return arguments.length?(e=n,o=null,t):e},t.sort=function(n){return arguments.length?(o=n,e=null,t):o},t.startAngle=function(n){return arguments.length?(a="function"==typeof n?n:Object(r.a)(+n),t):a},t.endAngle=function(n){return arguments.length?(f="function"==typeof n?n:Object(r.a)(+n),t):f},t.padAngle=function(n){return arguments.length?(s="function"==typeof n?n:Object(r.a)(+n),t):s},t}},function(t,n,e){"use strict";n.a=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}},function(t,n,e){"use strict";n.a=function(t){return t}},function(t,n,e){"use strict";var r=e(157),i=e(156),u=e(158);n.a=function(){var t=Object(i.a)().curve(r.a),n=t.curve,e=t.lineX0,c=t.lineX1,o=t.lineY0,a=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Object(u.b)(e())},delete t.lineX0,t.lineEndAngle=function(){return Object(u.b)(c())},delete t.lineX1,t.lineInnerRadius=function(){return Object(u.b)(o())},delete t.lineY0,t.lineOuterRadius=function(){return Object(u.b)(a())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Object(r.b)(t)):n()._curve},t}},function(t,n,e){"use strict";function r(t){return t.source}function i(t){return t.target}function u(t){function n(){var n,r=d.a.call(arguments),i=e.apply(this,r),f=u.apply(this,r);if(a||(a=n=Object(h.a)()),t(a,+c.apply(this,(r[0]=i,r)),+o.apply(this,r),+c.apply(this,(r[0]=f,r)),+o.apply(this,r)),n)return a=null,n+""||null}var e=r,u=i,c=v.a,o=v.b,a=null;return n.source=function(t){return arguments.length?(e=t,n):e},n.target=function(t){return arguments.length?(u=t,n):u},n.x=function(t){return arguments.length?(c="function"==typeof t?t:Object(b.a)(+t),n):c},n.y=function(t){return arguments.length?(o="function"==typeof t?t:Object(b.a)(+t),n):o},n.context=function(t){return arguments.length?(a=null==t?null:t,n):a},n}function c(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function o(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function a(t,n,e,r,i){var u=Object(p.a)(n,e),c=Object(p.a)(n,e=(e+i)/2),o=Object(p.a)(r,e),a=Object(p.a)(r,i);t.moveTo(u[0],u[1]),t.bezierCurveTo(c[0],c[1],o[0],o[1],a[0],a[1])}function f(){return u(c)}function s(){return u(o)}function l(){var t=u(a);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}n.a=f,n.c=s,n.b=l;var h=e(13),d=e(160),b=e(16),v=e(86),p=e(159)},function(t,n,e){"use strict";e.d(n,"b",function(){return h});var r=e(13),i=e(161),u=e(162),c=e(163),o=e(164),a=e(165),f=e(166),s=e(167),l=e(16),h=[i.a,u.a,c.a,a.a,o.a,f.a,s.a];n.a=function(){function t(){var t;if(u||(u=t=Object(r.a)()),n.apply(this,arguments).draw(u,+e.apply(this,arguments)),t)return u=null,t+""||null}var n=Object(l.a)(i.a),e=Object(l.a)(64),u=null;return t.type=function(e){return arguments.length?(n="function"==typeof e?e:Object(l.a)(e),t):n},t.size=function(n){return arguments.length?(e="function"==typeof n?n:Object(l.a)(+n),t):e},t.context=function(n){return arguments.length?(u=null==n?null:n,t):u},t}},function(t,n,e){"use strict";function r(t){this._context=t}var i=e(44),u=e(45);r.prototype={areaStart:i.a,areaEnd:i.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:Object(u.c)(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},n.a=function(t){return new r(t)}},function(t,n,e){"use strict";function r(t){this._context=t}var i=e(45);r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:Object(i.c)(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},n.a=function(t){return new r(t)}},function(t,n,e){"use strict";function r(t,n){this._basis=new i.a(t),this._beta=n}var i=e(45);r.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],u=n[0],c=t[e]-i,o=n[e]-u,a=-1;++a<=e;)r=a/e,this._basis.point(this._beta*t[a]+(1-this._beta)*(i+r*c),this._beta*n[a]+(1-this._beta)*(u+r*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}},n.a=function t(n){function e(t){return 1===n?new i.a(t):new r(t,n)}return e.beta=function(n){return t(+n)},e}(.85)},function(t,n,e){"use strict";function r(t,n){this._context=t,this._alpha=n}var i=e(168),u=e(44),c=e(87);r.prototype={areaStart:u.a,areaEnd:u.a,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Object(c.b)(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}},n.a=function t(n){function e(t){return n?new r(t,n):new i.a(t,0)}return e.alpha=function(n){return t(+n)},e}(.5)},function(t,n,e){"use strict";function r(t,n){this._context=t,this._alpha=n}var i=e(169),u=e(87);r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Object(u.b)(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}},n.a=function t(n){function e(t){return n?new r(t,n):new i.a(t,0)}return e.alpha=function(n){return t(+n)},e}(.5)},function(t,n,e){"use strict";function r(t){this._context=t}var i=e(44);r.prototype={areaStart:i.a,areaEnd:i.a,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},n.a=function(t){return new r(t)}},function(t,n,e){"use strict";function r(t){return t<0?-1:1}function i(t,n,e){var i=t._x1-t._x0,u=n-t._x1,c=(t._y1-t._y0)/(i||u<0&&-0),o=(e-t._y1)/(u||i<0&&-0),a=(c*u+o*i)/(i+u);return(r(c)+r(o))*Math.min(Math.abs(c),Math.abs(o),.5*Math.abs(a))||0}function u(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function c(t,n,e){var r=t._x0,i=t._y0,u=t._x1,c=t._y1,o=(u-r)/3;t._context.bezierCurveTo(r+o,i+o*n,u-o,c-o*e,u,c)}function o(t){this._context=t}function a(t){this._context=new f(t)}function f(t){this._context=t}function s(t){return new o(t)}function l(t){return new a(t)}n.a=s,n.b=l,o.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:c(this,this._t0,u(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(t=+t,n=+n,t!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,c(this,u(this,e=i(this,t,n)),e);break;default:c(this,this._t0,e=i(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(a.prototype=Object.create(o.prototype)).point=function(t,n){o.prototype.point.call(this,n,t)},f.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,u){this._context.bezierCurveTo(n,t,r,e,u,i)}}},function(t,n,e){"use strict";function r(t){this._context=t}function i(t){var n,e,r=t.length-1,i=new Array(r),u=new Array(r),c=new Array(r);for(i[0]=0,u[0]=2,c[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,u[n]=4,c[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,u[r-1]=7,c[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/u[n-1],u[n]-=e,c[n]-=e*c[n-1];for(i[r-1]=c[r-1]/u[r-1],n=r-2;n>=0;--n)i[n]=(c[n]-i[n+1])/u[n];for(u[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)u[n]=2*t[n+1]-i[n+1];return[i,u]}r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=i(t),u=i(n),c=0,o=1;o<e;++c,++o)this._context.bezierCurveTo(r[0][c],u[0][c],r[1][c],u[1][c],t[o],n[o]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},n.a=function(t){return new r(t)}},function(t,n,e){"use strict";function r(t,n){this._context=t,this._t=n}function i(t){return new r(t,0)}function u(t){return new r(t,1)}n.c=i,n.b=u,r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}},n.a=function(t){return new r(t,.5)}},function(t,n,e){"use strict";function r(t,n){return t[n]}var i=e(160),u=e(16),c=e(30),o=e(31);n.a=function(){function t(t){var r,i,u=n.apply(this,arguments),c=t.length,o=u.length,s=new Array(o);for(r=0;r<o;++r){for(var l,h=u[r],d=s[r]=new Array(c),b=0;b<c;++b)d[b]=l=[0,+f(t[b],h,b,t)],l.data=t[b];d.key=h}for(r=0,i=e(s);r<o;++r)s[i[r]].index=r;return a(s,i),s}var n=Object(u.a)([]),e=o.a,a=c.a,f=r;return t.keys=function(e){return arguments.length?(n="function"==typeof e?e:Object(u.a)(i.a.call(e)),t):n},t.value=function(n){return arguments.length?(f="function"==typeof n?n:Object(u.a)(+n),t):f},t.order=function(n){return arguments.length?(e=null==n?o.a:"function"==typeof n?n:Object(u.a)(i.a.call(n)),t):e},t.offset=function(n){return arguments.length?(a=null==n?c.a:n,t):a},t}},function(t,n,e){"use strict";var r=e(30);n.a=function(t,n){if((i=t.length)>0){for(var e,i,u,c=0,o=t[0].length;c<o;++c){for(u=e=0;e<i;++e)u+=t[e][c][1]||0;if(u)for(e=0;e<i;++e)t[e][c][1]/=u}Object(r.a)(t,n)}}},function(t,n,e){"use strict";n.a=function(t,n){if((o=t.length)>1)for(var e,r,i,u,c,o,a=0,f=t[n[0]].length;a<f;++a)for(u=c=0,e=0;e<o;++e)(i=(r=t[n[e]][a])[1]-r[0])>=0?(r[0]=u,r[1]=u+=i):i<0?(r[1]=c,r[0]=c+=i):r[0]=u}},function(t,n,e){"use strict";var r=e(30);n.a=function(t,n){if((e=t.length)>0){for(var e,i=0,u=t[n[0]],c=u.length;i<c;++i){for(var o=0,a=0;o<e;++o)a+=t[o][i][1]||0;u[i][1]+=u[i][0]=-a/2}Object(r.a)(t,n)}}},function(t,n,e){"use strict";var r=e(30);n.a=function(t,n){if((u=t.length)>0&&(i=(e=t[n[0]]).length)>0){for(var e,i,u,c=0,o=1;o<i;++o){for(var a=0,f=0,s=0;a<u;++a){for(var l=t[n[a]],h=l[o][1]||0,d=l[o-1][1]||0,b=(h-d)/2,v=0;v<a;++v){var p=t[n[v]];b+=(p[o][1]||0)-(p[o-1][1]||0)}f+=h,s+=b*h}e[o-1][1]+=e[o-1][0]=c,f&&(c-=s/f)}e[o-1][1]+=e[o-1][0]=c,Object(r.a)(t,n)}}},function(t,n,e){"use strict";var r=e(88);n.a=function(t){return Object(r.a)(t).reverse()}},function(t,n,e){"use strict";var r=e(31),i=e(88);n.a=function(t){var n,e,u=t.length,c=t.map(i.b),o=Object(r.a)(t).sort(function(t,n){return c[n]-c[t]}),a=0,f=0,s=[],l=[];for(n=0;n<u;++n)e=o[n],a<f?(a+=c[e],s.push(e)):(f+=c[e],l.push(e));return l.reverse().concat(s)}},function(t,n,e){"use strict";var r=e(31);n.a=function(t){return Object(r.a)(t).reverse()}},function(t,n,e){"use strict";var r=e(455);e.d(n,"a",function(){return r.a})},function(t,n,e){"use strict";var r=e(456),i=e(457),u=e(32);n.a=function(){function t(t){return new u.d(t.map(function(r,i){var c=[Math.round(n(r,i,t)/u.f)*u.f,Math.round(e(r,i,t)/u.f)*u.f];return c.index=i,c.data=r,c}),c)}var n=i.a,e=i.b,c=null;return t.polygons=function(n){return t(n).polygons()},t.links=function(n){return t(n).links()},t.triangles=function(n){return t(n).triangles()},t.x=function(e){return arguments.length?(n="function"==typeof e?e:Object(r.a)(+e),t):n},t.y=function(n){return arguments.length?(e="function"==typeof n?n:Object(r.a)(+n),t):e},t.extent=function(n){return arguments.length?(c=null==n?null:[[+n[0][0],+n[0][1]],[+n[1][0],+n[1][1]]],t):c&&[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},t.size=function(n){return arguments.length?(c=null==n?null:[[0,0],[+n[0],+n[1]]],t):c&&[c[1][0]-c[0][0],c[1][1]-c[0][1]]},t}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";function r(t){return t[0]}function i(t){return t[1]}n.a=r,n.b=i},function(t,n,e){"use strict";function r(){Object(s.a)(this),this.edge=this.site=this.circle=null}function i(t){var n=v.pop()||new r;return n.site=t,n}function u(t){Object(h.b)(t),b.a.remove(t),v.push(t),Object(s.a)(t)}function c(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],c=t.P,o=t.N,a=[t];u(t);for(var f=c;f.circle&&Math.abs(e-f.circle.x)<b.f&&Math.abs(r-f.circle.cy)<b.f;)c=f.P,a.unshift(f),u(f),f=c;a.unshift(f),Object(h.b)(f);for(var s=o;s.circle&&Math.abs(e-s.circle.x)<b.f&&Math.abs(r-s.circle.cy)<b.f;)o=s.N,a.push(s),u(s),s=o;a.push(s),Object(h.b)(s);var l,v=a.length;for(l=1;l<v;++l)s=a[l],f=a[l-1],Object(d.d)(s.edge,f.site,s.site,i);f=a[0],s=a[v-1],s.edge=Object(d.c)(f.site,s.site,null,i),Object(h.a)(f),Object(h.a)(s)}function o(t){for(var n,e,r,u,c=t[0],o=t[1],s=b.a._;s;)if((r=a(s,o)-c)>b.f)s=s.L;else{if(!((u=c-f(s,o))>b.f)){r>-b.f?(n=s.P,e=s):u>-b.f?(n=s,e=s.N):n=e=s;break}if(!s.R){n=s;break}s=s.R}Object(l.c)(t);var v=i(t);if(b.a.insert(n,v),n||e){if(n===e)return Object(h.b)(n),e=i(n.site),b.a.insert(v,e),v.edge=e.edge=Object(d.c)(n.site,v.site),Object(h.a)(n),void Object(h.a)(e);if(!e)return void(v.edge=Object(d.c)(n.site,v.site));Object(h.b)(n),Object(h.b)(e);var p=n.site,g=p[0],y=p[1],_=t[0]-g,m=t[1]-y,O=e.site,j=O[0]-g,x=O[1]-y,w=2*(_*x-m*j),M=_*_+m*m,k=j*j+x*x,S=[(x*M-m*k)/w+g,(_*k-j*M)/w+y];Object(d.d)(e.edge,p,O,S),v.edge=Object(d.c)(p,t,null,S),e.edge=Object(d.c)(t,O,null,S),Object(h.a)(n),Object(h.a)(e)}}function a(t,n){var e=t.site,r=e[0],i=e[1],u=i-n;if(!u)return r;var c=t.P;if(!c)return-1/0;e=c.site;var o=e[0],a=e[1],f=a-n;if(!f)return o;var s=o-r,l=1/u-1/f,h=s/f;return l?(-h+Math.sqrt(h*h-2*l*(s*s/(-2*f)-a+f/2+i-u/2)))/l+r:(r+o)/2}function f(t,n){var e=t.N;if(e)return a(e,n);var r=t.site;return r[1]===n?r[0]:1/0}n.b=c,n.a=o;var s=e(89),l=e(170),h=e(171),d=e(90),b=e(32),v=[]},function(t,n,e){"use strict";var r=e(460);e.d(n,"a",function(){return r.a});var i=e(172);e.d(n,"c",function(){return i.b}),e.d(n,"b",function(){return i.c})},function(t,n,e){"use strict";function r(){return!l.c.button}function i(){var t,n,e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e,t=e.width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function u(){return this.__zoom||v.c}function c(){return-l.c.deltaY*(l.c.deltaMode?120:1)/500}function o(){return"ontouchstart"in this}var a=e(12),f=e(49),s=e(5),l=e(1),h=e(62),d=e(461),b=e(462),v=e(172),p=e(463);n.a=function(){function t(t){t.property("__zoom",u).on("wheel.zoom",j).on("mousedown.zoom",x).on("dblclick.zoom",w).filter(o).on("touchstart.zoom",M).on("touchmove.zoom",k).on("touchend.zoom touchcancel.zoom",S).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function n(t,n){return n=Math.max(P,Math.min(z,n)),n===t.k?t:new v.a(n,t.x,t.y)}function e(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new v.a(t.k,r,i)}function g(t,n){var e=t.invertX(n[0][0])-L,r=t.invertX(n[1][0])-R,i=t.invertY(n[0][1])-q,u=t.invertY(n[1][1])-I;return t.translate(r>e?(e+r)/2:Math.min(0,e)||Math.max(0,r),u>i?(i+u)/2:Math.min(0,i)||Math.max(0,u))}function y(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function _(t,n,e){t.on("start.zoom",function(){m(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){m(this,arguments).end()}).tween("zoom",function(){var t=this,r=arguments,i=m(t,r),u=N.apply(t,r),c=e||y(u),o=Math.max(u[1][0]-u[0][0],u[1][1]-u[0][1]),a=t.__zoom,f="function"==typeof n?n.apply(t,r):n,s=B(a.invert(c).concat(o/a.k),f.invert(c).concat(o/f.k));return function(t){if(1===t)t=f;else{var n=s(t),e=o/n[2];t=new v.a(e,c[0]-n[0]*e,c[1]-n[1]*e)}i.zoom(null,t)}})}function m(t,n){for(var e,r=0,i=U.length;r<i;++r)if((e=U[r]).that===t)return e;return new O(t,n)}function O(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=N.apply(t,n)}function j(){function t(){r.wheel=null,r.end()}if(A.apply(this,arguments)){var r=m(this,arguments),i=this.__zoom,u=Math.max(P,Math.min(z,i.k*Math.pow(2,C.apply(this,arguments)))),c=Object(l.f)(this);if(r.wheel)r.mouse[0][0]===c[0]&&r.mouse[0][1]===c[1]||(r.mouse[1]=i.invert(r.mouse[0]=c)),clearTimeout(r.wheel);else{if(i.k===u)return;r.mouse=[c,i.invert(c)],Object(h.b)(this),r.start()}Object(p.a)(),r.wheel=setTimeout(t,Y),r.zoom("mouse",g(e(n(i,u),r.mouse[0],r.mouse[1]),r.extent))}}function x(){function t(){if(Object(p.a)(),!r.moved){var t=l.c.clientX-c,n=l.c.clientY-o;r.moved=t*t+n*n>X}r.zoom("mouse",g(e(r.that.__zoom,r.mouse[0]=Object(l.f)(r.that),r.mouse[1]),r.extent))}function n(){i.on("mousemove.zoom mouseup.zoom",null),Object(f.c)(l.c.view,r.moved),Object(p.a)(),r.end()}if(!E&&A.apply(this,arguments)){var r=m(this,arguments),i=Object(l.i)(l.c.view).on("mousemove.zoom",t,!0).on("mouseup.zoom",n,!0),u=Object(l.f)(this),c=l.c.clientX,o=l.c.clientY;Object(f.b)(l.c.view),Object(p.b)(),r.mouse=[u,this.__zoom.invert(u)],Object(h.b)(this),r.start()}}function w(){if(A.apply(this,arguments)){var r=this.__zoom,i=Object(l.f)(this),u=r.invert(i),c=r.k*(l.c.shiftKey?.5:2),o=g(e(n(r,c),i,u),N.apply(this,arguments));Object(p.a)(),D>0?Object(l.i)(this).transition().duration(D).call(_,o,i):Object(l.i)(this).call(t.transform,o)}}function M(){if(A.apply(this,arguments)){var t,n,e,r,i=m(this,arguments),u=l.c.changedTouches,c=u.length;for(Object(p.b)(),n=0;n<c;++n)e=u[n],r=Object(l.o)(this,u,e.identifier),r=[r,this.__zoom.invert(r),e.identifier],i.touch0?i.touch1||(i.touch1=r):(i.touch0=r,t=!0);if(T&&(T=clearTimeout(T),!i.touch1))return i.end(),void((r=Object(l.i)(this).on("dblclick.zoom"))&&r.apply(this,arguments));t&&(T=setTimeout(function(){T=null},H),Object(h.b)(this),i.start())}}function k(){var t,r,i,u,c=m(this,arguments),o=l.c.changedTouches,a=o.length;for(Object(p.a)(),T&&(T=clearTimeout(T)),t=0;t<a;++t)r=o[t],i=Object(l.o)(this,o,r.identifier),c.touch0&&c.touch0[2]===r.identifier?c.touch0[0]=i:c.touch1&&c.touch1[2]===r.identifier&&(c.touch1[0]=i);if(r=c.that.__zoom,c.touch1){var f=c.touch0[0],s=c.touch0[1],h=c.touch1[0],d=c.touch1[1],b=(b=h[0]-f[0])*b+(b=h[1]-f[1])*b,v=(v=d[0]-s[0])*v+(v=d[1]-s[1])*v;r=n(r,Math.sqrt(b/v)),i=[(f[0]+h[0])/2,(f[1]+h[1])/2],u=[(s[0]+d[0])/2,(s[1]+d[1])/2]}else{if(!c.touch0)return;i=c.touch0[0],u=c.touch0[1]}c.zoom("touch",g(e(r,i,u),c.extent))}function S(){var t,n,e=m(this,arguments),r=l.c.changedTouches,i=r.length;for(Object(p.b)(),E&&clearTimeout(E),E=setTimeout(function(){E=null},H),t=0;t<i;++t)n=r[t],e.touch0&&e.touch0[2]===n.identifier?delete e.touch0:e.touch1&&e.touch1[2]===n.identifier&&delete e.touch1;e.touch1&&!e.touch0&&(e.touch0=e.touch1,delete e.touch1),e.touch0?e.touch0[1]=this.__zoom.invert(e.touch0[0]):e.end()}var T,E,A=r,N=i,C=c,P=0,z=1/0,L=-z,R=z,q=L,I=R,D=250,B=s.v,U=[],F=Object(a.a)("start","zoom","end"),H=500,Y=150,X=0;return t.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",u),t!==e?_(t,n):e.interrupt().each(function(){m(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},t.scaleBy=function(n,e){t.scaleTo(n,function(){return this.__zoom.k*("function"==typeof e?e.apply(this,arguments):e)})},t.scaleTo=function(r,i){t.transform(r,function(){var t=N.apply(this,arguments),r=this.__zoom,u=y(t),c=r.invert(u);return g(e(n(r,"function"==typeof i?i.apply(this,arguments):i),u,c),t)})},t.translateBy=function(n,e,r){t.transform(n,function(){return g(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof r?r.apply(this,arguments):r),N.apply(this,arguments))})},t.translateTo=function(n,e,r){t.transform(n,function(){var t=N.apply(this,arguments),n=this.__zoom,i=y(t);return g(v.c.translate(i[0],i[1]).scale(n.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof r?-r.apply(this,arguments):-r),t)})},O.prototype={start:function(){return 1==++this.active&&(this.index=U.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(U.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(n){Object(l.b)(new b.a(t,n,this.that.__zoom),F.apply,F,[n,this.that,this.args])}},t.wheelDelta=function(n){return arguments.length?(C="function"==typeof n?n:Object(d.a)(+n),t):C},t.filter=function(n){return arguments.length?(A="function"==typeof n?n:Object(d.a)(!!n),t):A},t.extent=function(n){return arguments.length?(N="function"==typeof n?n:Object(d.a)([[+n[0][0],+n[0][1]],[+n[1][0],+n[1][1]]]),t):N},t.scaleExtent=function(n){return arguments.length?(P=+n[0],z=+n[1],t):[P,z]},t.translateExtent=function(n){return arguments.length?(L=+n[0][0],R=+n[1][0],q=+n[0][1],I=+n[1][1],t):[[L,q],[R,I]]},t.duration=function(n){return arguments.length?(D=+n,t):D},t.interpolate=function(n){return arguments.length?(B=n,t):B},t.on=function(){var n=F.on.apply(F,arguments);return n===F?t:n},t.clickDistance=function(n){return arguments.length?(X=(n=+n)*n,t):Math.sqrt(X)},t}},function(t,n,e){"use strict";n.a=function(t){return function(){return t}}},function(t,n,e){"use strict";function r(t,n,e){this.target=t,this.type=n,this.transform=e}n.a=r},function(t,n,e){"use strict";function r(){i.c.stopImmediatePropagation()}n.b=r;var i=e(1);n.a=function(){i.c.preventDefault(),i.c.stopImmediatePropagation()}},function(t,n,e){"use strict";function r(t,n){var e=!1;"#"==t[0]&&(t=t.slice(1),e=!0);var r=parseInt(t,16),i=(r>>16)+n;i>255?i=255:i<0&&(i=0);var u=(r>>8&255)+n;u>255?u=255:u<0&&(u=0);var c=(255&r)+n;return c>255?c=255:c<0&&(c=0),(e?"#":"")+(c|u<<8|i<<16).toString(16)}Object.defineProperty(n,"__esModule",{value:!0}),n.lightenDarkenColor=r},function(t,n,e){"use strict";function r(){f.elements.aboutLink.onclick=function(){f.elements.mainContent.classList.add("active"),f.elements.mainContent.classList.toggle("about")}}function i(){f.elements.editLink.onclick=function(){(0,s.clearSelection)(),f.elements.mainContent.classList.add("active"),f.elements.mainContent.classList.add("edit"),(0,s.toggleHideElement)(f.elements.editLink),Array.from(document.getElementsByClassName("option-input")).forEach(function(t){t.classList.add("active")})}}function u(){f.elements.closeBtn.onclick=function(){f.elements.mainContent.classList.remove("active","about","edit"),(0,s.toggleHideElement)(f.elements.editLink),Array.from(document.getElementsByClassName("option-input")).forEach(function(t){t.classList.remove("active")})}}function c(t){document.getElementById("spin-btn").onclick=function(){t.randomSelection()}}function o(t){var n=t.offsetHeight;window.addEventListener("resize",function(){a(t,n)})}function a(t,n){var e=t.offsetHeight,r=e/n;r<1&&window.requestAnimationFrame(function(){return t.style.transform="scale("+r+")"})}Object.defineProperty(n,"__esModule",{value:!0}),n.addAboutLinkListener=r,n.addEditLinkListener=i,n.addCloseBtnListener=u,n.addSpinButtonListener=c,n.addResizeListener=o;var f=(e(173),e(47)),s=e(91)},function(t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,